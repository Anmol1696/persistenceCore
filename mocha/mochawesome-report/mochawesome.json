{
  "stats": {
    "suites": 44,
    "tests": 90,
    "passes": 90,
    "pending": 0,
    "failures": 0,
    "start": "2020-10-30T11:24:36.134Z",
    "end": "2020-10-30T11:32:01.376Z",
    "duration": 445242,
    "testsRegistered": 90,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "edb52fbc-96a9-4b43-83bd-d7e848deba8b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3689b9fa-6d1c-4187-b0a1-a3d137e9dcf0",
          "title": "Keys",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
          "file": "/test/tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cf181ffd-71b9-4a9f-b5d3-fc2afa612ad5",
              "title": "Account Creation, Sign and Broadcast for User1",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User1 \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "fb254c0a-571f-4d57-802a-46591d7e25e5",
                  "parentUUID": "cf181ffd-71b9-4a9f-b5d3-fc2afa612ad5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should create an account for: 8e31a0a94dff3c6fdb3b1d95ecdc1e7a",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User1 it should create an account for: 8e31a0a94dff3c6fdb3b1d95ecdc1e7a",
                  "timedOut": false,
                  "duration": 189,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let name = {\n                name: name1\n            }\n            let err, res = await chai.request(server)\n                .post(config.keysAdd)\n                .send(name)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.result.success).to.be.true\n            expect(res.body.result.keyOutput.address).to.not.equal(null)\n            expect(res.body.result.keyOutput.address).to.not.equal('')\n            names1.address = res.body.result.keyOutput.address",
                  "err": {},
                  "uuid": "4a460ef9-2ce9-4739-b7e8-d2081b8ba16b",
                  "parentUUID": "cf181ffd-71b9-4a9f-b5d3-fc2afa612ad5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "8e31a0a94dff3c6fdb3b1d95ecdc1e7a should be able to signTx ",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User1 8e31a0a94dff3c6fdb3b1d95ecdc1e7a should be able to signTx ",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"baseReq\": {\n                    \"from\": config.testAccountAddress,\n                    \"chain_id\": config.chain_id\n                },\n                \"type\": \"cosmos-sdk/StdTx\",\n                \"value\": {\n                    \"msg\": [\n                        {\n                            \"type\": \"cosmos-sdk/MsgSend\",\n                            \"value\": {\n                                \"from_address\": config.testAccountAddress,\n                                \"to_address\": names1.address,\n                                \"amount\": [\n                                    {\n                                        \"denom\": \"stake\",\n                                        \"amount\": \"1000\"\n                                    }\n                                ]\n                            }\n                        }\n                    ],\n                    \"fee\": {\n                        \"amount\": [],\n                        \"gas\": \"200000\"\n                    },\n                    \"signatures\": null,\n                    \"memo\": \"\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.signTx)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.result.success).to.be.true\n            names1.typekey = res.body.result.tx.signatures[0].pub_key.type\n            names1.value = res.body.result.tx.signatures[0].pub_key.value\n            names1.signature = res.body.result.tx.signatures[0].signature",
                  "err": {},
                  "uuid": "3241d15a-6e67-4e22-8796-78a157f43ea9",
                  "parentUUID": "cf181ffd-71b9-4a9f-b5d3-fc2afa612ad5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "8e31a0a94dff3c6fdb3b1d95ecdc1e7a should be able to broadcastTx ",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User1 8e31a0a94dff3c6fdb3b1d95ecdc1e7a should be able to broadcastTx ",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"tx\": {\n                    \"msg\": [\n                        {\n                            \"type\": \"cosmos-sdk/MsgSend\",\n                            \"value\": {\n                                \"from_address\": config.testAccountAddress,\n                                \"to_address\": names1.address,\n                                \"amount\": [\n                                    {\n                                        \"denom\": \"stake\",\n                                        \"amount\": \"1000\"\n                                    }\n                                ]\n                            }\n                        }\n                    ],\n                    \"fee\": {\n                        \"amount\": [],\n                        \"gas\": \"200000\"\n                    },\n                    \"signatures\": [\n                        {\n                            \"pub_key\": {\n                                \"type\": names1.typekey,\n                                \"value\": names1.value\n                            },\n                            \"signature\": names1.signature\n                        }\n                    ],\n                    \"memo\": \"\"\n                },\n                \"mode\": \"sync\"\n            }\n            let err, res = await chai.request(server)\n                .post(config.broadcastTx)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            let hash = res.body.txhash\n            err, res = await chai.request(server)\n                .get('/txs/' + hash)",
                  "err": {},
                  "uuid": "8a3f6542-7420-44b1-9789-8777484e1d79",
                  "parentUUID": "cf181ffd-71b9-4a9f-b5d3-fc2afa612ad5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4a460ef9-2ce9-4739-b7e8-d2081b8ba16b",
                "3241d15a-6e67-4e22-8796-78a157f43ea9",
                "8a3f6542-7420-44b1-9789-8777484e1d79"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 233,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4da94993-66bd-4f52-a9ea-89e500159b79",
              "title": "Account Creation, Sign and Broadcast for User2",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User2 \"before each\" hook",
                  "timedOut": false,
                  "duration": 3003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "cb0992c5-436d-4fca-893b-4295d8bf5adf",
                  "parentUUID": "4da94993-66bd-4f52-a9ea-89e500159b79",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should create an account for: c7bded8bbb3f7ebc5fec5df8160c153d",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User2 it should create an account for: c7bded8bbb3f7ebc5fec5df8160c153d",
                  "timedOut": false,
                  "duration": 193,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let name = {\n                name: name2\n            }\n            let err, res = await chai.request('http://localhost:1317')\n                .post(config.keysAdd)\n                .send(name)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.result.success).to.be.true\n            expect(res.body.result.keyOutput.address).to.not.equal(null)\n            expect(res.body.result.keyOutput.address).to.not.equal('')\n            names2.address = res.body.result.keyOutput.address",
                  "err": {},
                  "uuid": "c1eb81c1-cbe8-41a9-bc36-d92402214a14",
                  "parentUUID": "4da94993-66bd-4f52-a9ea-89e500159b79",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "c7bded8bbb3f7ebc5fec5df8160c153d should be able to signTx ",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User2 c7bded8bbb3f7ebc5fec5df8160c153d should be able to signTx ",
                  "timedOut": false,
                  "duration": 33,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"baseReq\": {\n                    \"from\": config.testAccountAddress,\n                    \"chain_id\": config.chain_id\n                },\n                \"type\": \"cosmos-sdk/StdTx\",\n                \"value\": {\n                    \"msg\": [\n                        {\n                            \"type\": \"cosmos-sdk/MsgSend\",\n                            \"value\": {\n                                \"from_address\": config.testAccountAddress,\n                                \"to_address\": names2.address,\n                                \"amount\": [\n                                    {\n                                        \"denom\": \"stake\",\n                                        \"amount\": \"1000\"\n                                    }\n                                ]\n                            }\n                        }\n                    ],\n                    \"fee\": {\n                        \"amount\": [],\n                        \"gas\": \"200000\"\n                    },\n                    \"signatures\": null,\n                    \"memo\": \"\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.signTx)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.result.success).to.be.true\n            names2.typekey = res.body.result.tx.signatures[0].pub_key.type\n            names2.value = res.body.result.tx.signatures[0].pub_key.value\n            names2.signature = res.body.result.tx.signatures[0].signature",
                  "err": {},
                  "uuid": "59a65610-8d0b-495e-a773-7908eb224ac4",
                  "parentUUID": "4da94993-66bd-4f52-a9ea-89e500159b79",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "c7bded8bbb3f7ebc5fec5df8160c153d should be able to broadcastTx ",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User2 c7bded8bbb3f7ebc5fec5df8160c153d should be able to broadcastTx ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"tx\": {\n                    \"msg\": [\n                        {\n                            \"type\": \"cosmos-sdk/MsgSend\",\n                            \"value\": {\n                                \"from_address\": config.testAccountAddress,\n                                \"to_address\": names2.address,\n                                \"amount\": [\n                                    {\n                                        \"denom\": \"stake\",\n                                        \"amount\": \"1000\"\n                                    }\n                                ]\n                            }\n                        }\n                    ],\n                    \"fee\": {\n                        \"amount\": [],\n                        \"gas\": \"200000\"\n                    },\n                    \"signatures\": [\n                        {\n                            \"pub_key\": {\n                                \"type\": names2.typekey,\n                                \"value\": names2.value\n                            },\n                            \"signature\": names2.signature\n                        }\n                    ],\n                    \"memo\": \"\"\n                },\n                \"mode\": \"sync\"\n            }\n            let err, res = await chai.request(server)\n                .post(config.broadcastTx)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')",
                  "err": {},
                  "uuid": "0e6319c1-71d8-41ac-b058-f5886cf838d4",
                  "parentUUID": "4da94993-66bd-4f52-a9ea-89e500159b79",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c1eb81c1-cbe8-41a9-bc36-d92402214a14",
                "59a65610-8d0b-495e-a773-7908eb224ac4",
                "0e6319c1-71d8-41ac-b058-f5886cf838d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 236,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3401df07-eb97-4045-8ddb-8c7cc7e66499",
          "title": "Identity",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
          "file": "/test/tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8cbe5088-77bd-486c-94d9-6fc3b5150f4f",
              "title": "Nub Tx",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Nub Tx \"before each\" hook",
                  "timedOut": false,
                  "duration": 5005,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(6000)\nsetTimeout(function () {\n    done()\n}, 5000)",
                  "err": {},
                  "uuid": "de0c1a02-aa91-40b6-a328-ae296f2e012f",
                  "parentUUID": "8cbe5088-77bd-486c-94d9-6fc3b5150f4f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "nubTx: ",
                  "fullTitle": "Identity Nub Tx nubTx: ",
                  "timedOut": false,
                  "duration": 1429,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.nubType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"nubID\": config.nubID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.nubPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('EntityAlreadyExists')",
                  "err": {},
                  "uuid": "48352c24-0bb0-44ee-8436-54c90a1ace52",
                  "parentUUID": "8cbe5088-77bd-486c-94d9-6fc3b5150f4f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "48352c24-0bb0-44ee-8436-54c90a1ace52"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1429,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0062ae7a-08f1-471c-89bb-d490e2ece576",
              "title": "Issue Identity 1",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Issue Identity 1 \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "0fe5d0e1-a26c-4f5b-aa4c-bb6fb94a6295",
                  "parentUUID": "0062ae7a-08f1-471c-89bb-d490e2ece576",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Identity: ",
                  "fullTitle": "Identity Issue Identity 1 Define Identity: ",
                  "timedOut": false,
                  "duration": 1055,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let obj = {\n                \"type\": config.defineIdentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"mutableTraits1:S|num1\",\n                    \"immutableTraits\": \"immutableTraits1:S|\",\n                    \"mutableMetaTraits\": \"mutableMetaTraits1:S|num3\",\n                    \"immutableMetaTraits\": \"immutableMetaTraits1:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "622d6521-9c5d-47d8-90bf-59504e5145a0",
                  "parentUUID": "0062ae7a-08f1-471c-89bb-d490e2ece576",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Issue Identity: ",
                  "fullTitle": "Identity Issue Identity 1 Issue Identity: ",
                  "timedOut": false,
                  "duration": 1059,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let clsID = await cls.queryClassification(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.issuedentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": config.testAccountAddress,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"mutableTraits1:S|num1\",\n                    \"immutableProperties\": \"immutableTraits1:S|\",\n                    \"mutableMetaProperties\": \"mutableMetaTraits1:S|num3\",\n                    \"immutableMetaProperties\": \"immutableMetaTraits1:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.issueIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "b1ead5cf-210c-43d8-85b8-244657c03b2a",
                  "parentUUID": "0062ae7a-08f1-471c-89bb-d490e2ece576",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "622d6521-9c5d-47d8-90bf-59504e5145a0",
                "b1ead5cf-210c-43d8-85b8-244657c03b2a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2114,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "400c77e1-b52c-40dd-b145-4512b4b671ad",
              "title": "Provision Key",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Provision Key \"before each\" hook",
                  "timedOut": false,
                  "duration": 4002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "00ec8a04-5297-4d8c-9d87-e38a72791ccb",
                  "parentUUID": "400c77e1-b52c-40dd-b145-4512b4b671ad",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Provision Key: ",
                  "fullTitle": "Identity Provision Key Provision Key: ",
                  "timedOut": false,
                  "duration": 1067,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let obj = {\n                \"type\": config.provisionKeyType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": randomWallet.address,\n                    \"identityID\": identityID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.provisionKeyPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "a12e4ae3-8d87-41c7-9101-33f98935a8e0",
                  "parentUUID": "400c77e1-b52c-40dd-b145-4512b4b671ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a12e4ae3-8d87-41c7-9101-33f98935a8e0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1067,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3a912cc7-e2cf-4deb-b55e-9e720cc25078",
              "title": "Unprovision Key",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Unprovision Key \"before each\" hook",
                  "timedOut": false,
                  "duration": 4002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "2355ca81-a2f7-4a49-9d98-116454977e83",
                  "parentUUID": "3a912cc7-e2cf-4deb-b55e-9e720cc25078",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Unprovision Key: ",
                  "fullTitle": "Identity Unprovision Key Unprovision Key: ",
                  "timedOut": false,
                  "duration": 1074,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let obj = {\n                \"type\": config.unprovisionKeyType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": randomWallet.address,\n                    \"identityID\": identityID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.unprovisionKeyPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "99a5501b-2f7a-49a8-9aab-7fda5e527a15",
                  "parentUUID": "3a912cc7-e2cf-4deb-b55e-9e720cc25078",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "99a5501b-2f7a-49a8-9aab-7fda5e527a15"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1074,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "be878d6a-c3f7-4b4b-bb71-9ec840301648",
              "title": "Provision an unprovision Key",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Provision an unprovision Key \"before each\" hook",
                  "timedOut": false,
                  "duration": 4003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "6be704f8-9ae1-4122-88e5-73a54ddedf85",
                  "parentUUID": "be878d6a-c3f7-4b4b-bb71-9ec840301648",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Provision an unprovision Key: ",
                  "fullTitle": "Identity Provision an unprovision Key Provision an unprovision Key: ",
                  "timedOut": false,
                  "duration": 1054,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let obj = {\n                \"type\": config.provisionKeyType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": randomWallet.address,\n                    \"identityID\": identityID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.provisionKeyPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('DeletionNotAllowed')",
                  "err": {},
                  "uuid": "11e94fc7-5eb4-474a-bca9-7b6560bcc8c9",
                  "parentUUID": "be878d6a-c3f7-4b4b-bb71-9ec840301648",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "11e94fc7-5eb4-474a-bca9-7b6560bcc8c9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1054,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3148d9eb-b39c-4798-a89b-ecc47fa802a2",
              "title": "Issue Identity 2",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Issue Identity 2 \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "e5b81eed-a518-4e9e-a32e-d758d0506e27",
                  "parentUUID": "3148d9eb-b39c-4798-a89b-ecc47fa802a2",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Identity: ",
                  "fullTitle": "Identity Issue Identity 2 Define Identity: ",
                  "timedOut": false,
                  "duration": 1059,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let obj = {\n                \"type\": config.defineIdentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"mutableTraits2:S|num1\",\n                    \"immutableTraits\": \"immutableTraits2:S|\",\n                    \"mutableMetaTraits\": \"mutableMetaTraits2:S|num3\",\n                    \"immutableMetaTraits\": \"immutableMetaTraits2:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "513d4692-3489-4018-a556-10e38bbed5f4",
                  "parentUUID": "3148d9eb-b39c-4798-a89b-ecc47fa802a2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Issue Identity 2: ",
                  "fullTitle": "Identity Issue Identity 2 Issue Identity 2: ",
                  "timedOut": false,
                  "duration": 1065,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let clsID = await cls.queryClassification(\"immutableMetaTraits2\")\n            let obj = {\n                \"type\": config.issuedentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": config.testAccountAddress,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"mutableTraits2:S|num1\",\n                    \"immutableProperties\": \"immutableTraits2:S|\",\n                    \"mutableMetaProperties\": \"mutableMetaTraits2:S|num3\",\n                    \"immutableMetaProperties\": \"immutableMetaTraits2:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.issueIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "cfb2faed-5200-410b-9461-c29d2b6453b1",
                  "parentUUID": "3148d9eb-b39c-4798-a89b-ecc47fa802a2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "513d4692-3489-4018-a556-10e38bbed5f4",
                "cfb2faed-5200-410b-9461-c29d2b6453b1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2124,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d216359c-c793-4334-b054-3d9e72e50134",
              "title": "Issue Identity 3",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Issue Identity 3 \"before each\" hook",
                  "timedOut": false,
                  "duration": 4002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "54f43d4c-bebd-418a-a648-af46082abf04",
                  "parentUUID": "d216359c-c793-4334-b054-3d9e72e50134",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Identity: ",
                  "fullTitle": "Identity Issue Identity 3 Define Identity: ",
                  "timedOut": false,
                  "duration": 1065,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let obj = {\n                \"type\": config.defineIdentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"mutableTraits3:S|num1\",\n                    \"immutableTraits\": \"immutableTraits3:S|\",\n                    \"mutableMetaTraits\": \"mutableMetaTraits3:S|num3\",\n                    \"immutableMetaTraits\": \"immutableMetaTraits3:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "fad806b6-bb41-4120-9e3b-2ce081ae4d25",
                  "parentUUID": "d216359c-c793-4334-b054-3d9e72e50134",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Issue Identity 3: ",
                  "fullTitle": "Identity Issue Identity 3 Issue Identity 3: ",
                  "timedOut": false,
                  "duration": 1056,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let clsID = await cls.queryClassification(\"immutableMetaTraits3\")\n            let obj = {\n                \"type\": config.issuedentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": config.testAccountAddress,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"mutableTraits3:S|num1\",\n                    \"immutableProperties\": \"immutableTraits3:S|\",\n                    \"mutableMetaProperties\": \"mutableMetaTraits3:S|num3\",\n                    \"immutableMetaProperties\": \"immutableMetaTraits3:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.issueIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "6421cfd1-4693-4cca-b0bf-7a1bac82f140",
                  "parentUUID": "d216359c-c793-4334-b054-3d9e72e50134",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fad806b6-bb41-4120-9e3b-2ce081ae4d25",
                "6421cfd1-4693-4cca-b0bf-7a1bac82f140"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2121,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "11cb56f6-0175-4e47-8175-195a06afaad2",
          "title": "Assets",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
          "file": "/test/tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "99afabbc-e91c-4967-8c2a-f260b991d4c5",
              "title": "Mint Asset",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "0987ac00-d05d-4739-86b9-e99148f608e5",
                  "parentUUID": "99afabbc-e91c-4967-8c2a-f260b991d4c5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset Define Asset: ",
                  "timedOut": false,
                  "duration": 1029,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"ASSET1:S|\" + \",burn:H|1\",\n                    \"immutableTraits\": \"ASSET2:S|\",\n                    \"mutableMetaTraits\": \"ASSET3:S|\",\n                    \"immutableMetaTraits\": \"ASSET4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "aca367d6-0d9e-4a2c-adc0-51875115725a",
                  "parentUUID": "99afabbc-e91c-4967-8c2a-f260b991d4c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset Mint Asset: ",
                  "timedOut": false,
                  "duration": 1092,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSET4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSET1:S|num1\" + \",burn:H|1\",\n                    \"immutableProperties\": \"ASSET2:S|num2\",\n                    \"mutableMetaProperties\": \"ASSET3:S|num3\",\n                    \"immutableMetaProperties\": \"ASSET4:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "60a917e8-9eea-48c8-bcb9-c9d5a831d103",
                  "parentUUID": "99afabbc-e91c-4967-8c2a-f260b991d4c5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aca367d6-0d9e-4a2c-adc0-51875115725a",
                "60a917e8-9eea-48c8-bcb9-c9d5a831d103"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2121,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "97658f78-621b-4200-88c4-5385b83ae24a",
              "title": "Mutate Asset",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mutate Asset \"before each\" hook",
                  "timedOut": false,
                  "duration": 4005,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "c58289be-76b2-4194-b382-e2ced65a3019",
                  "parentUUID": "97658f78-621b-4200-88c4-5385b83ae24a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Mutate Asset: ",
                  "fullTitle": "Assets Mutate Asset Mutate Asset: ",
                  "timedOut": false,
                  "duration": 1054,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let assetID = await assets.queryAsset(\"ASSET4\")\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID,\n                    \"mutableProperties\": \"ASSET1:S|\",\n                    \"mutableMetaProperties\": \"ASSET3:S|num3\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "bf9aa90c-e4fa-4194-ba1d-152d1f343642",
                  "parentUUID": "97658f78-621b-4200-88c4-5385b83ae24a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bf9aa90c-e4fa-4194-ba1d-152d1f343642"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1054,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "62be347b-b8ef-4d96-95d5-8903d0159997",
              "title": "Mint Asset with meta properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with meta properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 4002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "f1b12a41-a882-4fe6-bb10-293993267292",
                  "parentUUID": "62be347b-b8ef-4d96-95d5-8903d0159997",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Mint Asset with meta properties: ",
                  "fullTitle": "Assets Mint Asset with meta properties Mint Asset with meta properties: ",
                  "timedOut": false,
                  "duration": 1084,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSET4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSET1:S|num5\" + \",burn:H|1\",\n                    \"immutableProperties\": \"ASSET2:S|num6\",\n                    \"mutableMetaProperties\": \"ASSET3:S|num7\",\n                    \"immutableMetaProperties\": \"ASSET4:S|num8\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "b3263d56-f95e-4767-8a5f-4f0b316c1e3e",
                  "parentUUID": "62be347b-b8ef-4d96-95d5-8903d0159997",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b3263d56-f95e-4767-8a5f-4f0b316c1e3e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1084,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cf57a49f-d7d9-48a7-8c57-661df08b0307",
              "title": "Mutate asset non meta properties to meta properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mutate asset non meta properties to meta properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 4002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "62ca71a8-d7c1-4072-878a-7cf700677a29",
                  "parentUUID": "cf57a49f-d7d9-48a7-8c57-661df08b0307",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mutate asset non meta properties to meta properties Define Asset: ",
                  "timedOut": false,
                  "duration": 1021,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"ASSETS1:S|\" + \",burn:H|1\",\n                    \"immutableTraits\": \"ASSETS2:S|\",\n                    \"mutableMetaTraits\": \"ASSETS3:S|\",\n                    \"immutableMetaTraits\": \"ASSETS4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "888536f7-000c-4e2e-aa6e-9516064ac14c",
                  "parentUUID": "cf57a49f-d7d9-48a7-8c57-661df08b0307",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mutate asset non meta properties to meta properties Mint Asset: ",
                  "timedOut": false,
                  "duration": 1059,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSETS4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSETS1:S|num5\" + \",burn:H|1\",\n                    \"immutableProperties\": \"ASSETS2:S|num6\",\n                    \"mutableMetaProperties\": \"ASSETS3:S|num7\",\n                    \"immutableMetaProperties\": \"ASSETS4:S|num8\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "3b0f448c-e4e0-4613-9c38-87471e157be6",
                  "parentUUID": "cf57a49f-d7d9-48a7-8c57-661df08b0307",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Mutate asset non meta properties to meta properties Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1056,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"S|num5\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj);\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "3dc4918e-d932-49a0-8a76-f74202593e0a",
                  "parentUUID": "cf57a49f-d7d9-48a7-8c57-661df08b0307",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset non meta properties to meta properties: ",
                  "fullTitle": "Assets Mutate asset non meta properties to meta properties Mutate Asset non meta properties to meta properties: ",
                  "timedOut": false,
                  "duration": 1065,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let assetID = await assets.queryAsset(\"ASSETS4\")\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID,\n                    \"mutableProperties\": \"ASSETS1:S|\",\n                    \"mutableMetaProperties\": \"ASSETS3:S|num5\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "52a5f1ac-bbfa-4ba9-afb0-ed1cb72daa6e",
                  "parentUUID": "cf57a49f-d7d9-48a7-8c57-661df08b0307",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "888536f7-000c-4e2e-aa6e-9516064ac14c",
                "3b0f448c-e4e0-4613-9c38-87471e157be6",
                "3dc4918e-d932-49a0-8a76-f74202593e0a",
                "52a5f1ac-bbfa-4ba9-afb0-ed1cb72daa6e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4201,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "945da7a5-2301-40d1-a778-0c64222fac5e",
              "title": "Mint Asset with 22 properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with 22 properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "0488b5bb-08b5-4373-92e2-eca1be7e5417",
                  "parentUUID": "945da7a5-2301-40d1-a778-0c64222fac5e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Define Asset: ",
                  "timedOut": false,
                  "duration": 1052,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"ASSETP1:S|A,ASSETP11:S|B,ASSETP12:S|C,ASSETP13:S|D,ASSETP14:S|E,burn:H|2\",\n                    \"immutableTraits\": \"ASSETP2:S|G,ASSETP21:S|H,ASSETP22:S|I,ASSETP23:S|J,ASSETP24:S|K\",\n                    \"mutableMetaTraits\": \"ASSETP3:S|L,ASSETP31:S|M,ASSETP32:S|N,ASSETP33:S|O,ASSETP34:S|P\",\n                    \"immutableMetaTraits\": \"ASSETP4:S|Q,ASSETP41:S|R,ASSETP42:S|S,ASSETP43:S|T,ASSETP44:S|U,ASSETP45:S|V\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "7bab9de5-5ce9-4d78-8ed2-6599c4b8288e",
                  "parentUUID": "945da7a5-2301-40d1-a778-0c64222fac5e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Mint Asset: ",
                  "timedOut": false,
                  "duration": 1065,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSETP4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSETP1:S|A,ASSETP11:S|B,ASSETP12:S|C,ASSETP13:S|D,ASSETP14:S|E,burn:H|1\",\n                    \"immutableProperties\": \"ASSETP2:S|G,ASSETP21:S|H,ASSETP22:S|I,ASSETP23:S|J,ASSETP24:S|K\",\n                    \"mutableMetaProperties\": \"ASSETP3:S|L,ASSETP31:S|M,ASSETP32:S|N,ASSETP33:S|O,ASSETP34:S|P\",\n                    \"immutableMetaProperties\": \"ASSETP4:S|Q,ASSETP41:S|R,ASSETP42:S|S,ASSETP43:S|T,ASSETP44:S|U,ASSETP45:S|V\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "cb60c138-6bb2-41ec-8afc-8318a41b52e1",
                  "parentUUID": "945da7a5-2301-40d1-a778-0c64222fac5e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7bab9de5-5ce9-4d78-8ed2-6599c4b8288e",
                "cb60c138-6bb2-41ec-8afc-8318a41b52e1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2117,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fac60ad2-0c94-4485-8424-296e982e10fe",
              "title": "Add asset properties on mutation",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Add asset properties on mutation \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "05c90a0b-1d44-43e0-88c1-edabf0116e17",
                  "parentUUID": "fac60ad2-0c94-4485-8424-296e982e10fe",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Add asset properties on mutation Define Asset: ",
                  "timedOut": false,
                  "duration": 1046,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"ASSET_A5:S|, burn:H|1\",\n                    \"immutableTraits\": \"ASSET_A6:S|\",\n                    \"mutableMetaTraits\": \"ASSET_A7:S|\",\n                    \"immutableMetaTraits\": \"ASSET_A8:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "14eaa4e4-00d9-4425-bc16-b853c6fb4b7d",
                  "parentUUID": "fac60ad2-0c94-4485-8424-296e982e10fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Add asset properties on mutation Mint Asset: ",
                  "timedOut": false,
                  "duration": 1050,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSET_A8\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSET_A5:S|A, burn:H|1\",\n                    \"immutableProperties\": \"ASSET_A6:S|B\",\n                    \"mutableMetaProperties\": \"ASSET_A7:S|C\",\n                    \"immutableMetaProperties\": \"ASSET_A8:S|D\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "af193b0b-a290-436d-b309-b54472b0d787",
                  "parentUUID": "fac60ad2-0c94-4485-8424-296e982e10fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Add asset properties on mutation: ",
                  "fullTitle": "Assets Add asset properties on mutation Add asset properties on mutation: ",
                  "timedOut": false,
                  "duration": 1074,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let assetID = await assets.queryAsset(\"ASSET_A8\")\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID,\n                    \"mutableProperties\": \"ASSET_A5:S|AA\",\n                    \"mutableMetaProperties\": \"ASSET_A7:S|CC\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "a58bb67f-7407-4eca-8862-741785e6b515",
                  "parentUUID": "fac60ad2-0c94-4485-8424-296e982e10fe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "14eaa4e4-00d9-4425-bc16-b853c6fb4b7d",
                "af193b0b-a290-436d-b309-b54472b0d787",
                "a58bb67f-7407-4eca-8862-741785e6b515"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3170,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f98fdf73-dc86-44e0-bf7f-1e6135c5b50e",
              "title": "Mint Asset with more than 22 properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with more than 22 properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "2a90c295-ad39-4a06-8c2a-052d8f48e8b3",
                  "parentUUID": "f98fdf73-dc86-44e0-bf7f-1e6135c5b50e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with more than 22 properties Define Asset: ",
                  "timedOut": false,
                  "duration": 1041,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"P1:S|A,P11:S|B,P12:S|C,P13:S|D,P14:S|E,P14:S|F,burn:H|1\",\n                    \"immutableTraits\": \"P2:S|G,P21:S|H,P22:S|I,P23:S|J,P24:S|K\",\n                    \"mutableMetaTraits\": \"P3:S|L,P31:S|M,P32:S|N,P33:S|O,P34:S|P\",\n                    \"immutableMetaTraits\": \"P4:S|Q,P41:S|R,P42:S|S,P43:S|T,P44:S|U,P45:S|V\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('InvalidRequest')\n            expect(res.body.raw_log).to.contain('failed')",
                  "err": {},
                  "uuid": "31a63aa6-d62d-431b-a155-dd09d9befe9c",
                  "parentUUID": "f98fdf73-dc86-44e0-bf7f-1e6135c5b50e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "31a63aa6-d62d-431b-a155-dd09d9befe9c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1041,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "913457ee-fc37-46c4-a4b4-566c5fb27eb3",
              "title": "Mint Asset with burn greater than forseeable block height",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height \"before each\" hook",
                  "timedOut": false,
                  "duration": 4002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "4fc7c03a-2233-4795-91e2-4674a14b5142",
                  "parentUUID": "913457ee-fc37-46c4-a4b4-566c5fb27eb3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Define Asset: ",
                  "timedOut": false,
                  "duration": 1060,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"AssetA:S|num1\" + \",burn:H|1\",\n                    \"immutableTraits\": \"AssetB:S|\",\n                    \"mutableMetaTraits\": \"AssetC:S|num3\",\n                    \"immutableMetaTraits\": \"AssetD:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "a16fe355-8c1e-4451-a65a-3a9f3dd16df1",
                  "parentUUID": "913457ee-fc37-46c4-a4b4-566c5fb27eb3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Mint Asset: ",
                  "timedOut": false,
                  "duration": 1064,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"AssetD\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"AssetA:S|num1\" + \",burn:H|100000000\",\n                    \"immutableProperties\": \"AssetB:S|num2\",\n                    \"mutableMetaProperties\": \"AssetC:S|num3\",\n                    \"immutableMetaProperties\": \"AssetD:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "eedea8bc-743f-4e67-94b1-7932fec373d5",
                  "parentUUID": "913457ee-fc37-46c4-a4b4-566c5fb27eb3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1058,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"H|100000000\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "9b4d398f-20d9-464f-853a-97ff32c848df",
                  "parentUUID": "913457ee-fc37-46c4-a4b4-566c5fb27eb3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Burn Asset",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Burn Asset",
                  "timedOut": false,
                  "duration": 1063,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let assetID = await assets.queryAsset(\"AssetD\")\n            let obj = {\n                \"type\": config.burnAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.burnAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('failed')",
                  "err": {},
                  "uuid": "d1513a31-9378-4331-a63d-019a7150cff9",
                  "parentUUID": "913457ee-fc37-46c4-a4b4-566c5fb27eb3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1066,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"H|100\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "108b696b-da68-4779-9f94-4fe09aea1222",
                  "parentUUID": "913457ee-fc37-46c4-a4b4-566c5fb27eb3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Mutate Asset: ",
                  "timedOut": false,
                  "duration": 1053,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let assetID = await assets.queryAsset(\"AssetD\")\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID,\n                    \"mutableProperties\": \"AssetA:S|ABCd,burn:H|100\",\n                    \"mutableMetaProperties\": \"AssetC:S|num3\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "424e959b-a1e5-4937-bbf1-7205bad34fea",
                  "parentUUID": "913457ee-fc37-46c4-a4b4-566c5fb27eb3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Burn Asset",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Burn Asset",
                  "timedOut": false,
                  "duration": 1055,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let assetID = await assets.queryAsset(\"AssetD\")\n            let obj = {\n                \"type\": config.burnAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.burnAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('failed')",
                  "err": {},
                  "uuid": "001e55df-97fc-4c30-b8bc-7b548293c765",
                  "parentUUID": "913457ee-fc37-46c4-a4b4-566c5fb27eb3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a16fe355-8c1e-4451-a65a-3a9f3dd16df1",
                "eedea8bc-743f-4e67-94b1-7932fec373d5",
                "9b4d398f-20d9-464f-853a-97ff32c848df",
                "d1513a31-9378-4331-a63d-019a7150cff9",
                "108b696b-da68-4779-9f94-4fe09aea1222",
                "424e959b-a1e5-4937-bbf1-7205bad34fea",
                "001e55df-97fc-4c30-b8bc-7b548293c765"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7419,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9b6824c5-e858-4f5f-a8d1-6e36b0659a5a",
              "title": "Send splits of an asset and then Mutate ",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Send splits of an asset and then Mutate  \"before each\" hook",
                  "timedOut": false,
                  "duration": 4003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "2f362bf1-e3b3-4b22-8158-2d3f948c7388",
                  "parentUUID": "9b6824c5-e858-4f5f-a8d1-6e36b0659a5a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Send splits of an asset and then Mutate  Define Asset: ",
                  "timedOut": false,
                  "duration": 1056,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"One:S|\" + \",burn:H|1\",\n                    \"immutableTraits\": \"Two:S|\",\n                    \"mutableMetaTraits\": \"Three:S|\",\n                    \"immutableMetaTraits\": \"Four:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "5c574d31-d0fe-45b5-a969-c5cd9817e1e6",
                  "parentUUID": "9b6824c5-e858-4f5f-a8d1-6e36b0659a5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Send splits of an asset and then Mutate  Mint Asset: ",
                  "timedOut": false,
                  "duration": 1053,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"Four\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"One:S|One\" + \",burn:H|1\",\n                    \"immutableProperties\": \"Two:S|Two\",\n                    \"mutableMetaProperties\": \"Three:S|Three\",\n                    \"immutableMetaProperties\": \"Four:S|Four\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "b8a0cc65-deec-4b65-bc1e-42f3c679dd81",
                  "parentUUID": "9b6824c5-e858-4f5f-a8d1-6e36b0659a5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Send Asset: ",
                  "fullTitle": "Assets Send splits of an asset and then Mutate  Send Asset: ",
                  "timedOut": false,
                  "duration": 1050,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let identityID1 = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let assetID = await assets.queryAsset(\"Four\")\n            let obj = {\n                \"type\": config.sendSplitType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"toID\": identityID1,\n                    \"ownableID\": assetID,\n                    \"split\":\"0.000000000000000001\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.sendSplitPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "505c38fd-4082-4f6f-b383-4bf217ede683",
                  "parentUUID": "9b6824c5-e858-4f5f-a8d1-6e36b0659a5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset: ",
                  "fullTitle": "Assets Send splits of an asset and then Mutate  Mutate Asset: ",
                  "timedOut": false,
                  "duration": 1066,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let assetID = await assets.queryAsset(\"Four\")\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID,\n                    \"mutableProperties\": \"One:S|One\" + \",burn:H|1\",\n                    \"mutableMetaProperties\": \"Three:S|Three\",\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('failed')",
                  "err": {},
                  "uuid": "31217cca-e303-4740-85b1-97a5c239db73",
                  "parentUUID": "9b6824c5-e858-4f5f-a8d1-6e36b0659a5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Make toID as maintainer: ",
                  "fullTitle": "Assets Send splits of an asset and then Mutate  Make toID as maintainer: ",
                  "timedOut": false,
                  "duration": 1048,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let identityID1 = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let clsID = await cls.queryClassification(\"Four\")\n            let obj = {\n                \"type\": config.deputizeType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID1,\n                    \"classificationID\": clsID,\n                    \"fromID\": identityID,\n                    \"maintainedTraits\": \"One:S|One,Three:S|Three,burn:H|1\",\n                    \"addMaintainer\": true,\n                    \"removeMaintainer\": true,\n                    \"mutateMaintainer\": true\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.deputizePath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "7f0a64a9-b1eb-48a4-89a7-90f86bc5e9c3",
                  "parentUUID": "9b6824c5-e858-4f5f-a8d1-6e36b0659a5a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset: ",
                  "fullTitle": "Assets Send splits of an asset and then Mutate  Mutate Asset: ",
                  "timedOut": false,
                  "duration": 1056,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let assetID = await assets.queryAsset(\"Four\")\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID,\n                    \"mutableProperties\": \"One:S|One\" + \",burn:H|1\",\n                    \"mutableMetaProperties\": \"Three:S|Three\",\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')",
                  "err": {},
                  "uuid": "9e33e820-d864-42f1-b505-d86c4d4c5c25",
                  "parentUUID": "9b6824c5-e858-4f5f-a8d1-6e36b0659a5a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5c574d31-d0fe-45b5-a969-c5cd9817e1e6",
                "b8a0cc65-deec-4b65-bc1e-42f3c679dd81",
                "505c38fd-4082-4f6f-b383-4bf217ede683",
                "31217cca-e303-4740-85b1-97a5c239db73",
                "7f0a64a9-b1eb-48a4-89a7-90f86bc5e9c3",
                "9e33e820-d864-42f1-b505-d86c4d4c5c25"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6329,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "85a666a2-5fae-4c54-9e11-fd9d86e124ce",
              "title": "Mint Asset with extra properties when mutable trait is not defined",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "b25eae8c-8ee5-4074-8949-fc53ff26939a",
                  "parentUUID": "85a666a2-5fae-4c54-9e11-fd9d86e124ce",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Define Asset: ",
                  "timedOut": false,
                  "duration": 1052,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"ASSETA1:S|,burn:H|1\",\n                    \"immutableTraits\": \"ASSETA2:S|G\",\n                    \"mutableMetaTraits\": \"ASSETA3:S|L\",\n                    \"immutableMetaTraits\": \"ASSETA4:S|Q\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "bf3d17b1-cf56-4126-a411-a983694126fe",
                  "parentUUID": "85a666a2-5fae-4c54-9e11-fd9d86e124ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Mint Asset: ",
                  "timedOut": false,
                  "duration": 1065,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSETA4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSETA1:S|A,burn:H|1,ASSETA11:S|B,ASSETA111:S|C\",\n                    \"immutableProperties\": \"ASSETA2:S|G\",\n                    \"mutableMetaProperties\": \"ASSETA3:S|L\",\n                    \"immutableMetaProperties\": \"ASSETA4:S|Q\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('failed')\n            expect(res.body.raw_log).to.contain('NotAuthorized')",
                  "err": {},
                  "uuid": "017c657b-357d-40aa-acb0-cad3b582a264",
                  "parentUUID": "85a666a2-5fae-4c54-9e11-fd9d86e124ce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bf3d17b1-cf56-4126-a411-a983694126fe",
                "017c657b-357d-40aa-acb0-cad3b582a264"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2117,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "24db79d5-50e4-4feb-9a6f-ad8d1caedea1",
              "title": "Burn Asset",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Burn Asset \"before each\" hook",
                  "timedOut": false,
                  "duration": 4008,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "9b3092d5-5b10-415e-8d12-42a3c3b0c66c",
                  "parentUUID": "24db79d5-50e4-4feb-9a6f-ad8d1caedea1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Burn Asset Define Asset: ",
                  "timedOut": false,
                  "duration": 1056,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"Five:S|\" + \",burn:H|1\",\n                    \"immutableTraits\": \"Six:S|\",\n                    \"mutableMetaTraits\": \"Seven:S|\",\n                    \"immutableMetaTraits\": \"Eight:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "4fec7d1f-e204-4fde-80f3-f4fe2148501d",
                  "parentUUID": "24db79d5-50e4-4feb-9a6f-ad8d1caedea1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Burn Asset Mint Asset: ",
                  "timedOut": false,
                  "duration": 1047,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"Eight\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"Five:S|One\" + \",burn:H|1\",\n                    \"immutableProperties\": \"Six:S|Two\",\n                    \"mutableMetaProperties\": \"Seven:S|Three\",\n                    \"immutableMetaProperties\": \"Eight:S|Four\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "583e32e3-d151-4efb-a704-f7dd87576b77",
                  "parentUUID": "24db79d5-50e4-4feb-9a6f-ad8d1caedea1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Burn Asset Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1060,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"H|1\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "76cf2455-7c8c-4498-94c3-d082088851a6",
                  "parentUUID": "24db79d5-50e4-4feb-9a6f-ad8d1caedea1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Burn Asset",
                  "fullTitle": "Assets Burn Asset Burn Asset",
                  "timedOut": false,
                  "duration": 1060,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let assetID = await assets.queryAsset(\"Eight\")\n            let obj = {\n                \"type\": config.burnAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.burnAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "6afb56e9-e3ed-4a02-b9dc-fe721025e61f",
                  "parentUUID": "24db79d5-50e4-4feb-9a6f-ad8d1caedea1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4fec7d1f-e204-4fde-80f3-f4fe2148501d",
                "583e32e3-d151-4efb-a704-f7dd87576b77",
                "76cf2455-7c8c-4498-94c3-d082088851a6",
                "6afb56e9-e3ed-4a02-b9dc-fe721025e61f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4223,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d4e37aa7-22d4-49d9-a41a-11300168ce1f",
          "title": "Splits",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
          "file": "/test/tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "53d2c753-7194-4a07-a202-eea147c8b230",
              "title": "send split of an asset",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Splits send split of an asset \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "d97de3ca-1894-401c-909f-02b17299e759",
                  "parentUUID": "53d2c753-7194-4a07-a202-eea147c8b230",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Splits send split of an asset Define Asset: ",
                  "timedOut": false,
                  "duration": 1043,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"AssetDef1:S|Hello\" + \",burn:H|10\",\n                    \"immutableTraits\": \"AssetBDef2:S|\",\n                    \"mutableMetaTraits\": \"AssetCDef3:S|\",\n                    \"immutableMetaTraits\": \"AssetDDef4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "d3a77463-3ed2-49b8-833b-b242ae97b681",
                  "parentUUID": "53d2c753-7194-4a07-a202-eea147c8b230",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Splits send split of an asset Mint Asset: ",
                  "timedOut": false,
                  "duration": 1058,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"AssetDDef4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"AssetDef1:S|Hello\" + \",burn:H|10\",\n                    \"immutableProperties\": \"AssetBDef2:S|\",\n                    \"mutableMetaProperties\": \"AssetCDef3:S|\",\n                    \"immutableMetaProperties\": \"AssetDDef4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "5b6324fa-00af-49a0-949a-8e09fd7d6e54",
                  "parentUUID": "53d2c753-7194-4a07-a202-eea147c8b230",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Send split of an asset: ",
                  "fullTitle": "Splits send split of an asset Send split of an asset: ",
                  "timedOut": false,
                  "duration": 1048,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let identityID1 = await identity.queryIdentity(\"immutableMetaTraits3\")\n            let assetID = await assets.queryAsset(\"AssetDDef4\")\n            let obj = {\n                \"type\": config.sendSplitType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"toID\": identityID1,\n                    \"ownableID\": assetID,\n                    \"split\": config.splitval\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.sendSplitPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "312eeab3-b8e4-4dbc-944a-46989663acd2",
                  "parentUUID": "53d2c753-7194-4a07-a202-eea147c8b230",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d3a77463-3ed2-49b8-833b-b242ae97b681",
                "5b6324fa-00af-49a0-949a-8e09fd7d6e54",
                "312eeab3-b8e4-4dbc-944a-46989663acd2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3149,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "522544ee-12ad-49cd-b001-8d9db0cdd0ed",
              "title": "Wrap a coin",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Splits Wrap a coin \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "ef475c59-d7b3-4e08-8ef3-9f7d60cf60cc",
                  "parentUUID": "522544ee-12ad-49cd-b001-8d9db0cdd0ed",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Wrap a coin: ",
                  "fullTitle": "Splits Wrap a coin Wrap a coin: ",
                  "timedOut": false,
                  "duration": 1062,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\nlet obj = {\n    \"type\": config.wrapCoinType,\n    \"value\": {\n        \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n        },\n        \"fromID\": identityID,\n        \"coins\": config.coins\n    }\n}\nlet err, res = await chai.request(server)\n    .post(config.wrapCoinPath)\n    .send(obj)\nres.should.have.status(200);\nres.body.should.be.a('object');\nexpect(res.body.txhash).to.not.equal(null)\nexpect(res.body.txhash).to.not.equal('')\nexpect(res.body.raw_log).to.not.contain('failed')\nexpect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "fe5caeb4-5da8-4b4c-86f2-7affabfeee30",
                  "parentUUID": "522544ee-12ad-49cd-b001-8d9db0cdd0ed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe5caeb4-5da8-4b4c-86f2-7affabfeee30"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1062,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b5f4484c-dbd7-40b1-b670-111ada337477",
              "title": "Unwrap a coin",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Splits Unwrap a coin \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "2bee548a-bad7-4381-9e5e-11e17487ac1f",
                  "parentUUID": "b5f4484c-dbd7-40b1-b670-111ada337477",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Unwrap a coin: ",
                  "fullTitle": "Splits Unwrap a coin Unwrap a coin: ",
                  "timedOut": false,
                  "duration": 1069,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.unwrapCoinType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"ownableID\": \"stake\",\n                    \"split\": \"100\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.unwrapCoinPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "be816fa4-8f62-4eca-87b4-978ee6fe274a",
                  "parentUUID": "b5f4484c-dbd7-40b1-b670-111ada337477",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "be816fa4-8f62-4eca-87b4-978ee6fe274a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1069,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8c1c263d-3367-49a9-aa0d-cf7943388d5e",
              "title": "send split of an coin",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Splits send split of an coin \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "29bacca6-02e0-4a98-a5ba-0099bb1e8f80",
                  "parentUUID": "8c1c263d-3367-49a9-aa0d-cf7943388d5e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Send split of an coin: ",
                  "fullTitle": "Splits send split of an coin Send split of an coin: ",
                  "timedOut": false,
                  "duration": 1049,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let identityID1 = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let obj = {\n                \"type\": config.sendSplitType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"toID\": identityID1,\n                    \"ownableID\": \"stake\",\n                    \"split\": config.splitval\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.sendSplitPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "2daa2d66-0f8a-4d7b-b3fc-457be080f88f",
                  "parentUUID": "8c1c263d-3367-49a9-aa0d-cf7943388d5e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2daa2d66-0f8a-4d7b-b3fc-457be080f88f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1049,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "51483b0a-7215-484f-ae36-73ff5c475bf1",
          "title": "Metas",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
          "file": "/test/tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "46e86766-0d82-4b45-8e5c-8f30ece073ac",
              "title": "Reveal a meta",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "5eac7365-240f-4ca4-aadd-68d5e193c31c",
                  "parentUUID": "46e86766-0d82-4b45-8e5c-8f30ece073ac",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Metas Reveal a meta Define Asset: ",
                  "timedOut": false,
                  "duration": 1075,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"ASSET_PA:S|AAA, burn:H|4\",\n                    \"immutableTraits\": \"ASSET_PB:D|0.344,ASSET_PE:I|ID,ASSET_PF:S|A\",\n                    \"mutableMetaTraits\": \"ASSET_PC:S|ABBCBBC\",\n                    \"immutableMetaTraits\": \"ASSET_PD:S|QQQQQ\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "7c03e6b2-620e-4b45-810c-f1dcfd684449",
                  "parentUUID": "46e86766-0d82-4b45-8e5c-8f30ece073ac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Metas Reveal a meta Mint Asset: ",
                  "timedOut": false,
                  "duration": 1055,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSET_PD\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSET_PA:S|AAA, burn:H|4\",\n                    \"immutableProperties\": \"ASSET_PB:D|0.344,ASSET_PE:I|ID,ASSET_PF:S|A\",\n                    \"mutableMetaProperties\": \"ASSET_PC:S|ABBCBBC\",\n                    \"immutableMetaProperties\": \"ASSET_PD:S|QQQQQ\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "c949e754-57eb-4492-b3fd-c80d0e45cc2b",
                  "parentUUID": "46e86766-0d82-4b45-8e5c-8f30ece073ac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1074,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"S|AAA\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "be4cb9a5-2d61-4f44-bf86-2cd9280340c7",
                  "parentUUID": "46e86766-0d82-4b45-8e5c-8f30ece073ac",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c03e6b2-620e-4b45-810c-f1dcfd684449",
                "c949e754-57eb-4492-b3fd-c80d0e45cc2b",
                "be4cb9a5-2d61-4f44-bf86-2cd9280340c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3204,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0430365e-7f95-4787-91dc-e12137c3a83a",
              "title": "Reveal a meta of id type",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta of id type \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "21865d3d-96fa-46ee-863d-78e6d7ace358",
                  "parentUUID": "0430365e-7f95-4787-91dc-e12137c3a83a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of id type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1059,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n    \"type\": config.metaRevealType,\n    \"value\": {\n        \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n        },\n        \"metaFact\": \"I|ID\"\n    }\n}\nlet err, res = await chai.request(server)\n    .post(config.metaRevealPath)\n    .send(obj)\nexpect(res.body.txhash).to.not.equal(null)\nexpect(res.body.txhash).to.not.equal('')\nexpect(res.body.raw_log).to.not.contain('failed')\nexpect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "fce6082a-cdea-49fd-a968-8366eb9362ba",
                  "parentUUID": "0430365e-7f95-4787-91dc-e12137c3a83a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fce6082a-cdea-49fd-a968-8366eb9362ba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1059,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "661325be-05a1-42b3-96b8-851e3a8e1c14",
              "title": "Reveal a meta of string type",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta of string type \"before each\" hook",
                  "timedOut": false,
                  "duration": 4003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "92ec41dc-8202-4ef6-b5a4-28b692d867f9",
                  "parentUUID": "661325be-05a1-42b3-96b8-851e3a8e1c14",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of string type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1086,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"S|A\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "d8897ed2-3414-44cb-93c0-550f7dbd9b99",
                  "parentUUID": "661325be-05a1-42b3-96b8-851e3a8e1c14",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d8897ed2-3414-44cb-93c0-550f7dbd9b99"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1086,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e8d12bc8-db26-4b08-b629-d47c769de0da",
              "title": "Reveal a meta of dec type",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta of dec type \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "f8243e44-ad33-45ca-9178-e005f86a3c06",
                  "parentUUID": "e8d12bc8-db26-4b08-b629-d47c769de0da",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of dec type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1054,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"D|0.344\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "72499931-9c30-47b3-8e2b-99524fe76689",
                  "parentUUID": "e8d12bc8-db26-4b08-b629-d47c769de0da",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "72499931-9c30-47b3-8e2b-99524fe76689"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1054,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e11af162-22e4-482f-a8e6-19fa78364356",
              "title": "Reveal a meta of height type",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta of height type \"before each\" hook",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "65b4d9b2-a8de-4697-a4ed-bf69e4a703e5",
                  "parentUUID": "e11af162-22e4-482f-a8e6-19fa78364356",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of height type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1078,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"H|4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "869585cf-93e4-4b6d-a113-dd5c91b33979",
                  "parentUUID": "e11af162-22e4-482f-a8e6-19fa78364356",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "869585cf-93e4-4b6d-a113-dd5c91b33979"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1078,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3353e167-5e56-4a27-973b-22043ec1836f",
              "title": "Reveal an already revealed meta",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal an already revealed meta \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "65102d2c-335b-4c17-b47a-816853f951bb",
                  "parentUUID": "3353e167-5e56-4a27-973b-22043ec1836f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal an already revealed meta Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1053,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"H|4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('failed')\n            expect(res.body.raw_log).to.contain('EntityAlreadyExists')",
                  "err": {},
                  "uuid": "cb3d2e54-c29d-482e-b31e-a709eed5b75b",
                  "parentUUID": "3353e167-5e56-4a27-973b-22043ec1836f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cb3d2e54-c29d-482e-b31e-a709eed5b75b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1053,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "84bb9b57-706b-418e-9504-dda3ecf66c52",
          "title": "Orders",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
          "file": "/test/tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0671322f-3150-4d34-b66c-aa6d03cf9b18",
              "title": "Create an asset make order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Create an asset make order \"before each\" hook",
                  "timedOut": false,
                  "duration": 4003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "38355971-85e9-4ade-ad50-457d545c0090",
                  "parentUUID": "0671322f-3150-4d34-b66c-aa6d03cf9b18",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Orders Create an asset make order Define Asset: ",
                  "timedOut": false,
                  "duration": 1060,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"A_P1:S|\" + \",burn:H|1\",\n                    \"immutableTraits\": \"A_P2:S|\",\n                    \"mutableMetaTraits\": \"A_P3:S|\",\n                    \"immutableMetaTraits\": \"A_P4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "dfa4687b-c39a-4e4a-b5ba-7f865b7ee809",
                  "parentUUID": "0671322f-3150-4d34-b66c-aa6d03cf9b18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Orders Create an asset make order Mint Asset: ",
                  "timedOut": false,
                  "duration": 1060,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"A_P4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"A_P1:S|,burn:H|1\",\n                    \"immutableProperties\": \"A_P2:S|\",\n                    \"mutableMetaProperties\": \"A_P3:S|\",\n                    \"immutableMetaProperties\": \"A_P4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "38dc7a13-323e-4c18-9e97-0318af5ca188",
                  "parentUUID": "0671322f-3150-4d34-b66c-aa6d03cf9b18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Create an asset make order Define Order: ",
                  "timedOut": false,
                  "duration": 1052,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"immutableMetaTraits\": \"Name:S|,Gifts:S|Exchange,OrderID:S|\",\n                    \"immutableTraits\": \"Which Gifts:S|,What Gifts:S|\",\n                    \"mutableMetaTraits\": \"exchangeRate:D|1,makerOwnableSplit:D|0.000000000000000001,expiry:H|1000000,takerID:I|ID,makerSplit:D|0.000000000000000001\",\n                    \"mutableTraits\": \"descriptions:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "d2d2d32c-2245-49fd-bdf1-ddd74bf6d133",
                  "parentUUID": "0671322f-3150-4d34-b66c-aa6d03cf9b18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Asset Make Order: ",
                  "fullTitle": "Orders Create an asset make order Asset Make Order: ",
                  "timedOut": false,
                  "duration": 1067,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"Name\")\n            let assetID = await assets.queryAsset(\"A_P4\")\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"makerOwnableID\": assetID,\n                    \"takerOwnableID\":\"stake\",\n                    \"expiresIn\":\"100000\",\n                    \"makerOwnableSplit\":\"0.000000000000000001\",\n                    \"immutableMetaProperties\": \"Name:S|Board,Gifts:S|Exchange,OrderID:S|12345\",\n                    \"immutableProperties\": \"Which Gifts:S|Christmas Gift,What Gifts:S|kitty\",\n                    \"mutableMetaProperties\": \"exchangeRate:D|1,makerSplit:D|0.000000000000000001\",\n                    \"mutableProperties\": \"descriptions:S|awesomekitty\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "2fcc43f3-c22c-48f6-a792-049bb81e692b",
                  "parentUUID": "0671322f-3150-4d34-b66c-aa6d03cf9b18",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dfa4687b-c39a-4e4a-b5ba-7f865b7ee809",
                "38dc7a13-323e-4c18-9e97-0318af5ca188",
                "d2d2d32c-2245-49fd-bdf1-ddd74bf6d133",
                "2fcc43f3-c22c-48f6-a792-049bb81e692b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4239,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d9d24643-5510-426d-9098-8814078f4fbd",
              "title": "Cancel an asset order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Cancel an asset order \"before each\" hook",
                  "timedOut": false,
                  "duration": 4005,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "61fff8bf-36bc-4f97-a582-b97ea45641db",
                  "parentUUID": "d9d24643-5510-426d-9098-8814078f4fbd",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Cancel Order: ",
                  "fullTitle": "Orders Cancel an asset order Cancel Order: ",
                  "timedOut": false,
                  "duration": 1038,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let orderID = await orders.queryOrder(\"Name\")\n            let obj = {\n                \"type\": config.cancelOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"orderID\": orderID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.cancelOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "5f390eb4-d8fa-4a19-8500-21a67cc2be48",
                  "parentUUID": "d9d24643-5510-426d-9098-8814078f4fbd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f390eb4-d8fa-4a19-8500-21a67cc2be48"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1038,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ea5f3767-6731-4ff4-8e3d-4e40714f22ad",
              "title": "Take an asset take order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Take an asset take order \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "b4cfcbeb-0509-46b8-9169-129220aade0e",
                  "parentUUID": "ea5f3767-6731-4ff4-8e3d-4e40714f22ad",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Make Order: ",
                  "fullTitle": "Orders Take an asset take order Make Order: ",
                  "timedOut": false,
                  "duration": 1071,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"Name\")\n            let assetID = await assets.queryAsset(\"A_P4\")\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"makerOwnableID\": assetID,\n                    \"takerOwnableID\":\"stake\",\n                    \"expiresIn\":\"100000\",\n                    \"makerOwnableSplit\":\"0.000000000000000001\",\n                    \"immutableMetaProperties\": \"Name:S|Board,Gifts:S|Exchange,OrderID:S|12345\",\n                    \"immutableProperties\": \"Which Gifts:S|Christmas Gift,What Gifts:S|kitty\",\n                    \"mutableMetaProperties\": \"exchangeRate:D|1,makerSplit:D|0.000000000000000001\",\n                    \"mutableProperties\": \"descriptions:S|awesomekitty\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "7484a2b4-bb28-4ccd-84e6-5080ad257329",
                  "parentUUID": "ea5f3767-6731-4ff4-8e3d-4e40714f22ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Splits send: ",
                  "fullTitle": "Orders Take an asset take order Splits send: ",
                  "timedOut": false,
                  "duration": 1042,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let identityID1 = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let obj = {\n                \"type\": config.sendSplitType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"toID\": identityID1,\n                    \"ownableID\": \"stake\",\n                    \"split\": config.splitval\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.sendSplitPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "ef9aec98-2807-4644-9eac-0ac9e69c6e6a",
                  "parentUUID": "ea5f3767-6731-4ff4-8e3d-4e40714f22ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Take Order: ",
                  "fullTitle": "Orders Take an asset take order Take Order: ",
                  "timedOut": false,
                  "duration": 1060,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let orderID = await orders.queryOrder(\"Name\")\n            let obj = {\n                \"type\": config.takeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"takerOwnableSplit\": config.makerownablesplit,\n                    \"orderID\": orderID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.takeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "9e5ccfc1-3779-46d9-97a5-ec2f8ac7b98b",
                  "parentUUID": "ea5f3767-6731-4ff4-8e3d-4e40714f22ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7484a2b4-bb28-4ccd-84e6-5080ad257329",
                "ef9aec98-2807-4644-9eac-0ac9e69c6e6a",
                "9e5ccfc1-3779-46d9-97a5-ec2f8ac7b98b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3173,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4fda53ee-37b1-40ce-b6ef-aaa907fa5912",
              "title": "Create a coin make order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Create a coin make order \"before each\" hook",
                  "timedOut": false,
                  "duration": 4002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "57ab86a5-65dc-4321-bf07-1d72847d6a44",
                  "parentUUID": "4fda53ee-37b1-40ce-b6ef-aaa907fa5912",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Orders Create a coin make order Define Asset: ",
                  "timedOut": false,
                  "duration": 1070,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"A_PP1:S|\" + \",burn:H|1\",\n                    \"immutableTraits\": \"A_PP2:S|\",\n                    \"mutableMetaTraits\": \"A_PP3:S|\",\n                    \"immutableMetaTraits\": \"A_PP4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "4fad37cc-14c4-416b-995b-4e2adad3003f",
                  "parentUUID": "4fda53ee-37b1-40ce-b6ef-aaa907fa5912",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Orders Create a coin make order Mint Asset: ",
                  "timedOut": false,
                  "duration": 1064,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"A_PP4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"A_PP1:S|,burn:H|1\",\n                    \"immutableProperties\": \"A_PP2:S|\",\n                    \"mutableMetaProperties\": \"A_PP3:S|\",\n                    \"immutableMetaProperties\": \"A_PP4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "55fffea2-1a48-4837-af65-1af746bc0edd",
                  "parentUUID": "4fda53ee-37b1-40ce-b6ef-aaa907fa5912",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Create a coin make order Define Order: ",
                  "timedOut": false,
                  "duration": 1052,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"immutableMetaTraits\": \"Name1:S|,Gifts1:S|Exchange,OrderID1:S|\",\n                    \"immutableTraits\": \"Which Gifts1:S|,What Gifts1:S|\",\n                    \"mutableMetaTraits\": \"exchangeRate:D|1,makerOwnableSplit:D|0.000000000000000001,expiry:H|1000000,takerID:I|ID,makerSplit:D|0.000000000000000001\",\n                    \"mutableTraits\": \"descriptions1:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "d9fcf47f-4d43-4fcb-906c-264da8cc6d05",
                  "parentUUID": "4fda53ee-37b1-40ce-b6ef-aaa907fa5912",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Wrap a coin: ",
                  "fullTitle": "Orders Create a coin make order Wrap a coin: ",
                  "timedOut": false,
                  "duration": 1066,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.wrapCoinType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"coins\": config.coins\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.wrapCoinPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "e1215503-1ab7-438f-ab01-c16e43a55c43",
                  "parentUUID": "4fda53ee-37b1-40ce-b6ef-aaa907fa5912",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Coin Make Order: ",
                  "fullTitle": "Orders Create a coin make order Coin Make Order: ",
                  "timedOut": false,
                  "duration": 1069,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"Name1\")\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"makerOwnableID\": \"stake\",\n                    \"takerOwnableID\":\"stake\",\n                    \"expiresIn\":\"100000\",\n                    \"makerOwnableSplit\":\"0.000000000000000001\",\n                    \"immutableMetaProperties\": \"Name1:S|Board,Gifts1:S|Exchange,OrderID1:S|12345\",\n                    \"immutableProperties\": \"Which Gifts1:S|Christmas Gift,What Gifts1:S|kitty\",\n                    \"mutableMetaProperties\": \"exchangeRate:D|1,makerSplit:D|0.000000000000000001\",\n                    \"mutableProperties\": \"descriptions1:S|awesomekitty\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "f347b0c0-feb4-40db-89bf-a59e6237a4f1",
                  "parentUUID": "4fda53ee-37b1-40ce-b6ef-aaa907fa5912",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4fad37cc-14c4-416b-995b-4e2adad3003f",
                "55fffea2-1a48-4837-af65-1af746bc0edd",
                "d9fcf47f-4d43-4fcb-906c-264da8cc6d05",
                "e1215503-1ab7-438f-ab01-c16e43a55c43",
                "f347b0c0-feb4-40db-89bf-a59e6237a4f1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5321,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4332420b-9500-486d-a747-cd35f78cc983",
              "title": "Cancel a coin order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Cancel a coin order \"before each\" hook",
                  "timedOut": false,
                  "duration": 4002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "0b1602c8-9986-4624-ab80-cdb0bdaedc19",
                  "parentUUID": "4332420b-9500-486d-a747-cd35f78cc983",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Cancel Order: ",
                  "fullTitle": "Orders Cancel a coin order Cancel Order: ",
                  "timedOut": false,
                  "duration": 1050,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let orderID = await orders.queryOrder(\"Name1\")\n            let obj = {\n                \"type\": config.cancelOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"orderID\": orderID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.cancelOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "925d3e8e-ebe9-484d-ac9d-c1205707709f",
                  "parentUUID": "4332420b-9500-486d-a747-cd35f78cc983",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "925d3e8e-ebe9-484d-ac9d-c1205707709f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1050,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6b7bc124-aec3-4029-b659-d2a713693277",
              "title": "Take a coin take order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Take a coin take order \"before each\" hook",
                  "timedOut": false,
                  "duration": 4003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "99485635-f8b8-46ae-a363-d88dcfd076b7",
                  "parentUUID": "6b7bc124-aec3-4029-b659-d2a713693277",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Coin Make Order: ",
                  "fullTitle": "Orders Take a coin take order Coin Make Order: ",
                  "timedOut": false,
                  "duration": 1051,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"Name1\")\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"makerOwnableID\": \"stake\",\n                    \"takerOwnableID\":\"stake\",\n                    \"expiresIn\":\"100000\",\n                    \"makerOwnableSplit\":\"0.000000000000000001\",\n                    \"immutableMetaProperties\": \"Name1:S|Board,Gifts1:S|Exchange,OrderID1:S|12345\",\n                    \"immutableProperties\": \"Which Gifts1:S|Christmas Gift,What Gifts1:S|kitty\",\n                    \"mutableMetaProperties\": \"exchangeRate:D|1,makerSplit:D|0.000000000000000001\",\n                    \"mutableProperties\": \"descriptions1:S|awesomekitty\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "e69613b2-6fb1-48ad-91c2-b35b9d3ef40c",
                  "parentUUID": "6b7bc124-aec3-4029-b659-d2a713693277",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Coin Take Order: ",
                  "fullTitle": "Orders Take a coin take order Coin Take Order: ",
                  "timedOut": false,
                  "duration": 1067,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let orderID = await orders.queryOrder(\"Name1\")\n            let obj = {\n                \"type\": config.takeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"takerOwnableSplit\": config.makerownablesplit,\n                    \"orderID\": orderID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.takeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "2611f7e9-3404-4982-a0bc-bfd088221ccf",
                  "parentUUID": "6b7bc124-aec3-4029-b659-d2a713693277",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e69613b2-6fb1-48ad-91c2-b35b9d3ef40c",
                "2611f7e9-3404-4982-a0bc-bfd088221ccf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2118,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "30a85408-e643-4887-9de9-6126e3158844",
              "title": "Create an order with correct takerID",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Create an order with correct takerID \"before each\" hook",
                  "timedOut": false,
                  "duration": 4002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "ae145956-14c3-4070-b22f-354cb3134567",
                  "parentUUID": "30a85408-e643-4887-9de9-6126e3158844",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Orders Create an order with correct takerID Define Asset: ",
                  "timedOut": false,
                  "duration": 1062,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"A_PPP1:S|\" + \",burn:H|1\",\n                    \"immutableTraits\": \"A_PPP2:S|\",\n                    \"mutableMetaTraits\": \"A_PPP3:S|\",\n                    \"immutableMetaTraits\": \"A_PPP4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "a02fb054-1011-4c49-9325-d9536c1ee183",
                  "parentUUID": "30a85408-e643-4887-9de9-6126e3158844",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Orders Create an order with correct takerID Mint Asset: ",
                  "timedOut": false,
                  "duration": 1064,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"A_PPP4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"A_PPP1:S|,burn:H|1\",\n                    \"immutableProperties\": \"A_PPP2:S|\",\n                    \"mutableMetaProperties\": \"A_PPP3:S|\",\n                    \"immutableMetaProperties\": \"A_PPP4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "57b76a02-10af-4aa6-aa3f-0ee9f96bb4cd",
                  "parentUUID": "30a85408-e643-4887-9de9-6126e3158844",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Create an order with correct takerID Define Order: ",
                  "timedOut": false,
                  "duration": 1053,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"immutableMetaTraits\": \"Name2:S|,Gifts2:S|Exchange,OrderID2:S|\",\n                    \"immutableTraits\": \"Which Gifts2:S|,What Gifts2:S|\",\n                    \"mutableMetaTraits\": \"exchangeRate:D|1,makerOwnableSplit:D|0.000000000000000001,expiry:H|1000000,takerID:I|ID,makerSplit:D|0.000000000000000001\",\n                    \"mutableTraits\": \"descriptions2:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "b358cd96-679c-4017-992c-498bcaf35833",
                  "parentUUID": "30a85408-e643-4887-9de9-6126e3158844",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Asset Make Order: ",
                  "fullTitle": "Orders Create an order with correct takerID Asset Make Order: ",
                  "timedOut": false,
                  "duration": 1060,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let identityID1 = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let clsID = await cls.queryClassification(\"Name2\")\n            let assetID = await assets.queryAsset(\"A_PPP4\")\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"makerOwnableID\": assetID,\n                    \"takerOwnableID\":identityID1,\n                    \"expiresIn\":\"100000\",\n                    \"makerOwnableSplit\":\"0.000000000000000001\",\n                    \"immutableMetaProperties\": \"Name2:S|Board,Gifts2:S|Exchange,OrderID2:S|12345\",\n                    \"immutableProperties\": \"Which Gifts2:S|Christmas Gift,What Gifts2:S|kitty\",\n                    \"mutableMetaProperties\": \"exchangeRate:D|1,makerSplit:D|0.000000000000000001\",\n                    \"mutableProperties\": \"descriptions2:S|awesomekitty\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "02e06995-df6c-4492-81e6-eaba032ab8bd",
                  "parentUUID": "30a85408-e643-4887-9de9-6126e3158844",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Take Order with Incorrect ID: ",
                  "fullTitle": "Orders Create an order with correct takerID Take Order with Incorrect ID: ",
                  "timedOut": false,
                  "duration": 1062,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID1 = await identity.queryIdentity(\"immutableMetaTraits3\")\n            let orderID = await orders.queryOrder(\"Name2\")\n            let obj = {\n                \"type\": config.takeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID1,\n                    \"takerOwnableSplit\": config.makerownablesplit,\n                    \"orderID\": orderID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.takeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('failed')",
                  "err": {},
                  "uuid": "9d1867d3-aced-4d19-a035-dda43b76ecc6",
                  "parentUUID": "30a85408-e643-4887-9de9-6126e3158844",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Take Order with correct ID: ",
                  "fullTitle": "Orders Create an order with correct takerID Take Order with correct ID: ",
                  "timedOut": false,
                  "duration": 1071,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID1 = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let orderID = await orders.queryOrder(\"Name2\")\n            let obj = {\n                \"type\": config.takeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID1,\n                    \"takerOwnableSplit\": config.makerownablesplit,\n                    \"orderID\": orderID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.takeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('failed')",
                  "err": {},
                  "uuid": "9536de72-8c1a-4b62-b3e7-7f340843eade",
                  "parentUUID": "30a85408-e643-4887-9de9-6126e3158844",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a02fb054-1011-4c49-9325-d9536c1ee183",
                "57b76a02-10af-4aa6-aa3f-0ee9f96bb4cd",
                "b358cd96-679c-4017-992c-498bcaf35833",
                "02e06995-df6c-4492-81e6-eaba032ab8bd",
                "9d1867d3-aced-4d19-a035-dda43b76ecc6",
                "9536de72-8c1a-4b62-b3e7-7f340843eade"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6372,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8ee94c91-cce4-452d-b375-4e866a55dd65",
              "title": "Sell assets with splits, where taker gives more splits than he is supposed to",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to \"before each\" hook",
                  "timedOut": false,
                  "duration": 4003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "ce563aad-5cf1-4392-af47-450ebd552b3e",
                  "parentUUID": "8ee94c91-cce4-452d-b375-4e866a55dd65",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Define Asset: ",
                  "timedOut": false,
                  "duration": 1068,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"ASSETS10:S|num1\" + \",burn:H|1\",\n                    \"immutableTraits\": \"ASSETS11:S|\",\n                    \"mutableMetaTraits\": \"ASSETS12:S|num3\",\n                    \"immutableMetaTraits\": \"ASSETS13:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "a2527453-b22c-4f90-9c6c-3a95b6db76f6",
                  "parentUUID": "8ee94c91-cce4-452d-b375-4e866a55dd65",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Mint Asset: ",
                  "timedOut": false,
                  "duration": 1057,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSETS13\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSETS10:S|num1\" + \",burn:H|1\",\n                    \"immutableProperties\": \"ASSETS11:S|abc\",\n                    \"mutableMetaProperties\": \"ASSETS12:S|num3\",\n                    \"immutableMetaProperties\": \"ASSETS13:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "05691a2c-efd6-4d46-bd03-a28a2ed88abb",
                  "parentUUID": "8ee94c91-cce4-452d-b375-4e866a55dd65",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Define Order: ",
                  "timedOut": false,
                  "duration": 1050,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"immutableMetaTraits\": \"Name3:S|,Gifts3:S|Exchange,OrderID3:S|\",\n                    \"immutableTraits\": \"Which Gifts3:S|,What Gifts3:S|\",\n                    \"mutableMetaTraits\": \"exchangeRate:D|1,makerOwnableSplit:D|0.000000000000000001,expiry:H|1000000,takerID:I|ID,makerSplit:D|0.000000000000000001\",\n                    \"mutableTraits\": \"descriptions3:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "51b45095-cc8a-49be-a3c9-98b9bf86d5b2",
                  "parentUUID": "8ee94c91-cce4-452d-b375-4e866a55dd65",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Make Order: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Make Order: ",
                  "timedOut": false,
                  "duration": 1068,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"Name3\")\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"makerOwnableID\": \"stake\",\n                    \"takerOwnableID\":\"stake\",\n                    \"expiresIn\":\"100000\",\n                    \"makerOwnableSplit\":\"100\",\n                    \"immutableMetaProperties\": \"Name3:S|Board,Gifts3:S|Exchange,OrderID3:S|12345\",\n                    \"immutableProperties\": \"Which Gifts3:S|Christmas Gift,What Gifts3:S|kitty\",\n                    \"mutableMetaProperties\": \"exchangeRate:D|1,makerSplit:D|0.000000000000000001\",\n                    \"mutableProperties\": \"descriptions3:S|awesomekitty\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "84572e81-5725-4f5e-845c-3d97f84908ae",
                  "parentUUID": "8ee94c91-cce4-452d-b375-4e866a55dd65",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Take Order: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Take Order: ",
                  "timedOut": false,
                  "duration": 1067,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let orderID = await orders.queryOrder(\"Name3\")\n            let obj = {\n                \"type\": config.takeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"takerOwnableSplit\": \"200\",\n                    \"orderID\": orderID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.takeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "e1f005b4-0725-4d09-90a9-aab92f5fa5c8",
                  "parentUUID": "8ee94c91-cce4-452d-b375-4e866a55dd65",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a2527453-b22c-4f90-9c6c-3a95b6db76f6",
                "05691a2c-efd6-4d46-bd03-a28a2ed88abb",
                "51b45095-cc8a-49be-a3c9-98b9bf86d5b2",
                "84572e81-5725-4f5e-845c-3d97f84908ae",
                "e1f005b4-0725-4d09-90a9-aab92f5fa5c8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5310,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}