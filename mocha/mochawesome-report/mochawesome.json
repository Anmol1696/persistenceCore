{
  "stats": {
    "suites": 44,
    "tests": 90,
    "passes": 90,
    "pending": 0,
    "failures": 0,
    "start": "2020-11-03T11:34:29.967Z",
    "end": "2020-11-03T11:41:55.030Z",
    "duration": 445063,
    "testsRegistered": 90,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a8d55a46-35f5-48c5-af47-29d4e916caa8",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f745bbb6-691c-47df-adf5-373dc89c6547",
          "title": "Keys",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
          "file": "/test/tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8a983961-2e62-496d-bb6a-76f5ee9504f8",
              "title": "Account Creation, Sign and Broadcast for User1",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User1 \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "0c752ba3-fe6f-4a34-98e0-babe19c1ede3",
                  "parentUUID": "8a983961-2e62-496d-bb6a-76f5ee9504f8",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should create an account for: 762ac329b8c632ac60c66809a551b9f3",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User1 it should create an account for: 762ac329b8c632ac60c66809a551b9f3",
                  "timedOut": false,
                  "duration": 172,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let name = {\n                name: name1\n            }\n            let err, res = await chai.request(server)\n                .post(config.keysAdd)\n                .send(name)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.result.success).to.be.true\n            expect(res.body.result.keyOutput.address).to.not.equal(null)\n            expect(res.body.result.keyOutput.address).to.not.equal('')\n            names1.address = res.body.result.keyOutput.address",
                  "err": {},
                  "uuid": "e71254dd-d7d2-4998-95fb-0585b1ed841c",
                  "parentUUID": "8a983961-2e62-496d-bb6a-76f5ee9504f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "762ac329b8c632ac60c66809a551b9f3 should be able to signTx ",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User1 762ac329b8c632ac60c66809a551b9f3 should be able to signTx ",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"baseReq\": {\n                    \"from\": config.testAccountAddress,\n                    \"chain_id\": config.chain_id\n                },\n                \"type\": \"cosmos-sdk/StdTx\",\n                \"value\": {\n                    \"msg\": [\n                        {\n                            \"type\": \"cosmos-sdk/MsgSend\",\n                            \"value\": {\n                                \"from_address\": config.testAccountAddress,\n                                \"to_address\": names1.address,\n                                \"amount\": [\n                                    {\n                                        \"denom\": \"stake\",\n                                        \"amount\": \"1000\"\n                                    }\n                                ]\n                            }\n                        }\n                    ],\n                    \"fee\": {\n                        \"amount\": [],\n                        \"gas\": \"200000\"\n                    },\n                    \"signatures\": null,\n                    \"memo\": \"\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.signTx)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.result.success).to.be.true\n            names1.typekey = res.body.result.tx.signatures[0].pub_key.type\n            names1.value = res.body.result.tx.signatures[0].pub_key.value\n            names1.signature = res.body.result.tx.signatures[0].signature",
                  "err": {},
                  "uuid": "4779ae40-bde2-4862-a18b-3f7ee718fe31",
                  "parentUUID": "8a983961-2e62-496d-bb6a-76f5ee9504f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "762ac329b8c632ac60c66809a551b9f3 should be able to broadcastTx ",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User1 762ac329b8c632ac60c66809a551b9f3 should be able to broadcastTx ",
                  "timedOut": false,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"tx\": {\n                    \"msg\": [\n                        {\n                            \"type\": \"cosmos-sdk/MsgSend\",\n                            \"value\": {\n                                \"from_address\": config.testAccountAddress,\n                                \"to_address\": names1.address,\n                                \"amount\": [\n                                    {\n                                        \"denom\": \"stake\",\n                                        \"amount\": \"1000\"\n                                    }\n                                ]\n                            }\n                        }\n                    ],\n                    \"fee\": {\n                        \"amount\": [],\n                        \"gas\": \"200000\"\n                    },\n                    \"signatures\": [\n                        {\n                            \"pub_key\": {\n                                \"type\": names1.typekey,\n                                \"value\": names1.value\n                            },\n                            \"signature\": names1.signature\n                        }\n                    ],\n                    \"memo\": \"\"\n                },\n                \"mode\": \"sync\"\n            }\n            let err, res = await chai.request(server)\n                .post(config.broadcastTx)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            let hash = res.body.txhash\n            err, res = await chai.request(server)\n                .get('/txs/' + hash)",
                  "err": {},
                  "uuid": "37de2959-91e9-4723-ac1d-25708985bcf5",
                  "parentUUID": "8a983961-2e62-496d-bb6a-76f5ee9504f8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e71254dd-d7d2-4998-95fb-0585b1ed841c",
                "4779ae40-bde2-4862-a18b-3f7ee718fe31",
                "37de2959-91e9-4723-ac1d-25708985bcf5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 222,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9df869cf-c7ff-4968-8d68-b31a0bd20853",
              "title": "Account Creation, Sign and Broadcast for User2",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User2 \"before each\" hook",
                  "timedOut": false,
                  "duration": 3002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "01f58456-8777-4a3c-aef8-e48330ef37d5",
                  "parentUUID": "9df869cf-c7ff-4968-8d68-b31a0bd20853",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should create an account for: 6d814c9f50f89aec785cb6ae377ede9e",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User2 it should create an account for: 6d814c9f50f89aec785cb6ae377ede9e",
                  "timedOut": false,
                  "duration": 204,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let name = {\n                name: name2\n            }\n            let err, res = await chai.request('http://localhost:1317')\n                .post(config.keysAdd)\n                .send(name)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.result.success).to.be.true\n            expect(res.body.result.keyOutput.address).to.not.equal(null)\n            expect(res.body.result.keyOutput.address).to.not.equal('')\n            names2.address = res.body.result.keyOutput.address",
                  "err": {},
                  "uuid": "488ed654-3d89-43f3-b083-87356c282f42",
                  "parentUUID": "9df869cf-c7ff-4968-8d68-b31a0bd20853",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "6d814c9f50f89aec785cb6ae377ede9e should be able to signTx ",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User2 6d814c9f50f89aec785cb6ae377ede9e should be able to signTx ",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"baseReq\": {\n                    \"from\": config.testAccountAddress,\n                    \"chain_id\": config.chain_id\n                },\n                \"type\": \"cosmos-sdk/StdTx\",\n                \"value\": {\n                    \"msg\": [\n                        {\n                            \"type\": \"cosmos-sdk/MsgSend\",\n                            \"value\": {\n                                \"from_address\": config.testAccountAddress,\n                                \"to_address\": names2.address,\n                                \"amount\": [\n                                    {\n                                        \"denom\": \"stake\",\n                                        \"amount\": \"1000\"\n                                    }\n                                ]\n                            }\n                        }\n                    ],\n                    \"fee\": {\n                        \"amount\": [],\n                        \"gas\": \"200000\"\n                    },\n                    \"signatures\": null,\n                    \"memo\": \"\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.signTx)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.result.success).to.be.true\n            names2.typekey = res.body.result.tx.signatures[0].pub_key.type\n            names2.value = res.body.result.tx.signatures[0].pub_key.value\n            names2.signature = res.body.result.tx.signatures[0].signature",
                  "err": {},
                  "uuid": "4b69a0ab-bcf7-419f-af96-1229f2f5c707",
                  "parentUUID": "9df869cf-c7ff-4968-8d68-b31a0bd20853",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "6d814c9f50f89aec785cb6ae377ede9e should be able to broadcastTx ",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User2 6d814c9f50f89aec785cb6ae377ede9e should be able to broadcastTx ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"tx\": {\n                    \"msg\": [\n                        {\n                            \"type\": \"cosmos-sdk/MsgSend\",\n                            \"value\": {\n                                \"from_address\": config.testAccountAddress,\n                                \"to_address\": names2.address,\n                                \"amount\": [\n                                    {\n                                        \"denom\": \"stake\",\n                                        \"amount\": \"1000\"\n                                    }\n                                ]\n                            }\n                        }\n                    ],\n                    \"fee\": {\n                        \"amount\": [],\n                        \"gas\": \"200000\"\n                    },\n                    \"signatures\": [\n                        {\n                            \"pub_key\": {\n                                \"type\": names2.typekey,\n                                \"value\": names2.value\n                            },\n                            \"signature\": names2.signature\n                        }\n                    ],\n                    \"memo\": \"\"\n                },\n                \"mode\": \"sync\"\n            }\n            let err, res = await chai.request(server)\n                .post(config.broadcastTx)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')",
                  "err": {},
                  "uuid": "47e229c4-8262-4514-9cb6-86062f86a7d8",
                  "parentUUID": "9df869cf-c7ff-4968-8d68-b31a0bd20853",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "488ed654-3d89-43f3-b083-87356c282f42",
                "4b69a0ab-bcf7-419f-af96-1229f2f5c707",
                "47e229c4-8262-4514-9cb6-86062f86a7d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 262,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7939bec9-366f-4d97-93ba-4290b2a05b06",
          "title": "Identity",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
          "file": "/test/tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f9d6a890-d8a6-4823-b3b2-38eebc47e4d4",
              "title": "Nub Tx",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Nub Tx \"before each\" hook",
                  "timedOut": false,
                  "duration": 5005,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(6000)\nsetTimeout(function () {\n    done()\n}, 5000)",
                  "err": {},
                  "uuid": "d8388db9-9af3-4bb3-a9cb-cbaa0a4b5d2b",
                  "parentUUID": "f9d6a890-d8a6-4823-b3b2-38eebc47e4d4",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "nubTx: ",
                  "fullTitle": "Identity Nub Tx nubTx: ",
                  "timedOut": false,
                  "duration": 1370,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.nubType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"nubID\": config.nubID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.nubPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('EntityAlreadyExists')",
                  "err": {},
                  "uuid": "dd6c41d4-fe9d-49e8-bc15-869967ccdaf6",
                  "parentUUID": "f9d6a890-d8a6-4823-b3b2-38eebc47e4d4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dd6c41d4-fe9d-49e8-bc15-869967ccdaf6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1370,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "29745ce5-a179-472a-8a79-0ad1b151bd6a",
              "title": "Issue Identity 1",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Issue Identity 1 \"before each\" hook",
                  "timedOut": false,
                  "duration": 4003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "c8d8a480-0f19-4653-b0ce-a29d2b0a8c0f",
                  "parentUUID": "29745ce5-a179-472a-8a79-0ad1b151bd6a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Identity: ",
                  "fullTitle": "Identity Issue Identity 1 Define Identity: ",
                  "timedOut": false,
                  "duration": 1031,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let obj = {\n                \"type\": config.defineIdentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"mutableTraits1:S|num1\",\n                    \"immutableTraits\": \"immutableTraits1:S|\",\n                    \"mutableMetaTraits\": \"mutableMetaTraits1:S|num3\",\n                    \"immutableMetaTraits\": \"immutableMetaTraits1:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "adbd198b-7f2c-4ee7-8e11-e5be4f6f58ed",
                  "parentUUID": "29745ce5-a179-472a-8a79-0ad1b151bd6a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Issue Identity: ",
                  "fullTitle": "Identity Issue Identity 1 Issue Identity: ",
                  "timedOut": false,
                  "duration": 1073,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let clsID = await cls.queryClassification(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.issuedentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": config.testAccountAddress,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"mutableTraits1:S|num1\",\n                    \"immutableProperties\": \"immutableTraits1:S|\",\n                    \"mutableMetaProperties\": \"mutableMetaTraits1:S|num3\",\n                    \"immutableMetaProperties\": \"immutableMetaTraits1:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.issueIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "91e7a937-544c-4c26-9746-8199ca38f29e",
                  "parentUUID": "29745ce5-a179-472a-8a79-0ad1b151bd6a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "adbd198b-7f2c-4ee7-8e11-e5be4f6f58ed",
                "91e7a937-544c-4c26-9746-8199ca38f29e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2104,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d01b0f50-aec0-42a3-9fbb-4067abdd64ad",
              "title": "Provision Key",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Provision Key \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "fbf7bc9a-ecdd-4314-90c5-0ed4cd919d38",
                  "parentUUID": "d01b0f50-aec0-42a3-9fbb-4067abdd64ad",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Provision Key: ",
                  "fullTitle": "Identity Provision Key Provision Key: ",
                  "timedOut": false,
                  "duration": 1060,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let obj = {\n                \"type\": config.provisionKeyType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": randomWallet.address,\n                    \"identityID\": identityID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.provisionKeyPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "31904134-db4b-403d-8e75-462785aa50b4",
                  "parentUUID": "d01b0f50-aec0-42a3-9fbb-4067abdd64ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "31904134-db4b-403d-8e75-462785aa50b4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1060,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3f854e50-be5c-4d94-8e9f-c2f208ceba93",
              "title": "Unprovision Key",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Unprovision Key \"before each\" hook",
                  "timedOut": false,
                  "duration": 4003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "0caa3911-549a-4c67-aa92-5ef79fb56656",
                  "parentUUID": "3f854e50-be5c-4d94-8e9f-c2f208ceba93",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Unprovision Key: ",
                  "fullTitle": "Identity Unprovision Key Unprovision Key: ",
                  "timedOut": false,
                  "duration": 1045,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let obj = {\n                \"type\": config.unprovisionKeyType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": randomWallet.address,\n                    \"identityID\": identityID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.unprovisionKeyPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "bd2cf48e-845c-4d2f-a3e6-ef91d21ca2f2",
                  "parentUUID": "3f854e50-be5c-4d94-8e9f-c2f208ceba93",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bd2cf48e-845c-4d2f-a3e6-ef91d21ca2f2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1045,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "01f9a95c-20ae-44e3-9fbe-50fb0e8b2ae3",
              "title": "Provision an unprovision Key",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Provision an unprovision Key \"before each\" hook",
                  "timedOut": false,
                  "duration": 4000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "71e87cef-bff4-4e18-bb72-f442f18dbab1",
                  "parentUUID": "01f9a95c-20ae-44e3-9fbe-50fb0e8b2ae3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Provision an unprovision Key: ",
                  "fullTitle": "Identity Provision an unprovision Key Provision an unprovision Key: ",
                  "timedOut": false,
                  "duration": 1063,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let obj = {\n                \"type\": config.provisionKeyType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": randomWallet.address,\n                    \"identityID\": identityID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.provisionKeyPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('DeletionNotAllowed')",
                  "err": {},
                  "uuid": "2bdcd443-d2e2-4402-b9d6-b19531b85775",
                  "parentUUID": "01f9a95c-20ae-44e3-9fbe-50fb0e8b2ae3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2bdcd443-d2e2-4402-b9d6-b19531b85775"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1063,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "19c69169-ef54-4534-879c-6b3c5198d097",
              "title": "Issue Identity 2",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Issue Identity 2 \"before each\" hook",
                  "timedOut": false,
                  "duration": 4003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "44ca42c4-dcb4-4aba-abfd-730ee465269c",
                  "parentUUID": "19c69169-ef54-4534-879c-6b3c5198d097",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Identity: ",
                  "fullTitle": "Identity Issue Identity 2 Define Identity: ",
                  "timedOut": false,
                  "duration": 1054,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let obj = {\n                \"type\": config.defineIdentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"mutableTraits2:S|num1\",\n                    \"immutableTraits\": \"immutableTraits2:S|\",\n                    \"mutableMetaTraits\": \"mutableMetaTraits2:S|num3\",\n                    \"immutableMetaTraits\": \"immutableMetaTraits2:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "c7a880f3-5091-4004-89bd-b86f0be1ed4d",
                  "parentUUID": "19c69169-ef54-4534-879c-6b3c5198d097",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Issue Identity 2: ",
                  "fullTitle": "Identity Issue Identity 2 Issue Identity 2: ",
                  "timedOut": false,
                  "duration": 1042,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let clsID = await cls.queryClassification(\"immutableMetaTraits2\")\n            let obj = {\n                \"type\": config.issuedentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": config.testAccountAddress,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"mutableTraits2:S|num1\",\n                    \"immutableProperties\": \"immutableTraits2:S|\",\n                    \"mutableMetaProperties\": \"mutableMetaTraits2:S|num3\",\n                    \"immutableMetaProperties\": \"immutableMetaTraits2:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.issueIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "cccdade9-75dd-42bc-a9ec-ab19e9c01d31",
                  "parentUUID": "19c69169-ef54-4534-879c-6b3c5198d097",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c7a880f3-5091-4004-89bd-b86f0be1ed4d",
                "cccdade9-75dd-42bc-a9ec-ab19e9c01d31"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2096,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8dfe7f00-c716-4f60-b9a5-fdb4102f3f1a",
              "title": "Issue Identity 3",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Issue Identity 3 \"before each\" hook",
                  "timedOut": false,
                  "duration": 4005,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "2fe03ba6-a047-40f9-8007-c92c449a0252",
                  "parentUUID": "8dfe7f00-c716-4f60-b9a5-fdb4102f3f1a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Identity: ",
                  "fullTitle": "Identity Issue Identity 3 Define Identity: ",
                  "timedOut": false,
                  "duration": 1052,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let obj = {\n                \"type\": config.defineIdentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"mutableTraits3:S|num1\",\n                    \"immutableTraits\": \"immutableTraits3:S|\",\n                    \"mutableMetaTraits\": \"mutableMetaTraits3:S|num3\",\n                    \"immutableMetaTraits\": \"immutableMetaTraits3:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "fef7082f-3e38-4009-9f24-cd84af2cebd5",
                  "parentUUID": "8dfe7f00-c716-4f60-b9a5-fdb4102f3f1a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Issue Identity 3: ",
                  "fullTitle": "Identity Issue Identity 3 Issue Identity 3: ",
                  "timedOut": false,
                  "duration": 1050,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let clsID = await cls.queryClassification(\"immutableMetaTraits3\")\n            let obj = {\n                \"type\": config.issuedentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": config.testAccountAddress,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"mutableTraits3:S|num1\",\n                    \"immutableProperties\": \"immutableTraits3:S|\",\n                    \"mutableMetaProperties\": \"mutableMetaTraits3:S|num3\",\n                    \"immutableMetaProperties\": \"immutableMetaTraits3:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.issueIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "103ebe6e-73d2-494e-a9bd-374ded6007b8",
                  "parentUUID": "8dfe7f00-c716-4f60-b9a5-fdb4102f3f1a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fef7082f-3e38-4009-9f24-cd84af2cebd5",
                "103ebe6e-73d2-494e-a9bd-374ded6007b8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2102,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "52334b4f-69d2-449f-96bb-90642aa171d9",
          "title": "Assets",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
          "file": "/test/tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f2054225-2b7a-42ac-b043-f81f8d88cd34",
              "title": "Mint Asset",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset \"before each\" hook",
                  "timedOut": false,
                  "duration": 4005,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "1839f525-6917-4cb0-a9d6-9fcc5d594e15",
                  "parentUUID": "f2054225-2b7a-42ac-b043-f81f8d88cd34",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset Define Asset: ",
                  "timedOut": false,
                  "duration": 1052,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"ASSET1:S|\" + \",burn:H|1\",\n                    \"immutableTraits\": \"ASSET2:S|\",\n                    \"mutableMetaTraits\": \"ASSET3:S|\",\n                    \"immutableMetaTraits\": \"ASSET4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "d1cda2c3-23cb-4d8d-9474-ad033e4009bc",
                  "parentUUID": "f2054225-2b7a-42ac-b043-f81f8d88cd34",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset Mint Asset: ",
                  "timedOut": false,
                  "duration": 1066,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSET4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSET1:S|num1\" + \",burn:H|1\",\n                    \"immutableProperties\": \"ASSET2:S|num2\",\n                    \"mutableMetaProperties\": \"ASSET3:S|num3\",\n                    \"immutableMetaProperties\": \"ASSET4:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "c2ccf1a7-d84c-449d-809e-b45b0cbf5eb8",
                  "parentUUID": "f2054225-2b7a-42ac-b043-f81f8d88cd34",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d1cda2c3-23cb-4d8d-9474-ad033e4009bc",
                "c2ccf1a7-d84c-449d-809e-b45b0cbf5eb8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2118,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c7be94b7-5fa3-4f3c-907b-4178e7a2d58f",
              "title": "Mutate Asset",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mutate Asset \"before each\" hook",
                  "timedOut": false,
                  "duration": 4005,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "3b99d3a0-73ab-4490-b2ff-87102775f7e0",
                  "parentUUID": "c7be94b7-5fa3-4f3c-907b-4178e7a2d58f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Mutate Asset: ",
                  "fullTitle": "Assets Mutate Asset Mutate Asset: ",
                  "timedOut": false,
                  "duration": 1053,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let assetID = await assets.queryAsset(\"ASSET4\")\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID,\n                    \"mutableProperties\": \"ASSET1:S|\",\n                    \"mutableMetaProperties\": \"ASSET3:S|num3\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "fbe7aff3-03d4-4620-a883-0200fb75f506",
                  "parentUUID": "c7be94b7-5fa3-4f3c-907b-4178e7a2d58f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fbe7aff3-03d4-4620-a883-0200fb75f506"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1053,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "11cb220e-b663-42f6-a858-5b4eda4a1a06",
              "title": "Mint Asset with meta properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with meta properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 4005,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "963d286b-2570-45a4-9a0b-ed9870ef809c",
                  "parentUUID": "11cb220e-b663-42f6-a858-5b4eda4a1a06",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Mint Asset with meta properties: ",
                  "fullTitle": "Assets Mint Asset with meta properties Mint Asset with meta properties: ",
                  "timedOut": false,
                  "duration": 1061,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSET4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSET1:S|num5\" + \",burn:H|1\",\n                    \"immutableProperties\": \"ASSET2:S|num6\",\n                    \"mutableMetaProperties\": \"ASSET3:S|num7\",\n                    \"immutableMetaProperties\": \"ASSET4:S|num8\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "cb35d547-81d3-47ea-b052-283b795b2f4a",
                  "parentUUID": "11cb220e-b663-42f6-a858-5b4eda4a1a06",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cb35d547-81d3-47ea-b052-283b795b2f4a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1061,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "24c4b323-a068-4078-931f-19cdd04140ff",
              "title": "Mutate asset non meta properties to meta properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mutate asset non meta properties to meta properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 4005,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "94d92ab8-1a9f-4a15-9b52-7ec838b04f7a",
                  "parentUUID": "24c4b323-a068-4078-931f-19cdd04140ff",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mutate asset non meta properties to meta properties Define Asset: ",
                  "timedOut": false,
                  "duration": 1064,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"ASSETS1:S|\" + \",burn:H|1\",\n                    \"immutableTraits\": \"ASSETS2:S|\",\n                    \"mutableMetaTraits\": \"ASSETS3:S|\",\n                    \"immutableMetaTraits\": \"ASSETS4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "7971d43f-1387-4f72-9c0e-0dbd24c5f65d",
                  "parentUUID": "24c4b323-a068-4078-931f-19cdd04140ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mutate asset non meta properties to meta properties Mint Asset: ",
                  "timedOut": false,
                  "duration": 1082,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSETS4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSETS1:S|num5\" + \",burn:H|1\",\n                    \"immutableProperties\": \"ASSETS2:S|num6\",\n                    \"mutableMetaProperties\": \"ASSETS3:S|num7\",\n                    \"immutableMetaProperties\": \"ASSETS4:S|num8\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "55fd89d3-5c06-480e-a73b-e24f82e0d3a3",
                  "parentUUID": "24c4b323-a068-4078-931f-19cdd04140ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Mutate asset non meta properties to meta properties Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1022,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"S|num5\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj);\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "1bf8027a-5d36-431c-bcc4-a2707e5dd5f9",
                  "parentUUID": "24c4b323-a068-4078-931f-19cdd04140ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset non meta properties to meta properties: ",
                  "fullTitle": "Assets Mutate asset non meta properties to meta properties Mutate Asset non meta properties to meta properties: ",
                  "timedOut": false,
                  "duration": 1071,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let assetID = await assets.queryAsset(\"ASSETS4\")\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID,\n                    \"mutableProperties\": \"ASSETS1:S|\",\n                    \"mutableMetaProperties\": \"ASSETS3:S|num5\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "9e12f404-284c-423f-8ffc-c6fc2f4275b1",
                  "parentUUID": "24c4b323-a068-4078-931f-19cdd04140ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7971d43f-1387-4f72-9c0e-0dbd24c5f65d",
                "55fd89d3-5c06-480e-a73b-e24f82e0d3a3",
                "1bf8027a-5d36-431c-bcc4-a2707e5dd5f9",
                "9e12f404-284c-423f-8ffc-c6fc2f4275b1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4239,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "27254d8f-e6ba-4967-9790-52c9e8b0ff4b",
              "title": "Mint Asset with 22 properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with 22 properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 4005,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "78d31a7f-3497-4990-9da5-81cac809c4bd",
                  "parentUUID": "27254d8f-e6ba-4967-9790-52c9e8b0ff4b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Define Asset: ",
                  "timedOut": false,
                  "duration": 1057,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"ASSETP1:S|A,ASSETP11:S|B,ASSETP12:S|C,ASSETP13:S|D,ASSETP14:S|E,burn:H|2\",\n                    \"immutableTraits\": \"ASSETP2:S|G,ASSETP21:S|H,ASSETP22:S|I,ASSETP23:S|J,ASSETP24:S|K\",\n                    \"mutableMetaTraits\": \"ASSETP3:S|L,ASSETP31:S|M,ASSETP32:S|N,ASSETP33:S|O,ASSETP34:S|P\",\n                    \"immutableMetaTraits\": \"ASSETP4:S|Q,ASSETP41:S|R,ASSETP42:S|S,ASSETP43:S|T,ASSETP44:S|U,ASSETP45:S|V\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "85583985-c0b9-422d-b135-2aaff176b799",
                  "parentUUID": "27254d8f-e6ba-4967-9790-52c9e8b0ff4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Mint Asset: ",
                  "timedOut": false,
                  "duration": 1060,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSETP4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSETP1:S|A,ASSETP11:S|B,ASSETP12:S|C,ASSETP13:S|D,ASSETP14:S|E,burn:H|1\",\n                    \"immutableProperties\": \"ASSETP2:S|G,ASSETP21:S|H,ASSETP22:S|I,ASSETP23:S|J,ASSETP24:S|K\",\n                    \"mutableMetaProperties\": \"ASSETP3:S|L,ASSETP31:S|M,ASSETP32:S|N,ASSETP33:S|O,ASSETP34:S|P\",\n                    \"immutableMetaProperties\": \"ASSETP4:S|Q,ASSETP41:S|R,ASSETP42:S|S,ASSETP43:S|T,ASSETP44:S|U,ASSETP45:S|V\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "d105cc32-b34b-41fc-abc4-0d117473d02d",
                  "parentUUID": "27254d8f-e6ba-4967-9790-52c9e8b0ff4b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "85583985-c0b9-422d-b135-2aaff176b799",
                "d105cc32-b34b-41fc-abc4-0d117473d02d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2117,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a2d9db3d-5a66-47b1-853a-1dbffce2fe81",
              "title": "Add asset properties on mutation",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Add asset properties on mutation \"before each\" hook",
                  "timedOut": false,
                  "duration": 4003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "763079fa-92db-438b-8a03-3e0d1d620b04",
                  "parentUUID": "a2d9db3d-5a66-47b1-853a-1dbffce2fe81",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Add asset properties on mutation Define Asset: ",
                  "timedOut": false,
                  "duration": 1049,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"ASSET_A5:S|, burn:H|1\",\n                    \"immutableTraits\": \"ASSET_A6:S|\",\n                    \"mutableMetaTraits\": \"ASSET_A7:S|\",\n                    \"immutableMetaTraits\": \"ASSET_A8:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "b704e42a-f707-48bb-a52b-47d82fbb54e2",
                  "parentUUID": "a2d9db3d-5a66-47b1-853a-1dbffce2fe81",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Add asset properties on mutation Mint Asset: ",
                  "timedOut": false,
                  "duration": 1063,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSET_A8\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSET_A5:S|A, burn:H|1\",\n                    \"immutableProperties\": \"ASSET_A6:S|B\",\n                    \"mutableMetaProperties\": \"ASSET_A7:S|C\",\n                    \"immutableMetaProperties\": \"ASSET_A8:S|D\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "9ac077b7-de23-427e-a930-504cf8db396e",
                  "parentUUID": "a2d9db3d-5a66-47b1-853a-1dbffce2fe81",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Add asset properties on mutation: ",
                  "fullTitle": "Assets Add asset properties on mutation Add asset properties on mutation: ",
                  "timedOut": false,
                  "duration": 1129,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let assetID = await assets.queryAsset(\"ASSET_A8\")\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID,\n                    \"mutableProperties\": \"ASSET_A5:S|AA\",\n                    \"mutableMetaProperties\": \"ASSET_A7:S|CC\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "4f56050b-fbb3-4130-87d0-d13ea5ac8972",
                  "parentUUID": "a2d9db3d-5a66-47b1-853a-1dbffce2fe81",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b704e42a-f707-48bb-a52b-47d82fbb54e2",
                "9ac077b7-de23-427e-a930-504cf8db396e",
                "4f56050b-fbb3-4130-87d0-d13ea5ac8972"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3241,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "633b0c1e-43a5-4210-80d8-a80922cd2af0",
              "title": "Mint Asset with more than 22 properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with more than 22 properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "f4fb8b80-9871-4ab4-8823-5f00932e1fec",
                  "parentUUID": "633b0c1e-43a5-4210-80d8-a80922cd2af0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with more than 22 properties Define Asset: ",
                  "timedOut": false,
                  "duration": 1053,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"P1:S|A,P11:S|B,P12:S|C,P13:S|D,P14:S|E,P14:S|F,burn:H|1\",\n                    \"immutableTraits\": \"P2:S|G,P21:S|H,P22:S|I,P23:S|J,P24:S|K\",\n                    \"mutableMetaTraits\": \"P3:S|L,P31:S|M,P32:S|N,P33:S|O,P34:S|P\",\n                    \"immutableMetaTraits\": \"P4:S|Q,P41:S|R,P42:S|S,P43:S|T,P44:S|U,P45:S|V\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('InvalidRequest')\n            expect(res.body.raw_log).to.contain('failed')",
                  "err": {},
                  "uuid": "ca26c007-76bd-4785-b11f-356cd71df975",
                  "parentUUID": "633b0c1e-43a5-4210-80d8-a80922cd2af0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ca26c007-76bd-4785-b11f-356cd71df975"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1053,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cd581f30-e4d9-4e66-85b5-eb9343074fde",
              "title": "Mint Asset with burn greater than forseeable block height",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height \"before each\" hook",
                  "timedOut": false,
                  "duration": 4005,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "cff001ed-5a48-4725-bf53-eaf1f2967b6d",
                  "parentUUID": "cd581f30-e4d9-4e66-85b5-eb9343074fde",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Define Asset: ",
                  "timedOut": false,
                  "duration": 1058,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"AssetA:S|num1\" + \",burn:H|1\",\n                    \"immutableTraits\": \"AssetB:S|\",\n                    \"mutableMetaTraits\": \"AssetC:S|num3\",\n                    \"immutableMetaTraits\": \"AssetD:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "ae93ff38-8815-418b-b832-52c8291f66d9",
                  "parentUUID": "cd581f30-e4d9-4e66-85b5-eb9343074fde",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Mint Asset: ",
                  "timedOut": false,
                  "duration": 1047,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"AssetD\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"AssetA:S|num1\" + \",burn:H|100000000\",\n                    \"immutableProperties\": \"AssetB:S|num2\",\n                    \"mutableMetaProperties\": \"AssetC:S|num3\",\n                    \"immutableMetaProperties\": \"AssetD:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "209dd915-de4e-4d67-bc18-715aa379a819",
                  "parentUUID": "cd581f30-e4d9-4e66-85b5-eb9343074fde",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1061,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"H|100000000\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "a692c827-a558-425a-a0aa-5e3c74b0fe8d",
                  "parentUUID": "cd581f30-e4d9-4e66-85b5-eb9343074fde",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Burn Asset",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Burn Asset",
                  "timedOut": false,
                  "duration": 1053,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let assetID = await assets.queryAsset(\"AssetD\")\n            let obj = {\n                \"type\": config.burnAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.burnAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('failed')",
                  "err": {},
                  "uuid": "c3a0741a-e291-4af5-853d-61ace5fa8a41",
                  "parentUUID": "cd581f30-e4d9-4e66-85b5-eb9343074fde",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1061,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"H|100\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "dd2e91fe-0b07-498e-aaa7-7a76db5d0647",
                  "parentUUID": "cd581f30-e4d9-4e66-85b5-eb9343074fde",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Mutate Asset: ",
                  "timedOut": false,
                  "duration": 1055,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let assetID = await assets.queryAsset(\"AssetD\")\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID,\n                    \"mutableProperties\": \"AssetA:S|ABCd,burn:H|100\",\n                    \"mutableMetaProperties\": \"AssetC:S|num3\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "b2f94524-46ce-45a6-af8e-e2946906c36c",
                  "parentUUID": "cd581f30-e4d9-4e66-85b5-eb9343074fde",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Burn Asset",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Burn Asset",
                  "timedOut": false,
                  "duration": 1057,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let assetID = await assets.queryAsset(\"AssetD\")\n            let obj = {\n                \"type\": config.burnAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.burnAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('failed')",
                  "err": {},
                  "uuid": "f6b4cfe5-2bc5-49b5-a6b4-e2aba038908e",
                  "parentUUID": "cd581f30-e4d9-4e66-85b5-eb9343074fde",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ae93ff38-8815-418b-b832-52c8291f66d9",
                "209dd915-de4e-4d67-bc18-715aa379a819",
                "a692c827-a558-425a-a0aa-5e3c74b0fe8d",
                "c3a0741a-e291-4af5-853d-61ace5fa8a41",
                "dd2e91fe-0b07-498e-aaa7-7a76db5d0647",
                "b2f94524-46ce-45a6-af8e-e2946906c36c",
                "f6b4cfe5-2bc5-49b5-a6b4-e2aba038908e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7392,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "40fdf421-9195-4a0a-8ffb-df6447475efc",
              "title": "Send splits of an asset and then Mutate ",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Send splits of an asset and then Mutate  \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "021c9d51-c6de-4f09-80f8-dd4d1ed4efcb",
                  "parentUUID": "40fdf421-9195-4a0a-8ffb-df6447475efc",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Send splits of an asset and then Mutate  Define Asset: ",
                  "timedOut": false,
                  "duration": 1057,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"One:S|\" + \",burn:H|1\",\n                    \"immutableTraits\": \"Two:S|\",\n                    \"mutableMetaTraits\": \"Three:S|\",\n                    \"immutableMetaTraits\": \"Four:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "bb07dba1-fa46-4e90-ba64-43659c00d1f3",
                  "parentUUID": "40fdf421-9195-4a0a-8ffb-df6447475efc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Send splits of an asset and then Mutate  Mint Asset: ",
                  "timedOut": false,
                  "duration": 1062,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"Four\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"One:S|One\" + \",burn:H|1\",\n                    \"immutableProperties\": \"Two:S|Two\",\n                    \"mutableMetaProperties\": \"Three:S|Three\",\n                    \"immutableMetaProperties\": \"Four:S|Four\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "bb3fa79f-9273-4b08-8244-48317f01490d",
                  "parentUUID": "40fdf421-9195-4a0a-8ffb-df6447475efc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Send Asset: ",
                  "fullTitle": "Assets Send splits of an asset and then Mutate  Send Asset: ",
                  "timedOut": false,
                  "duration": 1063,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let identityID1 = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let assetID = await assets.queryAsset(\"Four\")\n            let obj = {\n                \"type\": config.sendSplitType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"toID\": identityID1,\n                    \"ownableID\": assetID,\n                    \"split\":\"0.000000000000000001\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.sendSplitPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "d9501506-b8b0-4d11-aabf-66769e2381a9",
                  "parentUUID": "40fdf421-9195-4a0a-8ffb-df6447475efc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset: ",
                  "fullTitle": "Assets Send splits of an asset and then Mutate  Mutate Asset: ",
                  "timedOut": false,
                  "duration": 1066,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let assetID = await assets.queryAsset(\"Four\")\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID,\n                    \"mutableProperties\": \"One:S|One\" + \",burn:H|1\",\n                    \"mutableMetaProperties\": \"Three:S|Three\",\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('failed')",
                  "err": {},
                  "uuid": "0c594892-eef4-4e75-9ed9-e356d441f8e6",
                  "parentUUID": "40fdf421-9195-4a0a-8ffb-df6447475efc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Make toID as maintainer: ",
                  "fullTitle": "Assets Send splits of an asset and then Mutate  Make toID as maintainer: ",
                  "timedOut": false,
                  "duration": 1080,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let identityID1 = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let clsID = await cls.queryClassification(\"Four\")\n            let obj = {\n                \"type\": config.deputizeType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID1,\n                    \"classificationID\": clsID,\n                    \"fromID\": identityID,\n                    \"maintainedTraits\": \"One:S|One,Three:S|Three,burn:H|1\",\n                    \"addMaintainer\": true,\n                    \"removeMaintainer\": true,\n                    \"mutateMaintainer\": true\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.deputizePath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "8ad2e051-5f3b-4a14-8418-d6dd4b296a4c",
                  "parentUUID": "40fdf421-9195-4a0a-8ffb-df6447475efc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset: ",
                  "fullTitle": "Assets Send splits of an asset and then Mutate  Mutate Asset: ",
                  "timedOut": false,
                  "duration": 1042,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let assetID = await assets.queryAsset(\"Four\")\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID,\n                    \"mutableProperties\": \"One:S|One\" + \",burn:H|1\",\n                    \"mutableMetaProperties\": \"Three:S|Three\",\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')",
                  "err": {},
                  "uuid": "279c6a96-7086-4c9c-9c7c-e5fd294bd8a9",
                  "parentUUID": "40fdf421-9195-4a0a-8ffb-df6447475efc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bb07dba1-fa46-4e90-ba64-43659c00d1f3",
                "bb3fa79f-9273-4b08-8244-48317f01490d",
                "d9501506-b8b0-4d11-aabf-66769e2381a9",
                "0c594892-eef4-4e75-9ed9-e356d441f8e6",
                "8ad2e051-5f3b-4a14-8418-d6dd4b296a4c",
                "279c6a96-7086-4c9c-9c7c-e5fd294bd8a9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6370,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0ec0ed63-739c-4e57-8a85-d3767ae761de",
              "title": "Mint Asset with extra properties when mutable trait is not defined",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined \"before each\" hook",
                  "timedOut": false,
                  "duration": 4005,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "a835d530-b932-42d3-9b84-98aac32e748a",
                  "parentUUID": "0ec0ed63-739c-4e57-8a85-d3767ae761de",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Define Asset: ",
                  "timedOut": false,
                  "duration": 1063,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"ASSETA1:S|,burn:H|1\",\n                    \"immutableTraits\": \"ASSETA2:S|G\",\n                    \"mutableMetaTraits\": \"ASSETA3:S|L\",\n                    \"immutableMetaTraits\": \"ASSETA4:S|Q\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "256e7b46-45c2-48de-9a6c-e086c28bcd11",
                  "parentUUID": "0ec0ed63-739c-4e57-8a85-d3767ae761de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Mint Asset: ",
                  "timedOut": false,
                  "duration": 1048,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSETA4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSETA1:S|A,burn:H|1,ASSETA11:S|B,ASSETA111:S|C\",\n                    \"immutableProperties\": \"ASSETA2:S|G\",\n                    \"mutableMetaProperties\": \"ASSETA3:S|L\",\n                    \"immutableMetaProperties\": \"ASSETA4:S|Q\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('failed')\n            expect(res.body.raw_log).to.contain('NotAuthorized')",
                  "err": {},
                  "uuid": "6795f276-ccfa-44e9-bd9e-289ec06ac492",
                  "parentUUID": "0ec0ed63-739c-4e57-8a85-d3767ae761de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "256e7b46-45c2-48de-9a6c-e086c28bcd11",
                "6795f276-ccfa-44e9-bd9e-289ec06ac492"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2111,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "79e5592f-ab9b-4501-85fa-4e9e139110cf",
              "title": "Burn Asset",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Burn Asset \"before each\" hook",
                  "timedOut": false,
                  "duration": 4008,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "c4b70dc1-2c15-43d4-b6da-96c8d02ac8a6",
                  "parentUUID": "79e5592f-ab9b-4501-85fa-4e9e139110cf",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Burn Asset Define Asset: ",
                  "timedOut": false,
                  "duration": 1077,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"Five:S|\" + \",burn:H|1\",\n                    \"immutableTraits\": \"Six:S|\",\n                    \"mutableMetaTraits\": \"Seven:S|\",\n                    \"immutableMetaTraits\": \"Eight:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "d3bb026e-de59-42e6-b01f-9b67ed73c0a9",
                  "parentUUID": "79e5592f-ab9b-4501-85fa-4e9e139110cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Burn Asset Mint Asset: ",
                  "timedOut": false,
                  "duration": 1063,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"Eight\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"Five:S|One\" + \",burn:H|1\",\n                    \"immutableProperties\": \"Six:S|Two\",\n                    \"mutableMetaProperties\": \"Seven:S|Three\",\n                    \"immutableMetaProperties\": \"Eight:S|Four\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "0c960124-b534-4ab2-89d2-30704ad5db9c",
                  "parentUUID": "79e5592f-ab9b-4501-85fa-4e9e139110cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Burn Asset Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1057,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"H|1\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "e7ce013f-06c9-4a45-9d0f-1029720bd643",
                  "parentUUID": "79e5592f-ab9b-4501-85fa-4e9e139110cf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Burn Asset",
                  "fullTitle": "Assets Burn Asset Burn Asset",
                  "timedOut": false,
                  "duration": 1046,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let assetID = await assets.queryAsset(\"Eight\")\n            let obj = {\n                \"type\": config.burnAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.burnAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "2b49cea5-335a-433e-b232-a35674803dcc",
                  "parentUUID": "79e5592f-ab9b-4501-85fa-4e9e139110cf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d3bb026e-de59-42e6-b01f-9b67ed73c0a9",
                "0c960124-b534-4ab2-89d2-30704ad5db9c",
                "e7ce013f-06c9-4a45-9d0f-1029720bd643",
                "2b49cea5-335a-433e-b232-a35674803dcc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4243,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b41e6a01-a014-47eb-9b51-b4dc810315eb",
          "title": "Splits",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
          "file": "/test/tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "97e89430-5548-47e8-833c-786367523413",
              "title": "send split of an asset",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Splits send split of an asset \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "59cd4b0a-d788-473b-9907-fba30a689428",
                  "parentUUID": "97e89430-5548-47e8-833c-786367523413",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Splits send split of an asset Define Asset: ",
                  "timedOut": false,
                  "duration": 1025,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"AssetDef1:S|Hello\" + \",burn:H|10\",\n                    \"immutableTraits\": \"AssetBDef2:S|\",\n                    \"mutableMetaTraits\": \"AssetCDef3:S|\",\n                    \"immutableMetaTraits\": \"AssetDDef4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "f0bbc0df-8338-42ce-981f-94b2e199172e",
                  "parentUUID": "97e89430-5548-47e8-833c-786367523413",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Splits send split of an asset Mint Asset: ",
                  "timedOut": false,
                  "duration": 1073,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"AssetDDef4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"AssetDef1:S|Hello\" + \",burn:H|10\",\n                    \"immutableProperties\": \"AssetBDef2:S|\",\n                    \"mutableMetaProperties\": \"AssetCDef3:S|\",\n                    \"immutableMetaProperties\": \"AssetDDef4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "4f5fd6fa-d8c9-48ff-b244-5b8e9911a64a",
                  "parentUUID": "97e89430-5548-47e8-833c-786367523413",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Send split of an asset: ",
                  "fullTitle": "Splits send split of an asset Send split of an asset: ",
                  "timedOut": false,
                  "duration": 1070,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let identityID1 = await identity.queryIdentity(\"immutableMetaTraits3\")\n            let assetID = await assets.queryAsset(\"AssetDDef4\")\n            let obj = {\n                \"type\": config.sendSplitType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"toID\": identityID1,\n                    \"ownableID\": assetID,\n                    \"split\": config.splitval\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.sendSplitPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "e5a3875e-8b1c-4f1b-8eb6-ee3f356d3fae",
                  "parentUUID": "97e89430-5548-47e8-833c-786367523413",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f0bbc0df-8338-42ce-981f-94b2e199172e",
                "4f5fd6fa-d8c9-48ff-b244-5b8e9911a64a",
                "e5a3875e-8b1c-4f1b-8eb6-ee3f356d3fae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3168,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2e6f0417-fb4b-4a27-98ba-9913d8f6e69f",
              "title": "Wrap a coin",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Splits Wrap a coin \"before each\" hook",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "189b7985-e0bc-429f-a717-aa6c75740d00",
                  "parentUUID": "2e6f0417-fb4b-4a27-98ba-9913d8f6e69f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Wrap a coin: ",
                  "fullTitle": "Splits Wrap a coin Wrap a coin: ",
                  "timedOut": false,
                  "duration": 1058,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\nlet obj = {\n    \"type\": config.wrapCoinType,\n    \"value\": {\n        \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n        },\n        \"fromID\": identityID,\n        \"coins\": config.coins\n    }\n}\nlet err, res = await chai.request(server)\n    .post(config.wrapCoinPath)\n    .send(obj)\nres.should.have.status(200);\nres.body.should.be.a('object');\nexpect(res.body.txhash).to.not.equal(null)\nexpect(res.body.txhash).to.not.equal('')\nexpect(res.body.raw_log).to.not.contain('failed')\nexpect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "fe457784-3be0-4a01-8bf0-bd860dfb5f98",
                  "parentUUID": "2e6f0417-fb4b-4a27-98ba-9913d8f6e69f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fe457784-3be0-4a01-8bf0-bd860dfb5f98"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1058,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "eb9a6cc3-c09b-47a1-83b2-bc06a9ff34b4",
              "title": "Unwrap a coin",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Splits Unwrap a coin \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "3bb6528c-4e1c-47ca-83f7-10229336b3f7",
                  "parentUUID": "eb9a6cc3-c09b-47a1-83b2-bc06a9ff34b4",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Unwrap a coin: ",
                  "fullTitle": "Splits Unwrap a coin Unwrap a coin: ",
                  "timedOut": false,
                  "duration": 1055,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.unwrapCoinType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"ownableID\": \"stake\",\n                    \"split\": \"100\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.unwrapCoinPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "ce74c6a8-fa2a-4c19-b953-ca363f75ec0b",
                  "parentUUID": "eb9a6cc3-c09b-47a1-83b2-bc06a9ff34b4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ce74c6a8-fa2a-4c19-b953-ca363f75ec0b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1055,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8dde57b7-10af-4c6c-b740-3bafbd16c47a",
              "title": "send split of an coin",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Splits send split of an coin \"before each\" hook",
                  "timedOut": false,
                  "duration": 4003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "84aa18df-8af6-48ba-8601-6859e556e94a",
                  "parentUUID": "8dde57b7-10af-4c6c-b740-3bafbd16c47a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Send split of an coin: ",
                  "fullTitle": "Splits send split of an coin Send split of an coin: ",
                  "timedOut": false,
                  "duration": 1056,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let identityID1 = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let obj = {\n                \"type\": config.sendSplitType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"toID\": identityID1,\n                    \"ownableID\": \"stake\",\n                    \"split\": config.splitval\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.sendSplitPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "20626eb6-0f24-43e8-bd72-b1c28dab0bf6",
                  "parentUUID": "8dde57b7-10af-4c6c-b740-3bafbd16c47a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "20626eb6-0f24-43e8-bd72-b1c28dab0bf6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1056,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "65725241-abf2-4809-b918-c53180392531",
          "title": "Metas",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
          "file": "/test/tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c4cc7a6c-976c-4aa5-94aa-1110eb30def8",
              "title": "Reveal a meta",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "66070cab-17a5-43e8-a7da-17d11be6a3b6",
                  "parentUUID": "c4cc7a6c-976c-4aa5-94aa-1110eb30def8",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Metas Reveal a meta Define Asset: ",
                  "timedOut": false,
                  "duration": 1055,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"ASSET_PA:S|AAA, burn:H|4\",\n                    \"immutableTraits\": \"ASSET_PB:D|0.344,ASSET_PE:I|ID,ASSET_PF:S|A\",\n                    \"mutableMetaTraits\": \"ASSET_PC:S|ABBCBBC\",\n                    \"immutableMetaTraits\": \"ASSET_PD:S|QQQQQ\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "00eedc13-ccdd-43ec-8e76-8f7330939613",
                  "parentUUID": "c4cc7a6c-976c-4aa5-94aa-1110eb30def8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Metas Reveal a meta Mint Asset: ",
                  "timedOut": false,
                  "duration": 1068,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSET_PD\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSET_PA:S|AAA, burn:H|4\",\n                    \"immutableProperties\": \"ASSET_PB:D|0.344,ASSET_PE:I|ID,ASSET_PF:S|A\",\n                    \"mutableMetaProperties\": \"ASSET_PC:S|ABBCBBC\",\n                    \"immutableMetaProperties\": \"ASSET_PD:S|QQQQQ\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "064c6cff-1411-4c0b-aba5-17835a683d6a",
                  "parentUUID": "c4cc7a6c-976c-4aa5-94aa-1110eb30def8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1068,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"S|AAA\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "4e26185d-f3ca-49fe-b5c7-c995d90d5e54",
                  "parentUUID": "c4cc7a6c-976c-4aa5-94aa-1110eb30def8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "00eedc13-ccdd-43ec-8e76-8f7330939613",
                "064c6cff-1411-4c0b-aba5-17835a683d6a",
                "4e26185d-f3ca-49fe-b5c7-c995d90d5e54"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3191,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "352e5726-9de6-46e4-b3f5-3caca21aff33",
              "title": "Reveal a meta of id type",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta of id type \"before each\" hook",
                  "timedOut": false,
                  "duration": 4005,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "4ceddf5d-aaf4-44fb-97f4-8cf7385509c8",
                  "parentUUID": "352e5726-9de6-46e4-b3f5-3caca21aff33",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of id type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1067,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n    \"type\": config.metaRevealType,\n    \"value\": {\n        \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n        },\n        \"metaFact\": \"I|ID\"\n    }\n}\nlet err, res = await chai.request(server)\n    .post(config.metaRevealPath)\n    .send(obj)\nexpect(res.body.txhash).to.not.equal(null)\nexpect(res.body.txhash).to.not.equal('')\nexpect(res.body.raw_log).to.not.contain('failed')\nexpect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "562de641-1732-49d0-9e6c-43bab1282f27",
                  "parentUUID": "352e5726-9de6-46e4-b3f5-3caca21aff33",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "562de641-1732-49d0-9e6c-43bab1282f27"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1067,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5186ac90-2b7c-4119-92f3-2ab1a8f9fcb6",
              "title": "Reveal a meta of string type",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta of string type \"before each\" hook",
                  "timedOut": false,
                  "duration": 4005,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "d204a31f-b990-4f91-9bb9-fc83eb6659ed",
                  "parentUUID": "5186ac90-2b7c-4119-92f3-2ab1a8f9fcb6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of string type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1062,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"S|A\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "24b8e8ca-da7b-446a-b12c-5c4c00e02f4c",
                  "parentUUID": "5186ac90-2b7c-4119-92f3-2ab1a8f9fcb6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "24b8e8ca-da7b-446a-b12c-5c4c00e02f4c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1062,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ed9fb8e0-47e4-47e7-a35d-eab96966f5a2",
              "title": "Reveal a meta of dec type",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta of dec type \"before each\" hook",
                  "timedOut": false,
                  "duration": 4002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "d18274f0-6da8-4e39-808f-8419df6557d4",
                  "parentUUID": "ed9fb8e0-47e4-47e7-a35d-eab96966f5a2",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of dec type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1072,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"D|0.344\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "9871ee24-d6e0-4e43-befa-79f252e36404",
                  "parentUUID": "ed9fb8e0-47e4-47e7-a35d-eab96966f5a2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9871ee24-d6e0-4e43-befa-79f252e36404"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1072,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9a31ec2f-1eaf-477d-8733-2cdaffe79f36",
              "title": "Reveal a meta of height type",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta of height type \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "abcf5a56-8e83-482b-bfad-d0743c1492bb",
                  "parentUUID": "9a31ec2f-1eaf-477d-8733-2cdaffe79f36",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of height type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1053,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"H|4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "a14f40bf-b21c-43ef-a5fc-8a7455cfddd3",
                  "parentUUID": "9a31ec2f-1eaf-477d-8733-2cdaffe79f36",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a14f40bf-b21c-43ef-a5fc-8a7455cfddd3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1053,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3101ae73-1754-4e96-9376-637699531569",
              "title": "Reveal an already revealed meta",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal an already revealed meta \"before each\" hook",
                  "timedOut": false,
                  "duration": 4003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "c4c228dd-de43-4e7d-8fd7-50aa5f575e60",
                  "parentUUID": "3101ae73-1754-4e96-9376-637699531569",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal an already revealed meta Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1026,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"H|4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('failed')\n            expect(res.body.raw_log).to.contain('EntityAlreadyExists')",
                  "err": {},
                  "uuid": "48cc6bfc-8002-4bec-a18a-8207fd8da155",
                  "parentUUID": "3101ae73-1754-4e96-9376-637699531569",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "48cc6bfc-8002-4bec-a18a-8207fd8da155"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1026,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0cc0da34-a417-4a9e-9479-617a299a014f",
          "title": "Orders",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
          "file": "/test/tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "dcc16ca4-757e-44c4-9e2c-b2f9a8206a10",
              "title": "Create an asset make order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Create an asset make order \"before each\" hook",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "af0b0a33-e904-4099-9581-d7fcce138b79",
                  "parentUUID": "dcc16ca4-757e-44c4-9e2c-b2f9a8206a10",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Orders Create an asset make order Define Asset: ",
                  "timedOut": false,
                  "duration": 1068,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"A_P1:S|\" + \",burn:H|1\",\n                    \"immutableTraits\": \"A_P2:S|\",\n                    \"mutableMetaTraits\": \"A_P3:S|\",\n                    \"immutableMetaTraits\": \"A_P4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "6cb02d39-570a-4161-ada7-a00be64a6c34",
                  "parentUUID": "dcc16ca4-757e-44c4-9e2c-b2f9a8206a10",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Orders Create an asset make order Mint Asset: ",
                  "timedOut": false,
                  "duration": 1035,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"A_P4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"A_P1:S|,burn:H|1\",\n                    \"immutableProperties\": \"A_P2:S|\",\n                    \"mutableMetaProperties\": \"A_P3:S|\",\n                    \"immutableMetaProperties\": \"A_P4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "1ac788d8-fc5e-43c1-b5f5-c0be4a77082a",
                  "parentUUID": "dcc16ca4-757e-44c4-9e2c-b2f9a8206a10",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Create an asset make order Define Order: ",
                  "timedOut": false,
                  "duration": 1061,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"immutableMetaTraits\": \"Name:S|,Gifts:S|Exchange,OrderID:S|\",\n                    \"immutableTraits\": \"Which Gifts:S|,What Gifts:S|\",\n                    \"mutableMetaTraits\": \"exchangeRate:D|1,makerOwnableSplit:D|0.000000000000000001,expiry:H|1000000,takerID:I|ID,makerSplit:D|0.000000000000000001\",\n                    \"mutableTraits\": \"descriptions:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "d8e11be8-198b-40c9-8021-2f47d2a6a825",
                  "parentUUID": "dcc16ca4-757e-44c4-9e2c-b2f9a8206a10",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Asset Make Order: ",
                  "fullTitle": "Orders Create an asset make order Asset Make Order: ",
                  "timedOut": false,
                  "duration": 1053,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"Name\")\n            let assetID = await assets.queryAsset(\"A_P4\")\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"makerOwnableID\": assetID,\n                    \"takerOwnableID\":\"stake\",\n                    \"expiresIn\":\"100000\",\n                    \"makerOwnableSplit\":\"0.000000000000000001\",\n                    \"immutableMetaProperties\": \"Name:S|Board,Gifts:S|Exchange,OrderID:S|12345\",\n                    \"immutableProperties\": \"Which Gifts:S|Christmas Gift,What Gifts:S|kitty\",\n                    \"mutableMetaProperties\": \"exchangeRate:D|1,makerSplit:D|0.000000000000000001\",\n                    \"mutableProperties\": \"descriptions:S|awesomekitty\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "32332cfa-7a6c-4031-aab6-06734eaae0c3",
                  "parentUUID": "dcc16ca4-757e-44c4-9e2c-b2f9a8206a10",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6cb02d39-570a-4161-ada7-a00be64a6c34",
                "1ac788d8-fc5e-43c1-b5f5-c0be4a77082a",
                "d8e11be8-198b-40c9-8021-2f47d2a6a825",
                "32332cfa-7a6c-4031-aab6-06734eaae0c3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4217,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cc615327-2a8c-4ae9-a9e0-fcf0ad473fe3",
              "title": "Cancel an asset order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Cancel an asset order \"before each\" hook",
                  "timedOut": false,
                  "duration": 4002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "b3217f7e-4a58-4f1d-97ad-7af77b3eb51b",
                  "parentUUID": "cc615327-2a8c-4ae9-a9e0-fcf0ad473fe3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Cancel Order: ",
                  "fullTitle": "Orders Cancel an asset order Cancel Order: ",
                  "timedOut": false,
                  "duration": 1052,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let orderID = await orders.queryOrder(\"Name\")\n            let obj = {\n                \"type\": config.cancelOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"orderID\": orderID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.cancelOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "d932b139-c941-4f08-95c9-ea304f3cbe8c",
                  "parentUUID": "cc615327-2a8c-4ae9-a9e0-fcf0ad473fe3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d932b139-c941-4f08-95c9-ea304f3cbe8c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1052,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dfb1aa4c-8d6b-4cf3-b3d2-b6c5fcbc6e90",
              "title": "Take an asset take order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Take an asset take order \"before each\" hook",
                  "timedOut": false,
                  "duration": 4003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "38e26153-0267-4861-995a-2c575f418b34",
                  "parentUUID": "dfb1aa4c-8d6b-4cf3-b3d2-b6c5fcbc6e90",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Make Order: ",
                  "fullTitle": "Orders Take an asset take order Make Order: ",
                  "timedOut": false,
                  "duration": 1048,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"Name\")\n            let assetID = await assets.queryAsset(\"A_P4\")\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"makerOwnableID\": assetID,\n                    \"takerOwnableID\":\"stake\",\n                    \"expiresIn\":\"100000\",\n                    \"makerOwnableSplit\":\"0.000000000000000001\",\n                    \"immutableMetaProperties\": \"Name:S|Board,Gifts:S|Exchange,OrderID:S|12345\",\n                    \"immutableProperties\": \"Which Gifts:S|Christmas Gift,What Gifts:S|kitty\",\n                    \"mutableMetaProperties\": \"exchangeRate:D|1,makerSplit:D|0.000000000000000001\",\n                    \"mutableProperties\": \"descriptions:S|awesomekitty\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "a55d1346-eab8-48a3-b080-34f3ac7291ce",
                  "parentUUID": "dfb1aa4c-8d6b-4cf3-b3d2-b6c5fcbc6e90",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Splits send: ",
                  "fullTitle": "Orders Take an asset take order Splits send: ",
                  "timedOut": false,
                  "duration": 1064,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let identityID1 = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let obj = {\n                \"type\": config.sendSplitType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"toID\": identityID1,\n                    \"ownableID\": \"stake\",\n                    \"split\": config.splitval\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.sendSplitPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "811a892a-0733-417d-8541-99d7b1f531e2",
                  "parentUUID": "dfb1aa4c-8d6b-4cf3-b3d2-b6c5fcbc6e90",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Take Order: ",
                  "fullTitle": "Orders Take an asset take order Take Order: ",
                  "timedOut": false,
                  "duration": 1036,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let orderID = await orders.queryOrder(\"Name\")\n            let obj = {\n                \"type\": config.takeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"takerOwnableSplit\": config.makerownablesplit,\n                    \"orderID\": orderID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.takeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "4d314feb-4c53-428e-9627-08ae96286b24",
                  "parentUUID": "dfb1aa4c-8d6b-4cf3-b3d2-b6c5fcbc6e90",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a55d1346-eab8-48a3-b080-34f3ac7291ce",
                "811a892a-0733-417d-8541-99d7b1f531e2",
                "4d314feb-4c53-428e-9627-08ae96286b24"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3148,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7be27268-7e1e-4d7a-aecc-b3aff188d4fe",
              "title": "Create a coin make order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Create a coin make order \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "7e0e39c6-8aee-4c20-8757-8708b5881b6e",
                  "parentUUID": "7be27268-7e1e-4d7a-aecc-b3aff188d4fe",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Orders Create a coin make order Define Asset: ",
                  "timedOut": false,
                  "duration": 1058,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"A_PP1:S|\" + \",burn:H|1\",\n                    \"immutableTraits\": \"A_PP2:S|\",\n                    \"mutableMetaTraits\": \"A_PP3:S|\",\n                    \"immutableMetaTraits\": \"A_PP4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "76db3624-c9a7-4065-a214-b95c8a3aa7a5",
                  "parentUUID": "7be27268-7e1e-4d7a-aecc-b3aff188d4fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Orders Create a coin make order Mint Asset: ",
                  "timedOut": false,
                  "duration": 1063,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"A_PP4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"A_PP1:S|,burn:H|1\",\n                    \"immutableProperties\": \"A_PP2:S|\",\n                    \"mutableMetaProperties\": \"A_PP3:S|\",\n                    \"immutableMetaProperties\": \"A_PP4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "1cc57091-0a7d-44ac-99e6-0f0bd2be9319",
                  "parentUUID": "7be27268-7e1e-4d7a-aecc-b3aff188d4fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Create a coin make order Define Order: ",
                  "timedOut": false,
                  "duration": 1054,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"immutableMetaTraits\": \"Name1:S|,Gifts1:S|Exchange,OrderID1:S|\",\n                    \"immutableTraits\": \"Which Gifts1:S|,What Gifts1:S|\",\n                    \"mutableMetaTraits\": \"exchangeRate:D|1,makerOwnableSplit:D|0.000000000000000001,expiry:H|1000000,takerID:I|ID,makerSplit:D|0.000000000000000001\",\n                    \"mutableTraits\": \"descriptions1:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "f10a417f-36d5-4fab-a4cc-ec0e2214c281",
                  "parentUUID": "7be27268-7e1e-4d7a-aecc-b3aff188d4fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Wrap a coin: ",
                  "fullTitle": "Orders Create a coin make order Wrap a coin: ",
                  "timedOut": false,
                  "duration": 1063,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.wrapCoinType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"coins\": config.coins\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.wrapCoinPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "18e2379d-6029-401c-bb98-dce238b4f90b",
                  "parentUUID": "7be27268-7e1e-4d7a-aecc-b3aff188d4fe",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Coin Make Order: ",
                  "fullTitle": "Orders Create a coin make order Coin Make Order: ",
                  "timedOut": false,
                  "duration": 1036,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"Name1\")\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"makerOwnableID\": \"stake\",\n                    \"takerOwnableID\":\"stake\",\n                    \"expiresIn\":\"100000\",\n                    \"makerOwnableSplit\":\"0.000000000000000001\",\n                    \"immutableMetaProperties\": \"Name1:S|Board,Gifts1:S|Exchange,OrderID1:S|12345\",\n                    \"immutableProperties\": \"Which Gifts1:S|Christmas Gift,What Gifts1:S|kitty\",\n                    \"mutableMetaProperties\": \"exchangeRate:D|1,makerSplit:D|0.000000000000000001\",\n                    \"mutableProperties\": \"descriptions1:S|awesomekitty\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "23c864bd-9f37-4181-9998-cf2d5d45dd07",
                  "parentUUID": "7be27268-7e1e-4d7a-aecc-b3aff188d4fe",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "76db3624-c9a7-4065-a214-b95c8a3aa7a5",
                "1cc57091-0a7d-44ac-99e6-0f0bd2be9319",
                "f10a417f-36d5-4fab-a4cc-ec0e2214c281",
                "18e2379d-6029-401c-bb98-dce238b4f90b",
                "23c864bd-9f37-4181-9998-cf2d5d45dd07"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5274,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "385d1174-732f-4b15-a038-80c446b93867",
              "title": "Cancel a coin order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Cancel a coin order \"before each\" hook",
                  "timedOut": false,
                  "duration": 4003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "f1e89b06-a80c-4e16-9f37-ed3dbfdb0883",
                  "parentUUID": "385d1174-732f-4b15-a038-80c446b93867",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Cancel Order: ",
                  "fullTitle": "Orders Cancel a coin order Cancel Order: ",
                  "timedOut": false,
                  "duration": 1073,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let orderID = await orders.queryOrder(\"Name1\")\n            let obj = {\n                \"type\": config.cancelOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"orderID\": orderID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.cancelOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "e4b0f909-bb61-4ae4-a5cb-c6441f141a16",
                  "parentUUID": "385d1174-732f-4b15-a038-80c446b93867",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4b0f909-bb61-4ae4-a5cb-c6441f141a16"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1073,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d0e298ec-ea3f-44ad-a5f0-ad498dadd9c4",
              "title": "Take a coin take order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Take a coin take order \"before each\" hook",
                  "timedOut": false,
                  "duration": 4002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "0fe5ac23-4f46-4add-8bce-1e04aaf35983",
                  "parentUUID": "d0e298ec-ea3f-44ad-a5f0-ad498dadd9c4",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Coin Make Order: ",
                  "fullTitle": "Orders Take a coin take order Coin Make Order: ",
                  "timedOut": false,
                  "duration": 1066,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"Name1\")\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"makerOwnableID\": \"stake\",\n                    \"takerOwnableID\":\"stake\",\n                    \"expiresIn\":\"100000\",\n                    \"makerOwnableSplit\":\"0.000000000000000001\",\n                    \"immutableMetaProperties\": \"Name1:S|Board,Gifts1:S|Exchange,OrderID1:S|12345\",\n                    \"immutableProperties\": \"Which Gifts1:S|Christmas Gift,What Gifts1:S|kitty\",\n                    \"mutableMetaProperties\": \"exchangeRate:D|1,makerSplit:D|0.000000000000000001\",\n                    \"mutableProperties\": \"descriptions1:S|awesomekitty\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "fbea7e3f-21b1-4d4f-b95f-ecf61c17f636",
                  "parentUUID": "d0e298ec-ea3f-44ad-a5f0-ad498dadd9c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Coin Take Order: ",
                  "fullTitle": "Orders Take a coin take order Coin Take Order: ",
                  "timedOut": false,
                  "duration": 1052,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let orderID = await orders.queryOrder(\"Name1\")\n            let obj = {\n                \"type\": config.takeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"takerOwnableSplit\": config.makerownablesplit,\n                    \"orderID\": orderID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.takeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "eed62cb3-dfd5-462f-b9d5-d1ac036cc64e",
                  "parentUUID": "d0e298ec-ea3f-44ad-a5f0-ad498dadd9c4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fbea7e3f-21b1-4d4f-b95f-ecf61c17f636",
                "eed62cb3-dfd5-462f-b9d5-d1ac036cc64e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2118,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "21eed6ca-ee12-4284-9310-110fb06f25e1",
              "title": "Create an order with correct takerID",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Create an order with correct takerID \"before each\" hook",
                  "timedOut": false,
                  "duration": 4005,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "923b5a0b-c154-440e-9a7a-89f3b8730746",
                  "parentUUID": "21eed6ca-ee12-4284-9310-110fb06f25e1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Orders Create an order with correct takerID Define Asset: ",
                  "timedOut": false,
                  "duration": 1065,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"A_PPP1:S|\" + \",burn:H|1\",\n                    \"immutableTraits\": \"A_PPP2:S|\",\n                    \"mutableMetaTraits\": \"A_PPP3:S|\",\n                    \"immutableMetaTraits\": \"A_PPP4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "c49de459-f06e-465c-879d-561f7a5f8ee2",
                  "parentUUID": "21eed6ca-ee12-4284-9310-110fb06f25e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Orders Create an order with correct takerID Mint Asset: ",
                  "timedOut": false,
                  "duration": 1046,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"A_PPP4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"A_PPP1:S|,burn:H|1\",\n                    \"immutableProperties\": \"A_PPP2:S|\",\n                    \"mutableMetaProperties\": \"A_PPP3:S|\",\n                    \"immutableMetaProperties\": \"A_PPP4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "499cec16-b6b9-4aaf-8322-879794e6506b",
                  "parentUUID": "21eed6ca-ee12-4284-9310-110fb06f25e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Create an order with correct takerID Define Order: ",
                  "timedOut": false,
                  "duration": 1063,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"immutableMetaTraits\": \"Name2:S|,Gifts2:S|Exchange,OrderID2:S|\",\n                    \"immutableTraits\": \"Which Gifts2:S|,What Gifts2:S|\",\n                    \"mutableMetaTraits\": \"exchangeRate:D|1,makerOwnableSplit:D|0.000000000000000001,expiry:H|1000000,takerID:I|ID,makerSplit:D|0.000000000000000001\",\n                    \"mutableTraits\": \"descriptions2:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "e8b8db73-eb23-4bef-87cd-95bee52343ef",
                  "parentUUID": "21eed6ca-ee12-4284-9310-110fb06f25e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Asset Make Order: ",
                  "fullTitle": "Orders Create an order with correct takerID Asset Make Order: ",
                  "timedOut": false,
                  "duration": 1074,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let identityID1 = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let clsID = await cls.queryClassification(\"Name2\")\n            let assetID = await assets.queryAsset(\"A_PPP4\")\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"makerOwnableID\": assetID,\n                    \"takerOwnableID\":identityID1,\n                    \"expiresIn\":\"100000\",\n                    \"makerOwnableSplit\":\"0.000000000000000001\",\n                    \"immutableMetaProperties\": \"Name2:S|Board,Gifts2:S|Exchange,OrderID2:S|12345\",\n                    \"immutableProperties\": \"Which Gifts2:S|Christmas Gift,What Gifts2:S|kitty\",\n                    \"mutableMetaProperties\": \"exchangeRate:D|1,makerSplit:D|0.000000000000000001\",\n                    \"mutableProperties\": \"descriptions2:S|awesomekitty\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "92015d8b-8ed2-491f-88b9-0c97be228ce1",
                  "parentUUID": "21eed6ca-ee12-4284-9310-110fb06f25e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Take Order with Incorrect ID: ",
                  "fullTitle": "Orders Create an order with correct takerID Take Order with Incorrect ID: ",
                  "timedOut": false,
                  "duration": 1055,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID1 = await identity.queryIdentity(\"immutableMetaTraits3\")\n            let orderID = await orders.queryOrder(\"Name2\")\n            let obj = {\n                \"type\": config.takeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID1,\n                    \"takerOwnableSplit\": config.makerownablesplit,\n                    \"orderID\": orderID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.takeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('failed')",
                  "err": {},
                  "uuid": "6b8070e8-e6fd-42a5-8044-7bd8508b103c",
                  "parentUUID": "21eed6ca-ee12-4284-9310-110fb06f25e1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Take Order with correct ID: ",
                  "fullTitle": "Orders Create an order with correct takerID Take Order with correct ID: ",
                  "timedOut": false,
                  "duration": 1049,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID1 = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let orderID = await orders.queryOrder(\"Name2\")\n            let obj = {\n                \"type\": config.takeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID1,\n                    \"takerOwnableSplit\": config.makerownablesplit,\n                    \"orderID\": orderID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.takeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('failed')",
                  "err": {},
                  "uuid": "6c934684-03b6-4e3c-a529-a2bdd5b32313",
                  "parentUUID": "21eed6ca-ee12-4284-9310-110fb06f25e1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c49de459-f06e-465c-879d-561f7a5f8ee2",
                "499cec16-b6b9-4aaf-8322-879794e6506b",
                "e8b8db73-eb23-4bef-87cd-95bee52343ef",
                "92015d8b-8ed2-491f-88b9-0c97be228ce1",
                "6b8070e8-e6fd-42a5-8044-7bd8508b103c",
                "6c934684-03b6-4e3c-a529-a2bdd5b32313"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6352,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8cc24f1a-b604-472f-b045-47507f7f7281",
              "title": "Sell assets with splits, where taker gives more splits than he is supposed to",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "b953cbec-a54b-44df-9e88-63632ab044cf",
                  "parentUUID": "8cc24f1a-b604-472f-b045-47507f7f7281",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Define Asset: ",
                  "timedOut": false,
                  "duration": 1060,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"ASSETS10:S|num1\" + \",burn:H|1\",\n                    \"immutableTraits\": \"ASSETS11:S|\",\n                    \"mutableMetaTraits\": \"ASSETS12:S|num3\",\n                    \"immutableMetaTraits\": \"ASSETS13:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "6a141686-be3e-4d58-ba8f-ab1df9eeb745",
                  "parentUUID": "8cc24f1a-b604-472f-b045-47507f7f7281",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Mint Asset: ",
                  "timedOut": false,
                  "duration": 1063,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSETS13\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSETS10:S|num1\" + \",burn:H|1\",\n                    \"immutableProperties\": \"ASSETS11:S|abc\",\n                    \"mutableMetaProperties\": \"ASSETS12:S|num3\",\n                    \"immutableMetaProperties\": \"ASSETS13:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "23236c78-4fbf-4a92-9494-d38f7aae571a",
                  "parentUUID": "8cc24f1a-b604-472f-b045-47507f7f7281",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Define Order: ",
                  "timedOut": false,
                  "duration": 1049,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"immutableMetaTraits\": \"Name3:S|,Gifts3:S|Exchange,OrderID3:S|\",\n                    \"immutableTraits\": \"Which Gifts3:S|,What Gifts3:S|\",\n                    \"mutableMetaTraits\": \"exchangeRate:D|1,makerOwnableSplit:D|0.000000000000000001,expiry:H|1000000,takerID:I|ID,makerSplit:D|0.000000000000000001\",\n                    \"mutableTraits\": \"descriptions3:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "9849f706-b8ed-4467-bdec-c491760fa51f",
                  "parentUUID": "8cc24f1a-b604-472f-b045-47507f7f7281",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Make Order: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Make Order: ",
                  "timedOut": false,
                  "duration": 1053,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"Name3\")\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"makerOwnableID\": \"stake\",\n                    \"takerOwnableID\":\"stake\",\n                    \"expiresIn\":\"100000\",\n                    \"makerOwnableSplit\":\"100\",\n                    \"immutableMetaProperties\": \"Name3:S|Board,Gifts3:S|Exchange,OrderID3:S|12345\",\n                    \"immutableProperties\": \"Which Gifts3:S|Christmas Gift,What Gifts3:S|kitty\",\n                    \"mutableMetaProperties\": \"exchangeRate:D|1,makerSplit:D|0.000000000000000001\",\n                    \"mutableProperties\": \"descriptions3:S|awesomekitty\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "25b819fc-fb72-4833-ab1d-6692a467f35a",
                  "parentUUID": "8cc24f1a-b604-472f-b045-47507f7f7281",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Take Order: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Take Order: ",
                  "timedOut": false,
                  "duration": 1041,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let orderID = await orders.queryOrder(\"Name3\")\n            let obj = {\n                \"type\": config.takeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"takerOwnableSplit\": \"200\",\n                    \"orderID\": orderID\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.takeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "cc50e555-53de-4fa4-9211-6e9b591a122c",
                  "parentUUID": "8cc24f1a-b604-472f-b045-47507f7f7281",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a141686-be3e-4d58-ba8f-ab1df9eeb745",
                "23236c78-4fbf-4a92-9494-d38f7aae571a",
                "9849f706-b8ed-4467-bdec-c491760fa51f",
                "25b819fc-fb72-4833-ab1d-6692a467f35a",
                "cc50e555-53de-4fa4-9211-6e9b591a122c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5266,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}