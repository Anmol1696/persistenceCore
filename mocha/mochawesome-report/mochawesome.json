{
  "stats": {
    "suites": 44,
    "tests": 90,
    "passes": 90,
    "pending": 0,
    "failures": 0,
    "start": "2020-10-30T10:45:45.617Z",
    "end": "2020-10-30T10:53:10.985Z",
    "duration": 445368,
    "testsRegistered": 90,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "357c5435-2daa-4b8f-88ac-2dc7723d5b58",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "878d6e7a-28b5-44c1-b74b-688f41bb3505",
          "title": "Keys",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
          "file": "/test/tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "09336c7e-0e6e-41e8-850e-4cf2247358db",
              "title": "Account Creation, Sign and Broadcast for User1",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User1 \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "678c4255-7f66-432b-a277-de87d78839ca",
                  "parentUUID": "09336c7e-0e6e-41e8-850e-4cf2247358db",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should create an account for: 80b7e8240dd9011762bb74394c4d12bf",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User1 it should create an account for: 80b7e8240dd9011762bb74394c4d12bf",
                  "timedOut": false,
                  "duration": 213,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let name = {\n                name: name1\n            }\n            var err, res = await chai.request(server)\n                .post(config.keysAdd)\n                .send(name)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.result.success).to.be.true\n            expect(res.body.result.keyOutput.address).to.not.equal(null)\n            expect(res.body.result.keyOutput.address).to.not.equal('')\n            names1.address = res.body.result.keyOutput.address",
                  "err": {},
                  "uuid": "ee7541ae-d1f0-46b4-8049-1077951c0ec2",
                  "parentUUID": "09336c7e-0e6e-41e8-850e-4cf2247358db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "80b7e8240dd9011762bb74394c4d12bf should be able to signTx ",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User1 80b7e8240dd9011762bb74394c4d12bf should be able to signTx ",
                  "timedOut": false,
                  "duration": 48,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"baseReq\": {\n                    \"from\": config.testAccountAddress,\n                    \"chain_id\": config.chain_id\n                },\n                \"type\": \"cosmos-sdk/StdTx\",\n                \"value\": {\n                    \"msg\": [\n                        {\n                            \"type\": \"cosmos-sdk/MsgSend\",\n                            \"value\": {\n                                \"from_address\": config.testAccountAddress,\n                                \"to_address\": names1.address,\n                                \"amount\": [\n                                    {\n                                        \"denom\": \"stake\",\n                                        \"amount\": \"1000\"\n                                    }\n                                ]\n                            }\n                        }\n                    ],\n                    \"fee\": {\n                        \"amount\": [],\n                        \"gas\": \"200000\"\n                    },\n                    \"signatures\": null,\n                    \"memo\": \"\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.signTx)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.result.success).to.be.true\n            names1.typekey = res.body.result.tx.signatures[0].pub_key.type\n            names1.value = res.body.result.tx.signatures[0].pub_key.value\n            names1.signature = res.body.result.tx.signatures[0].signature",
                  "err": {},
                  "uuid": "9d0e95d6-1192-4787-b454-cadaf32e03ec",
                  "parentUUID": "09336c7e-0e6e-41e8-850e-4cf2247358db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "80b7e8240dd9011762bb74394c4d12bf should be able to broadcastTx ",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User1 80b7e8240dd9011762bb74394c4d12bf should be able to broadcastTx ",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"tx\": {\n                    \"msg\": [\n                        {\n                            \"type\": \"cosmos-sdk/MsgSend\",\n                            \"value\": {\n                                \"from_address\": config.testAccountAddress,\n                                \"to_address\": names1.address,\n                                \"amount\": [\n                                    {\n                                        \"denom\": \"stake\",\n                                        \"amount\": \"1000\"\n                                    }\n                                ]\n                            }\n                        }\n                    ],\n                    \"fee\": {\n                        \"amount\": [],\n                        \"gas\": \"200000\"\n                    },\n                    \"signatures\": [\n                        {\n                            \"pub_key\": {\n                                \"type\": names1.typekey,\n                                \"value\": names1.value\n                            },\n                            \"signature\": names1.signature\n                        }\n                    ],\n                    \"memo\": \"\"\n                },\n                \"mode\": \"sync\"\n            }\n            var err, res = await chai.request(server)\n                .post(config.broadcastTx)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            var hash = res.body.txhash\n            var err, res = await chai.request(server)\n                .get('/txs/' + hash)",
                  "err": {},
                  "uuid": "1dd37844-4cc5-4f55-8020-113d9f6f6910",
                  "parentUUID": "09336c7e-0e6e-41e8-850e-4cf2247358db",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ee7541ae-d1f0-46b4-8049-1077951c0ec2",
                "9d0e95d6-1192-4787-b454-cadaf32e03ec",
                "1dd37844-4cc5-4f55-8020-113d9f6f6910"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 285,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9b1f9fb9-4fbb-49b9-a965-22cacc6abb78",
              "title": "Account Creation, Sign and Broadcast for User2",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User2 \"before each\" hook",
                  "timedOut": false,
                  "duration": 3004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "afbdc365-b28f-4740-8c42-ee094f7f513a",
                  "parentUUID": "9b1f9fb9-4fbb-49b9-a965-22cacc6abb78",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should create an account for: b93c7263f22abdf58bd0c8e51f224e37",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User2 it should create an account for: b93c7263f22abdf58bd0c8e51f224e37",
                  "timedOut": false,
                  "duration": 199,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let name = {\n                name: name2\n            }\n            var err, res = await chai.request('http://localhost:1317')\n                .post(config.keysAdd)\n                .send(name)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.result.success).to.be.true\n            expect(res.body.result.keyOutput.address).to.not.equal(null)\n            expect(res.body.result.keyOutput.address).to.not.equal('')\n            names2.address = res.body.result.keyOutput.address",
                  "err": {},
                  "uuid": "078273ad-269a-437a-90e1-48096498664d",
                  "parentUUID": "9b1f9fb9-4fbb-49b9-a965-22cacc6abb78",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "b93c7263f22abdf58bd0c8e51f224e37 should be able to signTx ",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User2 b93c7263f22abdf58bd0c8e51f224e37 should be able to signTx ",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"baseReq\": {\n                    \"from\": config.testAccountAddress,\n                    \"chain_id\": config.chain_id\n                },\n                \"type\": \"cosmos-sdk/StdTx\",\n                \"value\": {\n                    \"msg\": [\n                        {\n                            \"type\": \"cosmos-sdk/MsgSend\",\n                            \"value\": {\n                                \"from_address\": config.testAccountAddress,\n                                \"to_address\": names2.address,\n                                \"amount\": [\n                                    {\n                                        \"denom\": \"stake\",\n                                        \"amount\": \"1000\"\n                                    }\n                                ]\n                            }\n                        }\n                    ],\n                    \"fee\": {\n                        \"amount\": [],\n                        \"gas\": \"200000\"\n                    },\n                    \"signatures\": null,\n                    \"memo\": \"\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.signTx)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.result.success).to.be.true\n            names2.typekey = res.body.result.tx.signatures[0].pub_key.type\n            names2.value = res.body.result.tx.signatures[0].pub_key.value\n            names2.signature = res.body.result.tx.signatures[0].signature",
                  "err": {},
                  "uuid": "e808569a-f731-4e79-86d5-9c5366b949d1",
                  "parentUUID": "9b1f9fb9-4fbb-49b9-a965-22cacc6abb78",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "b93c7263f22abdf58bd0c8e51f224e37 should be able to broadcastTx ",
                  "fullTitle": "Keys Account Creation, Sign and Broadcast for User2 b93c7263f22abdf58bd0c8e51f224e37 should be able to broadcastTx ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"tx\": {\n                    \"msg\": [\n                        {\n                            \"type\": \"cosmos-sdk/MsgSend\",\n                            \"value\": {\n                                \"from_address\": config.testAccountAddress,\n                                \"to_address\": names2.address,\n                                \"amount\": [\n                                    {\n                                        \"denom\": \"stake\",\n                                        \"amount\": \"1000\"\n                                    }\n                                ]\n                            }\n                        }\n                    ],\n                    \"fee\": {\n                        \"amount\": [],\n                        \"gas\": \"200000\"\n                    },\n                    \"signatures\": [\n                        {\n                            \"pub_key\": {\n                                \"type\": names2.typekey,\n                                \"value\": names2.value\n                            },\n                            \"signature\": names2.signature\n                        }\n                    ],\n                    \"memo\": \"\"\n                },\n                \"mode\": \"sync\"\n            }\n            var err, res = await chai.request(server)\n                .post(config.broadcastTx)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')",
                  "err": {},
                  "uuid": "91f6d608-9caa-4773-8818-ce54b549b105",
                  "parentUUID": "9b1f9fb9-4fbb-49b9-a965-22cacc6abb78",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "078273ad-269a-437a-90e1-48096498664d",
                "e808569a-f731-4e79-86d5-9c5366b949d1",
                "91f6d608-9caa-4773-8818-ce54b549b105"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 256,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9caca794-95b5-4a34-8a7c-a3066cf7e0f3",
          "title": "Identity",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
          "file": "/test/tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ea95922e-f7ad-4973-9518-f45db4daefa9",
              "title": "Nub Tx",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Nub Tx \"before each\" hook",
                  "timedOut": false,
                  "duration": 5004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(6000)\nsetTimeout(function () {\n    done()\n}, 5000)",
                  "err": {},
                  "uuid": "e1547325-b6ac-4ab0-ac77-cbe9411a83c7",
                  "parentUUID": "ea95922e-f7ad-4973-9518-f45db4daefa9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "nubTx: ",
                  "fullTitle": "Identity Nub Tx nubTx: ",
                  "timedOut": false,
                  "duration": 1360,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.nubType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"nubID\": config.nubID\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.nubPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('EntityAlreadyExists')",
                  "err": {},
                  "uuid": "ce70a4c9-b53b-472a-a80b-e09fc738e3d3",
                  "parentUUID": "ea95922e-f7ad-4973-9518-f45db4daefa9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ce70a4c9-b53b-472a-a80b-e09fc738e3d3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1360,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a88b4857-e8c1-4c84-9301-ed53fb232e94",
              "title": "Issue Identity 1",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Issue Identity 1 \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "9ec3034e-834b-47dd-8d67-8f536f65c918",
                  "parentUUID": "a88b4857-e8c1-4c84-9301-ed53fb232e94",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Identity: ",
                  "fullTitle": "Identity Issue Identity 1 Define Identity: ",
                  "timedOut": false,
                  "duration": 1056,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let obj = {\n                \"type\": config.defineIdentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"mutableTraits1:S|num1\",\n                    \"immutableTraits\": \"immutableTraits1:S|\",\n                    \"mutableMetaTraits\": \"mutableMetaTraits1:S|num3\",\n                    \"immutableMetaTraits\": \"immutableMetaTraits1:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "d61ce075-bf1e-4d80-b802-bfda38b472f4",
                  "parentUUID": "a88b4857-e8c1-4c84-9301-ed53fb232e94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Issue Identity: ",
                  "fullTitle": "Identity Issue Identity 1 Issue Identity: ",
                  "timedOut": false,
                  "duration": 1055,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let clsID = await cls.queryClassification(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.issuedentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": config.testAccountAddress,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"mutableTraits1:S|num1\",\n                    \"immutableProperties\": \"immutableTraits1:S|\",\n                    \"mutableMetaProperties\": \"mutableMetaTraits1:S|num3\",\n                    \"immutableMetaProperties\": \"immutableMetaTraits1:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.issueIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "36158ec9-eecd-4599-9598-900223c53736",
                  "parentUUID": "a88b4857-e8c1-4c84-9301-ed53fb232e94",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d61ce075-bf1e-4d80-b802-bfda38b472f4",
                "36158ec9-eecd-4599-9598-900223c53736"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2111,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "879e265d-ed2e-4d2d-9a40-19ae9407757f",
              "title": "Provision Key",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Provision Key \"before each\" hook",
                  "timedOut": false,
                  "duration": 4005,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "aa246870-5564-4233-bdfe-c65ccef951bb",
                  "parentUUID": "879e265d-ed2e-4d2d-9a40-19ae9407757f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Provision Key: ",
                  "fullTitle": "Identity Provision Key Provision Key: ",
                  "timedOut": false,
                  "duration": 1049,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let obj = {\n                \"type\": config.provisionKeyType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": randomWallet.address,\n                    \"identityID\": identityID\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.provisionKeyPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "6fff4bb5-28fe-4fb0-b49a-614547b89df2",
                  "parentUUID": "879e265d-ed2e-4d2d-9a40-19ae9407757f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6fff4bb5-28fe-4fb0-b49a-614547b89df2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1049,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f84198dc-3199-4ca7-9d64-227f3173f5d1",
              "title": "Unprovision Key",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Unprovision Key \"before each\" hook",
                  "timedOut": false,
                  "duration": 4003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "bdd7bd32-52da-4584-9a1a-afbaa9dd917c",
                  "parentUUID": "f84198dc-3199-4ca7-9d64-227f3173f5d1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Unprovision Key: ",
                  "fullTitle": "Identity Unprovision Key Unprovision Key: ",
                  "timedOut": false,
                  "duration": 1077,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let obj = {\n                \"type\": config.unprovisionKeyType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": randomWallet.address,\n                    \"identityID\": identityID\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.unprovisionKeyPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "a03be66d-00b7-4bcf-92bb-fc578adfe567",
                  "parentUUID": "f84198dc-3199-4ca7-9d64-227f3173f5d1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a03be66d-00b7-4bcf-92bb-fc578adfe567"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1077,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b21e97c1-079d-4f18-8d10-eef10c4ca401",
              "title": "Provision an unprovision Key",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Provision an unprovision Key \"before each\" hook",
                  "timedOut": false,
                  "duration": 4003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "f6887ec0-a56b-47a4-b568-a690f3bf7c4c",
                  "parentUUID": "b21e97c1-079d-4f18-8d10-eef10c4ca401",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Provision an unprovision Key: ",
                  "fullTitle": "Identity Provision an unprovision Key Provision an unprovision Key: ",
                  "timedOut": false,
                  "duration": 1108,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let obj = {\n                \"type\": config.provisionKeyType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": randomWallet.address,\n                    \"identityID\": identityID\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.provisionKeyPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('DeletionNotAllowed')",
                  "err": {},
                  "uuid": "ec5eadb1-c2b7-4bd0-bbdd-31ddaceb0a81",
                  "parentUUID": "b21e97c1-079d-4f18-8d10-eef10c4ca401",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ec5eadb1-c2b7-4bd0-bbdd-31ddaceb0a81"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1108,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3b28d637-a8ec-4067-8208-fb9d25601366",
              "title": "Issue Identity 2",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Issue Identity 2 \"before each\" hook",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "43a53c5a-6731-4966-ab2d-ecd8100dd484",
                  "parentUUID": "3b28d637-a8ec-4067-8208-fb9d25601366",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Identity: ",
                  "fullTitle": "Identity Issue Identity 2 Define Identity: ",
                  "timedOut": false,
                  "duration": 1061,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let obj = {\n                \"type\": config.defineIdentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"mutableTraits2:S|num1\",\n                    \"immutableTraits\": \"immutableTraits2:S|\",\n                    \"mutableMetaTraits\": \"mutableMetaTraits2:S|num3\",\n                    \"immutableMetaTraits\": \"immutableMetaTraits2:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "e1418860-3bd7-4118-8a7d-78dc0106b919",
                  "parentUUID": "3b28d637-a8ec-4067-8208-fb9d25601366",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Issue Identity 2: ",
                  "fullTitle": "Identity Issue Identity 2 Issue Identity 2: ",
                  "timedOut": false,
                  "duration": 1073,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let clsID = await cls.queryClassification(\"immutableMetaTraits2\")\n            let obj = {\n                \"type\": config.issuedentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": config.testAccountAddress,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"mutableTraits2:S|num1\",\n                    \"immutableProperties\": \"immutableTraits2:S|\",\n                    \"mutableMetaProperties\": \"mutableMetaTraits2:S|num3\",\n                    \"immutableMetaProperties\": \"immutableMetaTraits2:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.issueIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "5ba871e2-4fc0-49d4-bb3f-ab373390cf0b",
                  "parentUUID": "3b28d637-a8ec-4067-8208-fb9d25601366",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e1418860-3bd7-4118-8a7d-78dc0106b919",
                "5ba871e2-4fc0-49d4-bb3f-ab373390cf0b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2134,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d5a0822a-1d3e-464c-b91f-cc39ea1f1af0",
              "title": "Issue Identity 3",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Issue Identity 3 \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "bdad713e-c262-4dcc-8267-fbb63eb53577",
                  "parentUUID": "d5a0822a-1d3e-464c-b91f-cc39ea1f1af0",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Identity: ",
                  "fullTitle": "Identity Issue Identity 3 Define Identity: ",
                  "timedOut": false,
                  "duration": 1066,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let obj = {\n                \"type\": config.defineIdentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"mutableTraits3:S|num1\",\n                    \"immutableTraits\": \"immutableTraits3:S|\",\n                    \"mutableMetaTraits\": \"mutableMetaTraits3:S|num3\",\n                    \"immutableMetaTraits\": \"immutableMetaTraits3:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "bfea7984-eb4e-4223-9067-9ce2f3212302",
                  "parentUUID": "d5a0822a-1d3e-464c-b91f-cc39ea1f1af0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Issue Identity 3: ",
                  "fullTitle": "Identity Issue Identity 3 Issue Identity 3: ",
                  "timedOut": false,
                  "duration": 1055,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(config.nubID)\n            let clsID = await cls.queryClassification(\"immutableMetaTraits3\")\n            let obj = {\n                \"type\": config.issuedentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": config.testAccountAddress,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"mutableTraits3:S|num1\",\n                    \"immutableProperties\": \"immutableTraits3:S|\",\n                    \"mutableMetaProperties\": \"mutableMetaTraits3:S|num3\",\n                    \"immutableMetaProperties\": \"immutableMetaTraits3:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.issueIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "7334b58b-0d29-4672-9afd-9c964b09124b",
                  "parentUUID": "d5a0822a-1d3e-464c-b91f-cc39ea1f1af0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bfea7984-eb4e-4223-9067-9ce2f3212302",
                "7334b58b-0d29-4672-9afd-9c964b09124b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2121,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e9178edb-d7a5-4d6e-8d27-0f0995062a1d",
          "title": "Assets",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
          "file": "/test/tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bd3aa8c1-3c0c-47be-9c0e-b208d2c31a49",
              "title": "Mint Asset",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset \"before each\" hook",
                  "timedOut": false,
                  "duration": 4002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "09b4f8cb-3687-4e1a-b9bd-b321ca7e8ce4",
                  "parentUUID": "bd3aa8c1-3c0c-47be-9c0e-b208d2c31a49",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset Define Asset: ",
                  "timedOut": false,
                  "duration": 1044,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"ASSET1:S|\" + \",burn:H|1\",\n                    \"immutableTraits\": \"ASSET2:S|\",\n                    \"mutableMetaTraits\": \"ASSET3:S|\",\n                    \"immutableMetaTraits\": \"ASSET4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "81b001b2-0bee-4cd7-879d-50e58aed1767",
                  "parentUUID": "bd3aa8c1-3c0c-47be-9c0e-b208d2c31a49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset Mint Asset: ",
                  "timedOut": false,
                  "duration": 1045,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSET4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSET1:S|num1\" + \",burn:H|1\",\n                    \"immutableProperties\": \"ASSET2:S|num2\",\n                    \"mutableMetaProperties\": \"ASSET3:S|num3\",\n                    \"immutableMetaProperties\": \"ASSET4:S|num4\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "b9be5394-25ba-4c7d-b3f2-461390e4e0e1",
                  "parentUUID": "bd3aa8c1-3c0c-47be-9c0e-b208d2c31a49",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "81b001b2-0bee-4cd7-879d-50e58aed1767",
                "b9be5394-25ba-4c7d-b3f2-461390e4e0e1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2089,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f5cf8b1e-1b5c-44d1-a7d5-c95042cc3ace",
              "title": "Mutate Asset",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mutate Asset \"before each\" hook",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "0b2a233e-9c8f-4e30-859b-6254b01a2312",
                  "parentUUID": "f5cf8b1e-1b5c-44d1-a7d5-c95042cc3ace",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Mutate Asset: ",
                  "fullTitle": "Assets Mutate Asset Mutate Asset: ",
                  "timedOut": false,
                  "duration": 1066,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let assetID = await assets.queryAsset(\"ASSET4\")\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID,\n                    \"mutableProperties\": \"ASSET1:S|\",\n                    \"mutableMetaProperties\": \"ASSET3:S|num3\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "76de3dc1-cc94-426c-90bf-15edbf32edb1",
                  "parentUUID": "f5cf8b1e-1b5c-44d1-a7d5-c95042cc3ace",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "76de3dc1-cc94-426c-90bf-15edbf32edb1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1066,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dbefa439-6b94-4d8b-ae9a-4d34f8cdfa3c",
              "title": "Mint Asset with meta properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with meta properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 4005,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "fbb321b3-57d9-4f38-a321-1e7fcf40ad1c",
                  "parentUUID": "dbefa439-6b94-4d8b-ae9a-4d34f8cdfa3c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Mint Asset with meta properties: ",
                  "fullTitle": "Assets Mint Asset with meta properties Mint Asset with meta properties: ",
                  "timedOut": false,
                  "duration": 1056,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSET4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSET1:S|num5\" + \",burn:H|1\",\n                    \"immutableProperties\": \"ASSET2:S|num6\",\n                    \"mutableMetaProperties\": \"ASSET3:S|num7\",\n                    \"immutableMetaProperties\": \"ASSET4:S|num8\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "874e601f-03ae-420f-bbc0-3d8e97d7649b",
                  "parentUUID": "dbefa439-6b94-4d8b-ae9a-4d34f8cdfa3c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "874e601f-03ae-420f-bbc0-3d8e97d7649b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1056,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "81e2d638-fb46-45d8-af1b-27eae9dd981a",
              "title": "Mutate asset non meta properties to meta properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mutate asset non meta properties to meta properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 4002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "c1c9f140-3d44-4958-994b-c9f654b60ef9",
                  "parentUUID": "81e2d638-fb46-45d8-af1b-27eae9dd981a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mutate asset non meta properties to meta properties Define Asset: ",
                  "timedOut": false,
                  "duration": 1051,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"ASSETS1:S|\" + \",burn:H|1\",\n                    \"immutableTraits\": \"ASSETS2:S|\",\n                    \"mutableMetaTraits\": \"ASSETS3:S|\",\n                    \"immutableMetaTraits\": \"ASSETS4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "8765ea9c-e64c-459c-931b-31b6ae9329f0",
                  "parentUUID": "81e2d638-fb46-45d8-af1b-27eae9dd981a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mutate asset non meta properties to meta properties Mint Asset: ",
                  "timedOut": false,
                  "duration": 1055,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSETS4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSETS1:S|num5\" + \",burn:H|1\",\n                    \"immutableProperties\": \"ASSETS2:S|num6\",\n                    \"mutableMetaProperties\": \"ASSETS3:S|num7\",\n                    \"immutableMetaProperties\": \"ASSETS4:S|num8\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "0f4f0d99-a902-490f-9001-d54b57c8ecb3",
                  "parentUUID": "81e2d638-fb46-45d8-af1b-27eae9dd981a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Mutate asset non meta properties to meta properties Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1049,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"S|num5\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj);\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "c0758d31-815e-411b-92a6-a02aac6bd73b",
                  "parentUUID": "81e2d638-fb46-45d8-af1b-27eae9dd981a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset non meta properties to meta properties: ",
                  "fullTitle": "Assets Mutate asset non meta properties to meta properties Mutate Asset non meta properties to meta properties: ",
                  "timedOut": false,
                  "duration": 1064,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let assetID = await assets.queryAsset(\"ASSETS4\")\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID,\n                    \"mutableProperties\": \"ASSETS1:S|\",\n                    \"mutableMetaProperties\": \"ASSETS3:S|num5\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "afce2429-436a-43fb-a2c6-8f2679677455",
                  "parentUUID": "81e2d638-fb46-45d8-af1b-27eae9dd981a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8765ea9c-e64c-459c-931b-31b6ae9329f0",
                "0f4f0d99-a902-490f-9001-d54b57c8ecb3",
                "c0758d31-815e-411b-92a6-a02aac6bd73b",
                "afce2429-436a-43fb-a2c6-8f2679677455"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4219,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e7064df4-87be-439e-8f3d-1f367f60b209",
              "title": "Mint Asset with 22 properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with 22 properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 4002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "ce8d9d6e-f82f-447f-aef1-6b1ee6da940d",
                  "parentUUID": "e7064df4-87be-439e-8f3d-1f367f60b209",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Define Asset: ",
                  "timedOut": false,
                  "duration": 1063,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"ASSETP1:S|A,ASSETP11:S|B,ASSETP12:S|C,ASSETP13:S|D,ASSETP14:S|E,burn:H|2\",\n                    \"immutableTraits\": \"ASSETP2:S|G,ASSETP21:S|H,ASSETP22:S|I,ASSETP23:S|J,ASSETP24:S|K\",\n                    \"mutableMetaTraits\": \"ASSETP3:S|L,ASSETP31:S|M,ASSETP32:S|N,ASSETP33:S|O,ASSETP34:S|P\",\n                    \"immutableMetaTraits\": \"ASSETP4:S|Q,ASSETP41:S|R,ASSETP42:S|S,ASSETP43:S|T,ASSETP44:S|U,ASSETP45:S|V\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "90823500-7689-4099-8496-cc5cbb18fc9f",
                  "parentUUID": "e7064df4-87be-439e-8f3d-1f367f60b209",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Mint Asset: ",
                  "timedOut": false,
                  "duration": 1075,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSETP4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSETP1:S|A,ASSETP11:S|B,ASSETP12:S|C,ASSETP13:S|D,ASSETP14:S|E,burn:H|1\",\n                    \"immutableProperties\": \"ASSETP2:S|G,ASSETP21:S|H,ASSETP22:S|I,ASSETP23:S|J,ASSETP24:S|K\",\n                    \"mutableMetaProperties\": \"ASSETP3:S|L,ASSETP31:S|M,ASSETP32:S|N,ASSETP33:S|O,ASSETP34:S|P\",\n                    \"immutableMetaProperties\": \"ASSETP4:S|Q,ASSETP41:S|R,ASSETP42:S|S,ASSETP43:S|T,ASSETP44:S|U,ASSETP45:S|V\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "b81b109c-1271-4186-8757-a1de78a741bd",
                  "parentUUID": "e7064df4-87be-439e-8f3d-1f367f60b209",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "90823500-7689-4099-8496-cc5cbb18fc9f",
                "b81b109c-1271-4186-8757-a1de78a741bd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2138,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f64662ce-c140-4002-9926-676225f3c17e",
              "title": "Add asset properties on mutation",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Add asset properties on mutation \"before each\" hook",
                  "timedOut": false,
                  "duration": 4003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "6590c400-403b-4537-b714-a5b199562540",
                  "parentUUID": "f64662ce-c140-4002-9926-676225f3c17e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Add asset properties on mutation Define Asset: ",
                  "timedOut": false,
                  "duration": 1057,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"ASSET_A5:S|, burn:H|1\",\n                    \"immutableTraits\": \"ASSET_A6:S|\",\n                    \"mutableMetaTraits\": \"ASSET_A7:S|\",\n                    \"immutableMetaTraits\": \"ASSET_A8:S|\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "f2ee5533-5ef6-4deb-a6be-662d660999a1",
                  "parentUUID": "f64662ce-c140-4002-9926-676225f3c17e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Add asset properties on mutation Mint Asset: ",
                  "timedOut": false,
                  "duration": 1085,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSET_A8\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSET_A5:S|A, burn:H|1\",\n                    \"immutableProperties\": \"ASSET_A6:S|B\",\n                    \"mutableMetaProperties\": \"ASSET_A7:S|C\",\n                    \"immutableMetaProperties\": \"ASSET_A8:S|D\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "532b3b31-0665-4d43-b174-1aa8bdb85ec6",
                  "parentUUID": "f64662ce-c140-4002-9926-676225f3c17e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Add asset properties on mutation: ",
                  "fullTitle": "Assets Add asset properties on mutation Add asset properties on mutation: ",
                  "timedOut": false,
                  "duration": 1064,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let assetID = await assets.queryAsset(\"ASSET_A8\")\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID,\n                    \"mutableProperties\": \"ASSET_A5:S|AA\",\n                    \"mutableMetaProperties\": \"ASSET_A7:S|CC\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "bb37fc10-8ca7-42b2-88e8-e2414a30bf8c",
                  "parentUUID": "f64662ce-c140-4002-9926-676225f3c17e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f2ee5533-5ef6-4deb-a6be-662d660999a1",
                "532b3b31-0665-4d43-b174-1aa8bdb85ec6",
                "bb37fc10-8ca7-42b2-88e8-e2414a30bf8c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3206,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "74ae03c2-24e0-43af-8b9f-5a264886fb6f",
              "title": "Mint Asset with more than 22 properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with more than 22 properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "71ad59db-73cb-4044-b938-35c94c02010d",
                  "parentUUID": "74ae03c2-24e0-43af-8b9f-5a264886fb6f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with more than 22 properties Define Asset: ",
                  "timedOut": false,
                  "duration": 1050,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"P1:S|A,P11:S|B,P12:S|C,P13:S|D,P14:S|E,P14:S|F,burn:H|1\",\n                    \"immutableTraits\": \"P2:S|G,P21:S|H,P22:S|I,P23:S|J,P24:S|K\",\n                    \"mutableMetaTraits\": \"P3:S|L,P31:S|M,P32:S|N,P33:S|O,P34:S|P\",\n                    \"immutableMetaTraits\": \"P4:S|Q,P41:S|R,P42:S|S,P43:S|T,P44:S|U,P45:S|V\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('InvalidRequest')\n            expect(res.body.raw_log).to.contain('failed')",
                  "err": {},
                  "uuid": "8f8ce0fe-1a55-422d-9033-35ecfc20444b",
                  "parentUUID": "74ae03c2-24e0-43af-8b9f-5a264886fb6f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8f8ce0fe-1a55-422d-9033-35ecfc20444b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1050,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d319565d-b32f-45da-bf9f-f9ca06bd4f85",
              "title": "Mint Asset with burn greater than forseeable block height",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height \"before each\" hook",
                  "timedOut": false,
                  "duration": 4002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "ae681ba3-be7a-4cf8-8c67-28d8e5da63bf",
                  "parentUUID": "d319565d-b32f-45da-bf9f-f9ca06bd4f85",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Define Asset: ",
                  "timedOut": false,
                  "duration": 1062,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"AssetA:S|num1\" + \",burn:H|1\",\n                    \"immutableTraits\": \"AssetB:S|\",\n                    \"mutableMetaTraits\": \"AssetC:S|num3\",\n                    \"immutableMetaTraits\": \"AssetD:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "b0fd54f6-505d-4068-afe1-bbaf58e1c7af",
                  "parentUUID": "d319565d-b32f-45da-bf9f-f9ca06bd4f85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Mint Asset: ",
                  "timedOut": false,
                  "duration": 1049,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"AssetD\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"AssetA:S|num1\" + \",burn:H|100000000\",\n                    \"immutableProperties\": \"AssetB:S|num2\",\n                    \"mutableMetaProperties\": \"AssetC:S|num3\",\n                    \"immutableMetaProperties\": \"AssetD:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "dba8be48-e659-4c5e-9862-8b2bdb1ae462",
                  "parentUUID": "d319565d-b32f-45da-bf9f-f9ca06bd4f85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1058,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"H|100000000\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "dee0826f-d285-4ad9-9dde-e58809b134fa",
                  "parentUUID": "d319565d-b32f-45da-bf9f-f9ca06bd4f85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Burn Asset",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Burn Asset",
                  "timedOut": false,
                  "duration": 1053,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let assetID = await assets.queryAsset(\"AssetD\")\n            let obj = {\n                \"type\": config.burnAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.burnAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('failed')",
                  "err": {},
                  "uuid": "9599423e-f81a-4a08-a44d-af84793a9585",
                  "parentUUID": "d319565d-b32f-45da-bf9f-f9ca06bd4f85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1062,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"H|100\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "af7788d1-144b-4ab7-99e9-23e20edaef15",
                  "parentUUID": "d319565d-b32f-45da-bf9f-f9ca06bd4f85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Mutate Asset: ",
                  "timedOut": false,
                  "duration": 1053,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let assetID = await assets.queryAsset(\"AssetD\")\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID,\n                    \"mutableProperties\": \"AssetA:S|ABCd,burn:H|100\",\n                    \"mutableMetaProperties\": \"AssetC:S|num3\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "229bcf8e-cc37-42db-8d47-9ed5eeeb63c6",
                  "parentUUID": "d319565d-b32f-45da-bf9f-f9ca06bd4f85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Burn Asset",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Burn Asset",
                  "timedOut": false,
                  "duration": 1079,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let assetID = await assets.queryAsset(\"AssetD\")\n            let obj = {\n                \"type\": config.burnAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.burnAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('failed')",
                  "err": {},
                  "uuid": "56eb5917-baab-49f1-b57d-2cec5e90eae1",
                  "parentUUID": "d319565d-b32f-45da-bf9f-f9ca06bd4f85",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b0fd54f6-505d-4068-afe1-bbaf58e1c7af",
                "dba8be48-e659-4c5e-9862-8b2bdb1ae462",
                "dee0826f-d285-4ad9-9dde-e58809b134fa",
                "9599423e-f81a-4a08-a44d-af84793a9585",
                "af7788d1-144b-4ab7-99e9-23e20edaef15",
                "229bcf8e-cc37-42db-8d47-9ed5eeeb63c6",
                "56eb5917-baab-49f1-b57d-2cec5e90eae1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7416,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bcc846f8-033d-4c63-a118-88dd92d78d68",
              "title": "Send splits of an asset and then Mutate ",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Send splits of an asset and then Mutate  \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "10773e1e-9381-4ba3-82f5-3e250c0bb646",
                  "parentUUID": "bcc846f8-033d-4c63-a118-88dd92d78d68",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Send splits of an asset and then Mutate  Define Asset: ",
                  "timedOut": false,
                  "duration": 1052,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"One:S|\" + \",burn:H|1\",\n                    \"immutableTraits\": \"Two:S|\",\n                    \"mutableMetaTraits\": \"Three:S|\",\n                    \"immutableMetaTraits\": \"Four:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "ba99617f-1911-4c42-8da2-60e0665c6e38",
                  "parentUUID": "bcc846f8-033d-4c63-a118-88dd92d78d68",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Send splits of an asset and then Mutate  Mint Asset: ",
                  "timedOut": false,
                  "duration": 1059,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"Four\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"One:S|One\" + \",burn:H|1\",\n                    \"immutableProperties\": \"Two:S|Two\",\n                    \"mutableMetaProperties\": \"Three:S|Three\",\n                    \"immutableMetaProperties\": \"Four:S|Four\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "5653f3bb-4542-412c-a020-90cfb8b9ce2a",
                  "parentUUID": "bcc846f8-033d-4c63-a118-88dd92d78d68",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Send Asset: ",
                  "fullTitle": "Assets Send splits of an asset and then Mutate  Send Asset: ",
                  "timedOut": false,
                  "duration": 1040,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let identityID1 = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let assetID = await assets.queryAsset(\"Four\")\n            let obj = {\n                \"type\": config.sendSplitType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"toID\": identityID1,\n                    \"ownableID\": assetID,\n                    \"split\":\"0.000000000000000001\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.sendSplitPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "f0418ac2-6e5a-4f4e-a5ca-f3209d21c582",
                  "parentUUID": "bcc846f8-033d-4c63-a118-88dd92d78d68",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset: ",
                  "fullTitle": "Assets Send splits of an asset and then Mutate  Mutate Asset: ",
                  "timedOut": false,
                  "duration": 1082,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let assetID = await assets.queryAsset(\"Four\")\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID,\n                    \"mutableProperties\": \"One:S|One\" + \",burn:H|1\",\n                    \"mutableMetaProperties\": \"Three:S|Three\",\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('failed')",
                  "err": {},
                  "uuid": "be90b324-7188-4b7e-97e5-9c076221b68c",
                  "parentUUID": "bcc846f8-033d-4c63-a118-88dd92d78d68",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Make toID as maintainer: ",
                  "fullTitle": "Assets Send splits of an asset and then Mutate  Make toID as maintainer: ",
                  "timedOut": false,
                  "duration": 1056,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let identityID1 = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let clsID = await cls.queryClassification(\"Four\")\n            let obj = {\n                \"type\": config.deputizeType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID1,\n                    \"classificationID\": clsID,\n                    \"fromID\": identityID,\n                    \"maintainedTraits\": \"One:S|One,Three:S|Three,burn:H|1\",\n                    \"addMaintainer\": true,\n                    \"removeMaintainer\": true,\n                    \"mutateMaintainer\": true\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.deputizePath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "45466005-acdd-4173-a3cc-4d3d4e3d2c48",
                  "parentUUID": "bcc846f8-033d-4c63-a118-88dd92d78d68",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset: ",
                  "fullTitle": "Assets Send splits of an asset and then Mutate  Mutate Asset: ",
                  "timedOut": false,
                  "duration": 1084,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let assetID = await assets.queryAsset(\"Four\")\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID,\n                    \"mutableProperties\": \"One:S|One\" + \",burn:H|1\",\n                    \"mutableMetaProperties\": \"Three:S|Three\",\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')",
                  "err": {},
                  "uuid": "7a15bb48-0664-462f-8baf-82d96773927d",
                  "parentUUID": "bcc846f8-033d-4c63-a118-88dd92d78d68",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ba99617f-1911-4c42-8da2-60e0665c6e38",
                "5653f3bb-4542-412c-a020-90cfb8b9ce2a",
                "f0418ac2-6e5a-4f4e-a5ca-f3209d21c582",
                "be90b324-7188-4b7e-97e5-9c076221b68c",
                "45466005-acdd-4173-a3cc-4d3d4e3d2c48",
                "7a15bb48-0664-462f-8baf-82d96773927d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6373,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "215efcf8-c3db-4a84-b443-5f1ca822ef59",
              "title": "Mint Asset with extra properties when mutable trait is not defined",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined \"before each\" hook",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "daee1a14-6cd8-4163-b2c9-f46af10f942b",
                  "parentUUID": "215efcf8-c3db-4a84-b443-5f1ca822ef59",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Define Asset: ",
                  "timedOut": false,
                  "duration": 1058,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"ASSETA1:S|,burn:H|1\",\n                    \"immutableTraits\": \"ASSETA2:S|G\",\n                    \"mutableMetaTraits\": \"ASSETA3:S|L\",\n                    \"immutableMetaTraits\": \"ASSETA4:S|Q\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "97c52b58-837c-4dc6-bf92-9031e408a671",
                  "parentUUID": "215efcf8-c3db-4a84-b443-5f1ca822ef59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Mint Asset: ",
                  "timedOut": false,
                  "duration": 1059,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSETA4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSETA1:S|A,burn:H|1,ASSETA11:S|B,ASSETA111:S|C\",\n                    \"immutableProperties\": \"ASSETA2:S|G\",\n                    \"mutableMetaProperties\": \"ASSETA3:S|L\",\n                    \"immutableMetaProperties\": \"ASSETA4:S|Q\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('failed')\n            expect(res.body.raw_log).to.contain('NotAuthorized')",
                  "err": {},
                  "uuid": "295c5f86-caa3-4c55-8c2e-4c02edf6ef2e",
                  "parentUUID": "215efcf8-c3db-4a84-b443-5f1ca822ef59",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "97c52b58-837c-4dc6-bf92-9031e408a671",
                "295c5f86-caa3-4c55-8c2e-4c02edf6ef2e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2117,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "896099bd-1ccf-45e9-9c1e-1c9922a9cc9b",
              "title": "Burn Asset",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Burn Asset \"before each\" hook",
                  "timedOut": false,
                  "duration": 4009,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "c5a4368d-fc1a-4346-8b82-c89f27611290",
                  "parentUUID": "896099bd-1ccf-45e9-9c1e-1c9922a9cc9b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Burn Asset Define Asset: ",
                  "timedOut": false,
                  "duration": 1063,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"Five:S|\" + \",burn:H|1\",\n                    \"immutableTraits\": \"Six:S|\",\n                    \"mutableMetaTraits\": \"Seven:S|\",\n                    \"immutableMetaTraits\": \"Eight:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "12226bf4-1904-4528-96bb-66aa3cd068ad",
                  "parentUUID": "896099bd-1ccf-45e9-9c1e-1c9922a9cc9b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Burn Asset Mint Asset: ",
                  "timedOut": false,
                  "duration": 1059,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"Eight\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"Five:S|One\" + \",burn:H|1\",\n                    \"immutableProperties\": \"Six:S|Two\",\n                    \"mutableMetaProperties\": \"Seven:S|Three\",\n                    \"immutableMetaProperties\": \"Eight:S|Four\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "74ed63b2-3edb-4826-ab36-2dfbb4231aae",
                  "parentUUID": "896099bd-1ccf-45e9-9c1e-1c9922a9cc9b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Burn Asset Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1048,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"H|1\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "096a7efb-3970-49d6-ba7b-027acbff73ea",
                  "parentUUID": "896099bd-1ccf-45e9-9c1e-1c9922a9cc9b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Burn Asset",
                  "fullTitle": "Assets Burn Asset Burn Asset",
                  "timedOut": false,
                  "duration": 1047,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let assetID = await assets.queryAsset(\"Eight\")\n            let obj = {\n                \"type\": config.burnAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"assetID\": assetID\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.burnAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "d9e29ac1-84e8-4744-a3b9-b41947af69cb",
                  "parentUUID": "896099bd-1ccf-45e9-9c1e-1c9922a9cc9b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "12226bf4-1904-4528-96bb-66aa3cd068ad",
                "74ed63b2-3edb-4826-ab36-2dfbb4231aae",
                "096a7efb-3970-49d6-ba7b-027acbff73ea",
                "d9e29ac1-84e8-4744-a3b9-b41947af69cb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4217,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5a598264-0c7e-42c1-9adc-3743b0893697",
          "title": "Splits",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
          "file": "/test/tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8d0d7768-b65b-4280-a396-4bedaf9ba2c7",
              "title": "send split of an asset",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Splits send split of an asset \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "51d21cb3-846f-4da7-94ae-3e56e871f4a8",
                  "parentUUID": "8d0d7768-b65b-4280-a396-4bedaf9ba2c7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Splits send split of an asset Define Asset: ",
                  "timedOut": false,
                  "duration": 1073,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"AssetDef1:S|Hello\" + \",burn:H|10\",\n                    \"immutableTraits\": \"AssetBDef2:S|\",\n                    \"mutableMetaTraits\": \"AssetCDef3:S|\",\n                    \"immutableMetaTraits\": \"AssetDDef4:S|\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "a34cb8e4-0622-4911-a41b-b3e07ebd825a",
                  "parentUUID": "8d0d7768-b65b-4280-a396-4bedaf9ba2c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Splits send split of an asset Mint Asset: ",
                  "timedOut": false,
                  "duration": 1052,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"AssetDDef4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"AssetDef1:S|Hello\" + \",burn:H|10\",\n                    \"immutableProperties\": \"AssetBDef2:S|\",\n                    \"mutableMetaProperties\": \"AssetCDef3:S|\",\n                    \"immutableMetaProperties\": \"AssetDDef4:S|\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "243861ad-7c71-4552-8cc1-c3c2980de143",
                  "parentUUID": "8d0d7768-b65b-4280-a396-4bedaf9ba2c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Send split of an asset: ",
                  "fullTitle": "Splits send split of an asset Send split of an asset: ",
                  "timedOut": false,
                  "duration": 1056,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let identityID1 = await identity.queryIdentity(\"immutableMetaTraits3\")\n            let assetID = await assets.queryAsset(\"AssetDDef4\")\n            let obj = {\n                \"type\": config.sendSplitType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"toID\": identityID1,\n                    \"ownableID\": assetID,\n                    \"split\": config.splitval\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.sendSplitPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "a613b779-0f38-4d1b-969d-7e90cc34013e",
                  "parentUUID": "8d0d7768-b65b-4280-a396-4bedaf9ba2c7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a34cb8e4-0622-4911-a41b-b3e07ebd825a",
                "243861ad-7c71-4552-8cc1-c3c2980de143",
                "a613b779-0f38-4d1b-969d-7e90cc34013e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3181,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "059e4e00-00c5-4331-8b24-d2952c27cf6f",
              "title": "Wrap a coin",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Splits Wrap a coin \"before each\" hook",
                  "timedOut": false,
                  "duration": 4002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "943189a3-1d3a-4749-b874-4514e11baba4",
                  "parentUUID": "059e4e00-00c5-4331-8b24-d2952c27cf6f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Wrap a coin: ",
                  "fullTitle": "Splits Wrap a coin Wrap a coin: ",
                  "timedOut": false,
                  "duration": 1062,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\nlet obj = {\n    \"type\": config.wrapCoinType,\n    \"value\": {\n        \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n        },\n        \"fromID\": identityID,\n        \"coins\": config.coins\n    }\n}\nvar err, res = await chai.request(server)\n    .post(config.wrapCoinPath)\n    .send(obj)\nres.should.have.status(200);\nres.body.should.be.a('object');\nexpect(res.body.txhash).to.not.equal(null)\nexpect(res.body.txhash).to.not.equal('')\nexpect(res.body.raw_log).to.not.contain('failed')\nexpect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "46903080-3071-4aa0-a49a-d8a202e2d6cb",
                  "parentUUID": "059e4e00-00c5-4331-8b24-d2952c27cf6f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "46903080-3071-4aa0-a49a-d8a202e2d6cb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1062,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "56ee84ca-3efb-449f-9556-725ff064658d",
              "title": "Unwrap a coin",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Splits Unwrap a coin \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "a1b8b931-a60e-47a0-85b1-36c234966fab",
                  "parentUUID": "56ee84ca-3efb-449f-9556-725ff064658d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Unwrap a coin: ",
                  "fullTitle": "Splits Unwrap a coin Unwrap a coin: ",
                  "timedOut": false,
                  "duration": 1051,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.unwrapCoinType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"ownableID\": \"stake\",\n                    \"split\": \"100\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.unwrapCoinPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "65c192ed-5566-4be1-bb02-781e7335e8aa",
                  "parentUUID": "56ee84ca-3efb-449f-9556-725ff064658d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "65c192ed-5566-4be1-bb02-781e7335e8aa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1051,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c4abec61-584b-4d86-b464-00a96ca79766",
              "title": "send split of an coin",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Splits send split of an coin \"before each\" hook",
                  "timedOut": false,
                  "duration": 4001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "719a0e6d-f72e-4c77-9928-01ddca503a22",
                  "parentUUID": "c4abec61-584b-4d86-b464-00a96ca79766",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Send split of an coin: ",
                  "fullTitle": "Splits send split of an coin Send split of an coin: ",
                  "timedOut": false,
                  "duration": 1059,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let identityID1 = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let obj = {\n                \"type\": config.sendSplitType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"toID\": identityID1,\n                    \"ownableID\": \"stake\",\n                    \"split\": config.splitval\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.sendSplitPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "4517d128-9e85-491b-808c-fcae88dfdc21",
                  "parentUUID": "c4abec61-584b-4d86-b464-00a96ca79766",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4517d128-9e85-491b-808c-fcae88dfdc21"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1059,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7ec913bc-a01f-4748-a1fd-695a9f0f49dc",
          "title": "Metas",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
          "file": "/test/tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "58420374-54cb-4ccf-84ef-e3f78f96730f",
              "title": "Reveal a meta",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta \"before each\" hook",
                  "timedOut": false,
                  "duration": 4002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "373d6aff-5df7-4ccb-a480-f75a096c9990",
                  "parentUUID": "58420374-54cb-4ccf-84ef-e3f78f96730f",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Metas Reveal a meta Define Asset: ",
                  "timedOut": false,
                  "duration": 1065,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"ASSET_PA:S|AAA, burn:H|4\",\n                    \"immutableTraits\": \"ASSET_PB:D|0.344,ASSET_PE:I|ID,ASSET_PF:S|A\",\n                    \"mutableMetaTraits\": \"ASSET_PC:S|ABBCBBC\",\n                    \"immutableMetaTraits\": \"ASSET_PD:S|QQQQQ\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "bc57173d-469d-4ba5-9803-cc00c5b26b6e",
                  "parentUUID": "58420374-54cb-4ccf-84ef-e3f78f96730f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Metas Reveal a meta Mint Asset: ",
                  "timedOut": false,
                  "duration": 1075,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSET_PD\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSET_PA:S|AAA, burn:H|4\",\n                    \"immutableProperties\": \"ASSET_PB:D|0.344,ASSET_PE:I|ID,ASSET_PF:S|A\",\n                    \"mutableMetaProperties\": \"ASSET_PC:S|ABBCBBC\",\n                    \"immutableMetaProperties\": \"ASSET_PD:S|QQQQQ\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "522bc6ee-85e7-4f18-9eae-01f92dc31467",
                  "parentUUID": "58420374-54cb-4ccf-84ef-e3f78f96730f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1056,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"S|AAA\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "267635c1-0d5e-42cb-9a74-500e836ad15b",
                  "parentUUID": "58420374-54cb-4ccf-84ef-e3f78f96730f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bc57173d-469d-4ba5-9803-cc00c5b26b6e",
                "522bc6ee-85e7-4f18-9eae-01f92dc31467",
                "267635c1-0d5e-42cb-9a74-500e836ad15b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3196,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6b10a75b-9d21-4b28-9892-1c30cdfb5447",
              "title": "Reveal a meta of id type",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta of id type \"before each\" hook",
                  "timedOut": false,
                  "duration": 4002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "3315e1c4-66dc-4344-bf6b-6be4ab0178b1",
                  "parentUUID": "6b10a75b-9d21-4b28-9892-1c30cdfb5447",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of id type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1063,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n    \"type\": config.metaRevealType,\n    \"value\": {\n        \"baseReq\": {\n            \"from\": config.testAccountAddress,\n            \"chain_id\": config.chain_id\n        },\n        \"metaFact\": \"I|ID\"\n    }\n}\nvar err, res = await chai.request(server)\n    .post(config.metaRevealPath)\n    .send(obj)\nexpect(res.body.txhash).to.not.equal(null)\nexpect(res.body.txhash).to.not.equal('')\nexpect(res.body.raw_log).to.not.contain('failed')\nexpect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "d627448f-bd4f-4f75-ab79-95e2296b8b16",
                  "parentUUID": "6b10a75b-9d21-4b28-9892-1c30cdfb5447",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d627448f-bd4f-4f75-ab79-95e2296b8b16"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1063,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7521ab72-d512-4fce-ad1d-a316f40f996e",
              "title": "Reveal a meta of string type",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta of string type \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "9432bf7b-abc8-4227-919a-f793c8f0bedc",
                  "parentUUID": "7521ab72-d512-4fce-ad1d-a316f40f996e",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of string type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1056,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"S|A\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "0c909bfe-98ed-44f8-9cc8-1712ba681bfb",
                  "parentUUID": "7521ab72-d512-4fce-ad1d-a316f40f996e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0c909bfe-98ed-44f8-9cc8-1712ba681bfb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1056,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0a44d9d7-d7a8-4084-a5a2-2c235571bd93",
              "title": "Reveal a meta of dec type",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta of dec type \"before each\" hook",
                  "timedOut": false,
                  "duration": 4003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "95a9236c-9c6a-4d71-a257-809b65b1079d",
                  "parentUUID": "0a44d9d7-d7a8-4084-a5a2-2c235571bd93",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of dec type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1059,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"D|0.344\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "7b8cb906-95d7-4841-9089-d24cc793c78b",
                  "parentUUID": "0a44d9d7-d7a8-4084-a5a2-2c235571bd93",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7b8cb906-95d7-4841-9089-d24cc793c78b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1059,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e54e07d6-7ac0-4e43-9506-646dce15deaf",
              "title": "Reveal a meta of height type",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta of height type \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "d0670a67-9074-4c58-a53f-e98c13cdb8d7",
                  "parentUUID": "e54e07d6-7ac0-4e43-9506-646dce15deaf",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of height type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1055,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"H|4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "41f71ae2-e0b6-4c3d-878e-1e9e06a46bda",
                  "parentUUID": "e54e07d6-7ac0-4e43-9506-646dce15deaf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "41f71ae2-e0b6-4c3d-878e-1e9e06a46bda"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1055,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d30057cb-0791-4f4b-ba2e-9651c38cc018",
              "title": "Reveal an already revealed meta",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal an already revealed meta \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "f7239001-c6ca-4951-8690-3e7c8bfd192f",
                  "parentUUID": "d30057cb-0791-4f4b-ba2e-9651c38cc018",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal an already revealed meta Meta Reveal: ",
                  "timedOut": false,
                  "duration": 1046,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"H|4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('failed')\n            expect(res.body.raw_log).to.contain('EntityAlreadyExists')",
                  "err": {},
                  "uuid": "748a68fd-8b2a-4376-b5d9-5a53b379a724",
                  "parentUUID": "d30057cb-0791-4f4b-ba2e-9651c38cc018",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "748a68fd-8b2a-4376-b5d9-5a53b379a724"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1046,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f78da4b7-fac9-406e-a617-ac55a49ba03e",
          "title": "Orders",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
          "file": "/test/tests.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b732e446-f72d-4b9e-a08d-33ec9795347d",
              "title": "Create an asset make order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Create an asset make order \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "95798bc9-7bb3-4610-adc3-d4f51dafae0d",
                  "parentUUID": "b732e446-f72d-4b9e-a08d-33ec9795347d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Orders Create an asset make order Define Asset: ",
                  "timedOut": false,
                  "duration": 1056,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"A_P1:S|\" + \",burn:H|1\",\n                    \"immutableTraits\": \"A_P2:S|\",\n                    \"mutableMetaTraits\": \"A_P3:S|\",\n                    \"immutableMetaTraits\": \"A_P4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "b108f840-cae0-46bd-a5d4-d7fcb5425e5c",
                  "parentUUID": "b732e446-f72d-4b9e-a08d-33ec9795347d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Orders Create an asset make order Mint Asset: ",
                  "timedOut": false,
                  "duration": 1064,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"A_P4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"A_P1:S|,burn:H|1\",\n                    \"immutableProperties\": \"A_P2:S|\",\n                    \"mutableMetaProperties\": \"A_P3:S|\",\n                    \"immutableMetaProperties\": \"A_P4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "e7f59c9a-5605-4491-93f5-f15942e7404e",
                  "parentUUID": "b732e446-f72d-4b9e-a08d-33ec9795347d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Create an asset make order Define Order: ",
                  "timedOut": false,
                  "duration": 1073,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"immutableMetaTraits\": \"Name:S|,Gifts:S|Exchange,OrderID:S|\",\n                    \"immutableTraits\": \"Which Gifts:S|,What Gifts:S|\",\n                    \"mutableMetaTraits\": \"exchangeRate:D|1,makerOwnableSplit:D|0.000000000000000001,expiry:H|1000000,takerID:I|ID,makerSplit:D|0.000000000000000001\",\n                    \"mutableTraits\": \"descriptions:S|\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "6e63f685-d5e3-49d5-a8c5-16770798f220",
                  "parentUUID": "b732e446-f72d-4b9e-a08d-33ec9795347d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Asset Make Order: ",
                  "fullTitle": "Orders Create an asset make order Asset Make Order: ",
                  "timedOut": false,
                  "duration": 1049,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"Name\")\n            let assetID = await assets.queryAsset(\"A_P4\")\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"makerOwnableID\": assetID,\n                    \"takerOwnableID\":\"stake\",\n                    \"expiresIn\":\"100000\",\n                    \"makerOwnableSplit\":\"0.000000000000000001\",\n                    \"immutableMetaProperties\": \"Name:S|Board,Gifts:S|Exchange,OrderID:S|12345\",\n                    \"immutableProperties\": \"Which Gifts:S|Christmas Gift,What Gifts:S|kitty\",\n                    \"mutableMetaProperties\": \"exchangeRate:D|1,makerSplit:D|0.000000000000000001\",\n                    \"mutableProperties\": \"descriptions:S|awesomekitty\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "e92d453b-6999-45ec-9d78-180f31b114aa",
                  "parentUUID": "b732e446-f72d-4b9e-a08d-33ec9795347d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b108f840-cae0-46bd-a5d4-d7fcb5425e5c",
                "e7f59c9a-5605-4491-93f5-f15942e7404e",
                "6e63f685-d5e3-49d5-a8c5-16770798f220",
                "e92d453b-6999-45ec-9d78-180f31b114aa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4242,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c3f37254-2e90-4e0b-8103-e9c5194a1997",
              "title": "Cancel an asset order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Cancel an asset order \"before each\" hook",
                  "timedOut": false,
                  "duration": 4002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "4c6a67ef-ad84-4c05-9f77-e39628c74746",
                  "parentUUID": "c3f37254-2e90-4e0b-8103-e9c5194a1997",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Cancel Order: ",
                  "fullTitle": "Orders Cancel an asset order Cancel Order: ",
                  "timedOut": false,
                  "duration": 1059,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let orderID = await orders.queryOrder(\"Name\")\n            let obj = {\n                \"type\": config.cancelOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"orderID\": orderID\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.cancelOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "1ef6f581-3225-4928-9ae8-f7aeb0f6412a",
                  "parentUUID": "c3f37254-2e90-4e0b-8103-e9c5194a1997",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1ef6f581-3225-4928-9ae8-f7aeb0f6412a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1059,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "69bb0d6d-b017-4f47-be99-46de80673fcf",
              "title": "Take an asset take order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Take an asset take order \"before each\" hook",
                  "timedOut": false,
                  "duration": 4003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "c6a8bb0e-42f6-49f0-ab82-ad01219a436b",
                  "parentUUID": "69bb0d6d-b017-4f47-be99-46de80673fcf",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Make Order: ",
                  "fullTitle": "Orders Take an asset take order Make Order: ",
                  "timedOut": false,
                  "duration": 1064,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"Name\")\n            let assetID = await assets.queryAsset(\"A_P4\")\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"makerOwnableID\": assetID,\n                    \"takerOwnableID\":\"stake\",\n                    \"expiresIn\":\"100000\",\n                    \"makerOwnableSplit\":\"0.000000000000000001\",\n                    \"immutableMetaProperties\": \"Name:S|Board,Gifts:S|Exchange,OrderID:S|12345\",\n                    \"immutableProperties\": \"Which Gifts:S|Christmas Gift,What Gifts:S|kitty\",\n                    \"mutableMetaProperties\": \"exchangeRate:D|1,makerSplit:D|0.000000000000000001\",\n                    \"mutableProperties\": \"descriptions:S|awesomekitty\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "d5e44f2f-99a4-46a4-8ba1-2333c2c58b4c",
                  "parentUUID": "69bb0d6d-b017-4f47-be99-46de80673fcf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Splits send: ",
                  "fullTitle": "Orders Take an asset take order Splits send: ",
                  "timedOut": false,
                  "duration": 1048,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let identityID1 = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let obj = {\n                \"type\": config.sendSplitType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"toID\": identityID1,\n                    \"ownableID\": \"stake\",\n                    \"split\": config.splitval\n                }\n            }\n            \n            var err, res = await chai.request(server)\n                .post(config.sendSplitPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "54c0ae74-720f-417d-8a4a-35b07729c000",
                  "parentUUID": "69bb0d6d-b017-4f47-be99-46de80673fcf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Take Order: ",
                  "fullTitle": "Orders Take an asset take order Take Order: ",
                  "timedOut": false,
                  "duration": 1089,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let orderID = await orders.queryOrder(\"Name\")\n            let obj = {\n                \"type\": config.takeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"takerOwnableSplit\": config.makerownablesplit,\n                    \"orderID\": orderID\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.takeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "9d8e9eec-eb22-4fb1-96de-30f76ecaecce",
                  "parentUUID": "69bb0d6d-b017-4f47-be99-46de80673fcf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d5e44f2f-99a4-46a4-8ba1-2333c2c58b4c",
                "54c0ae74-720f-417d-8a4a-35b07729c000",
                "9d8e9eec-eb22-4fb1-96de-30f76ecaecce"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3201,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e0d2cace-47a9-43ee-a85d-9712d9dfc908",
              "title": "Create a coin make order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Create a coin make order \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "2bd8f9a3-8388-437e-93aa-496a81df3d43",
                  "parentUUID": "e0d2cace-47a9-43ee-a85d-9712d9dfc908",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Orders Create a coin make order Define Asset: ",
                  "timedOut": false,
                  "duration": 1052,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"A_PP1:S|\" + \",burn:H|1\",\n                    \"immutableTraits\": \"A_PP2:S|\",\n                    \"mutableMetaTraits\": \"A_PP3:S|\",\n                    \"immutableMetaTraits\": \"A_PP4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "33ea8664-cf13-472a-a75a-285859f906bf",
                  "parentUUID": "e0d2cace-47a9-43ee-a85d-9712d9dfc908",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Orders Create a coin make order Mint Asset: ",
                  "timedOut": false,
                  "duration": 1091,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"A_PP4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"A_PP1:S|,burn:H|1\",\n                    \"immutableProperties\": \"A_PP2:S|\",\n                    \"mutableMetaProperties\": \"A_PP3:S|\",\n                    \"immutableMetaProperties\": \"A_PP4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "025f22f9-9ffa-40af-99d4-c910ae6b3dc4",
                  "parentUUID": "e0d2cace-47a9-43ee-a85d-9712d9dfc908",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Create a coin make order Define Order: ",
                  "timedOut": false,
                  "duration": 1052,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"immutableMetaTraits\": \"Name1:S|,Gifts1:S|Exchange,OrderID1:S|\",\n                    \"immutableTraits\": \"Which Gifts1:S|,What Gifts1:S|\",\n                    \"mutableMetaTraits\": \"exchangeRate:D|1,makerOwnableSplit:D|0.000000000000000001,expiry:H|1000000,takerID:I|ID,makerSplit:D|0.000000000000000001\",\n                    \"mutableTraits\": \"descriptions1:S|\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "6e4deba2-7576-4592-86a4-b2d6fb6d58ca",
                  "parentUUID": "e0d2cace-47a9-43ee-a85d-9712d9dfc908",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Wrap a coin: ",
                  "fullTitle": "Orders Create a coin make order Wrap a coin: ",
                  "timedOut": false,
                  "duration": 1062,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.wrapCoinType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"coins\": config.coins\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.wrapCoinPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "ea6ae073-3dad-44c2-9a4c-c5d3d39fc094",
                  "parentUUID": "e0d2cace-47a9-43ee-a85d-9712d9dfc908",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Coin Make Order: ",
                  "fullTitle": "Orders Create a coin make order Coin Make Order: ",
                  "timedOut": false,
                  "duration": 1083,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"Name1\")\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"makerOwnableID\": \"stake\",\n                    \"takerOwnableID\":\"stake\",\n                    \"expiresIn\":\"100000\",\n                    \"makerOwnableSplit\":\"0.000000000000000001\",\n                    \"immutableMetaProperties\": \"Name1:S|Board,Gifts1:S|Exchange,OrderID1:S|12345\",\n                    \"immutableProperties\": \"Which Gifts1:S|Christmas Gift,What Gifts1:S|kitty\",\n                    \"mutableMetaProperties\": \"exchangeRate:D|1,makerSplit:D|0.000000000000000001\",\n                    \"mutableProperties\": \"descriptions1:S|awesomekitty\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "7148429d-8e1f-4482-8cf0-7b256af6323e",
                  "parentUUID": "e0d2cace-47a9-43ee-a85d-9712d9dfc908",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "33ea8664-cf13-472a-a75a-285859f906bf",
                "025f22f9-9ffa-40af-99d4-c910ae6b3dc4",
                "6e4deba2-7576-4592-86a4-b2d6fb6d58ca",
                "ea6ae073-3dad-44c2-9a4c-c5d3d39fc094",
                "7148429d-8e1f-4482-8cf0-7b256af6323e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5340,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "58cecddc-cf3c-402d-8862-29ae17f690ab",
              "title": "Cancel a coin order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Cancel a coin order \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "c36a6e45-883c-4a71-b522-967b329f9b75",
                  "parentUUID": "58cecddc-cf3c-402d-8862-29ae17f690ab",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Cancel Order: ",
                  "fullTitle": "Orders Cancel a coin order Cancel Order: ",
                  "timedOut": false,
                  "duration": 1066,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let orderID = await orders.queryOrder(\"Name1\")\n            let obj = {\n                \"type\": config.cancelOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"orderID\": orderID\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.cancelOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "8cc3f9dd-2902-4054-81d1-8ca98a23b515",
                  "parentUUID": "58cecddc-cf3c-402d-8862-29ae17f690ab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8cc3f9dd-2902-4054-81d1-8ca98a23b515"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1066,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b82c3c3f-a157-4b1c-8fe2-711baefe0535",
              "title": "Take a coin take order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Take a coin take order \"before each\" hook",
                  "timedOut": false,
                  "duration": 4004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "728136d3-8a13-4817-919c-6aedde81d2b0",
                  "parentUUID": "b82c3c3f-a157-4b1c-8fe2-711baefe0535",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Coin Make Order: ",
                  "fullTitle": "Orders Take a coin take order Coin Make Order: ",
                  "timedOut": false,
                  "duration": 1062,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"Name1\")\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"makerOwnableID\": \"stake\",\n                    \"takerOwnableID\":\"stake\",\n                    \"expiresIn\":\"100000\",\n                    \"makerOwnableSplit\":\"0.000000000000000001\",\n                    \"immutableMetaProperties\": \"Name1:S|Board,Gifts1:S|Exchange,OrderID1:S|12345\",\n                    \"immutableProperties\": \"Which Gifts1:S|Christmas Gift,What Gifts1:S|kitty\",\n                    \"mutableMetaProperties\": \"exchangeRate:D|1,makerSplit:D|0.000000000000000001\",\n                    \"mutableProperties\": \"descriptions1:S|awesomekitty\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "882b0097-9eb7-460d-b258-bea92a917359",
                  "parentUUID": "b82c3c3f-a157-4b1c-8fe2-711baefe0535",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Coin Take Order: ",
                  "fullTitle": "Orders Take a coin take order Coin Take Order: ",
                  "timedOut": false,
                  "duration": 1046,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let orderID = await orders.queryOrder(\"Name1\")\n            let obj = {\n                \"type\": config.takeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"takerOwnableSplit\": config.makerownablesplit,\n                    \"orderID\": orderID\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.takeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "e973cea7-b099-41cd-a2a2-c78c7a266f02",
                  "parentUUID": "b82c3c3f-a157-4b1c-8fe2-711baefe0535",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "882b0097-9eb7-460d-b258-bea92a917359",
                "e973cea7-b099-41cd-a2a2-c78c7a266f02"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2108,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "97b83328-07fc-41d9-a609-4b4ec3c3a4c9",
              "title": "Create an order with correct takerID",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Create an order with correct takerID \"before each\" hook",
                  "timedOut": false,
                  "duration": 4003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "a5b0aa7c-629d-4443-a354-7e2aba37a67a",
                  "parentUUID": "97b83328-07fc-41d9-a609-4b4ec3c3a4c9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Orders Create an order with correct takerID Define Asset: ",
                  "timedOut": false,
                  "duration": 1043,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"A_PPP1:S|\" + \",burn:H|1\",\n                    \"immutableTraits\": \"A_PPP2:S|\",\n                    \"mutableMetaTraits\": \"A_PPP3:S|\",\n                    \"immutableMetaTraits\": \"A_PPP4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj);\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "ecee1cbc-cbb0-4ea0-b204-7d6693df446d",
                  "parentUUID": "97b83328-07fc-41d9-a609-4b4ec3c3a4c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Orders Create an order with correct takerID Mint Asset: ",
                  "timedOut": false,
                  "duration": 1068,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"A_PPP4\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"A_PPP1:S|,burn:H|1\",\n                    \"immutableProperties\": \"A_PPP2:S|\",\n                    \"mutableMetaProperties\": \"A_PPP3:S|\",\n                    \"immutableMetaProperties\": \"A_PPP4:S|\"\n                }\n            }\n            let err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "cebed52b-2503-475a-959e-49c124b8b075",
                  "parentUUID": "97b83328-07fc-41d9-a609-4b4ec3c3a4c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Create an order with correct takerID Define Order: ",
                  "timedOut": false,
                  "duration": 1058,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"immutableMetaTraits\": \"Name2:S|,Gifts2:S|Exchange,OrderID2:S|\",\n                    \"immutableTraits\": \"Which Gifts2:S|,What Gifts2:S|\",\n                    \"mutableMetaTraits\": \"exchangeRate:D|1,makerOwnableSplit:D|0.000000000000000001,expiry:H|1000000,takerID:I|ID,makerSplit:D|0.000000000000000001\",\n                    \"mutableTraits\": \"descriptions2:S|\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "74b4c5e6-7d07-4b1f-88fb-76e7715409a2",
                  "parentUUID": "97b83328-07fc-41d9-a609-4b4ec3c3a4c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Asset Make Order: ",
                  "fullTitle": "Orders Create an order with correct takerID Asset Make Order: ",
                  "timedOut": false,
                  "duration": 1052,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let identityID1 = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let clsID = await cls.queryClassification(\"Name2\")\n            let assetID = await assets.queryAsset(\"A_PPP4\")\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"makerOwnableID\": assetID,\n                    \"takerOwnableID\":identityID1,\n                    \"expiresIn\":\"100000\",\n                    \"makerOwnableSplit\":\"0.000000000000000001\",\n                    \"immutableMetaProperties\": \"Name2:S|Board,Gifts2:S|Exchange,OrderID2:S|12345\",\n                    \"immutableProperties\": \"Which Gifts2:S|Christmas Gift,What Gifts2:S|kitty\",\n                    \"mutableMetaProperties\": \"exchangeRate:D|1,makerSplit:D|0.000000000000000001\",\n                    \"mutableProperties\": \"descriptions2:S|awesomekitty\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "45253d29-c64b-4b4a-a47f-27c58ea57fc6",
                  "parentUUID": "97b83328-07fc-41d9-a609-4b4ec3c3a4c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Take Order with Incorrect ID: ",
                  "fullTitle": "Orders Create an order with correct takerID Take Order with Incorrect ID: ",
                  "timedOut": false,
                  "duration": 1059,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID1 = await identity.queryIdentity(\"immutableMetaTraits3\")\n            let orderID = await orders.queryOrder(\"Name2\")\n            let obj = {\n                \"type\": config.takeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID1,\n                    \"takerOwnableSplit\": config.makerownablesplit,\n                    \"orderID\": orderID\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.takeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('failed')",
                  "err": {},
                  "uuid": "8841b04f-9076-483b-a572-ec9980c3f25a",
                  "parentUUID": "97b83328-07fc-41d9-a609-4b4ec3c3a4c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Take Order with correct ID: ",
                  "fullTitle": "Orders Create an order with correct takerID Take Order with correct ID: ",
                  "timedOut": false,
                  "duration": 1053,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID1 = await identity.queryIdentity(\"immutableMetaTraits2\")\n            let orderID = await orders.queryOrder(\"Name2\")\n            let obj = {\n                \"type\": config.takeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID1,\n                    \"takerOwnableSplit\": config.makerownablesplit,\n                    \"orderID\": orderID\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.takeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.contain('failed')",
                  "err": {},
                  "uuid": "85e2fb44-9691-41a1-9682-0bdf6e31c022",
                  "parentUUID": "97b83328-07fc-41d9-a609-4b4ec3c3a4c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ecee1cbc-cbb0-4ea0-b204-7d6693df446d",
                "cebed52b-2503-475a-959e-49c124b8b075",
                "74b4c5e6-7d07-4b1f-88fb-76e7715409a2",
                "45253d29-c64b-4b4a-a47f-27c58ea57fc6",
                "8841b04f-9076-483b-a572-ec9980c3f25a",
                "85e2fb44-9691-41a1-9682-0bdf6e31c022"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6333,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "47e8ca4d-b1b3-4344-adb6-061ed0928663",
              "title": "Sell assets with splits, where taker gives more splits than he is supposed to",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/tests.js",
              "file": "/test/tests.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to \"before each\" hook",
                  "timedOut": false,
                  "duration": 4003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(5000)\nsetTimeout(function () {\n    done()\n}, 4000)",
                  "err": {},
                  "uuid": "fb353cfc-000b-4987-b571-1c78100b9e4d",
                  "parentUUID": "47e8ca4d-b1b3-4344-adb6-061ed0928663",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Define Asset: ",
                  "timedOut": false,
                  "duration": 1062,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"mutableTraits\": \"ASSETS10:S|num1\" + \",burn:H|1\",\n                    \"immutableTraits\": \"ASSETS11:S|\",\n                    \"mutableMetaTraits\": \"ASSETS12:S|num3\",\n                    \"immutableMetaTraits\": \"ASSETS13:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "c98e2841-93df-4028-909c-e08872615b3a",
                  "parentUUID": "47e8ca4d-b1b3-4344-adb6-061ed0928663",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Mint Asset: ",
                  "timedOut": false,
                  "duration": 1057,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"ASSETS13\")\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": identityID,\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"mutableProperties\": \"ASSETS10:S|num1\" + \",burn:H|1\",\n                    \"immutableProperties\": \"ASSETS11:S|abc\",\n                    \"mutableMetaProperties\": \"ASSETS12:S|num3\",\n                    \"immutableMetaProperties\": \"ASSETS13:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "74af0ecc-19d0-4ff6-9f72-52fe8e5fa32c",
                  "parentUUID": "47e8ca4d-b1b3-4344-adb6-061ed0928663",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Define Order: ",
                  "timedOut": false,
                  "duration": 1052,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let obj = {\n                \"type\": config.defineOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"immutableMetaTraits\": \"Name3:S|,Gifts3:S|Exchange,OrderID3:S|\",\n                    \"immutableTraits\": \"Which Gifts3:S|,What Gifts3:S|\",\n                    \"mutableMetaTraits\": \"exchangeRate:D|1,makerOwnableSplit:D|0.000000000000000001,expiry:H|1000000,takerID:I|ID,makerSplit:D|0.000000000000000001\",\n                    \"mutableTraits\": \"descriptions3:S|\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "682c9c1d-1435-4c8a-b3b1-7e86f38bc7a4",
                  "parentUUID": "47e8ca4d-b1b3-4344-adb6-061ed0928663",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Make Order: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Make Order: ",
                  "timedOut": false,
                  "duration": 1084,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let clsID = await cls.queryClassification(\"Name3\")\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"classificationID\": clsID,\n                    \"makerOwnableID\": \"stake\",\n                    \"takerOwnableID\":\"stake\",\n                    \"expiresIn\":\"100000\",\n                    \"makerOwnableSplit\":\"100\",\n                    \"immutableMetaProperties\": \"Name3:S|Board,Gifts3:S|Exchange,OrderID3:S|12345\",\n                    \"immutableProperties\": \"Which Gifts3:S|Christmas Gift,What Gifts3:S|kitty\",\n                    \"mutableMetaProperties\": \"exchangeRate:D|1,makerSplit:D|0.000000000000000001\",\n                    \"mutableProperties\": \"descriptions3:S|awesomekitty\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "b92d3d08-98c7-4e26-b3dd-21c4f713fe54",
                  "parentUUID": "47e8ca4d-b1b3-4344-adb6-061ed0928663",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Take Order: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Take Order: ",
                  "timedOut": false,
                  "duration": 1060,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let identityID = await identity.queryIdentity(\"immutableMetaTraits1\")\n            let orderID = await orders.queryOrder(\"Name3\")\n            let obj = {\n                \"type\": config.takeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": identityID,\n                    \"takerOwnableSplit\": \"200\",\n                    \"orderID\": orderID\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.takeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            expect(res.body.raw_log).to.not.contain('failed')\n            expect(res.body.raw_log).to.not.contain('error')",
                  "err": {},
                  "uuid": "95986fd3-f543-4e5b-b67c-97819db54882",
                  "parentUUID": "47e8ca4d-b1b3-4344-adb6-061ed0928663",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c98e2841-93df-4028-909c-e08872615b3a",
                "74af0ecc-19d0-4ff6-9f72-52fe8e5fa32c",
                "682c9c1d-1435-4c8a-b3b1-7e86f38bc7a4",
                "b92d3d08-98c7-4e26-b3dd-21c4f713fe54",
                "95986fd3-f543-4e5b-b67c-97819db54882"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5315,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}