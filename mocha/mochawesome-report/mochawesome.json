{
  "stats": {
    "suites": 48,
    "tests": 248,
    "passes": 246,
    "pending": 0,
    "failures": 2,
    "start": "2020-10-01T11:43:46.011Z",
    "end": "2020-10-01T11:56:16.502Z",
    "duration": 750491,
    "testsRegistered": 248,
    "passPercent": 99.19354838709677,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "400c6bbd-a3d8-4100-9644-621ad5633332",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a528ab7b-12cf-49bf-8590-dc8f25706fdf",
          "title": "Account Creation, Sign and Broadcast for User1",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
          "file": "/test/testCases.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Account Creation, Sign and Broadcast for User1 \"before each\" hook",
              "timedOut": false,
              "duration": 3001,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
              "err": {},
              "uuid": "a818807e-aea1-471f-b142-95195bd2cf18",
              "parentUUID": "a528ab7b-12cf-49bf-8590-dc8f25706fdf",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "it should create an account for: 5946a669dc82c20f5c415f6a43597f71",
              "fullTitle": "Account Creation, Sign and Broadcast for User1 it should create an account for: 5946a669dc82c20f5c415f6a43597f71",
              "timedOut": false,
              "duration": 163,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let name = {\n            name: name1\n        }\n        var err, res = await chai.request(server)\n            .post(config.keysAdd)\n            .send(name)\n        res.should.have.status(200);\n        res.body.should.be.a('object');\n        expect(res.body.result.success).to.be.true\n        expect(res.body.result.keyOutput.address).to.not.equal(null)\n        expect(res.body.result.keyOutput.address).to.not.equal('')\n        names1.address = res.body.result.keyOutput.address",
              "err": {},
              "uuid": "29f75df5-8d93-452d-8333-a68bdd6c5ba8",
              "parentUUID": "a528ab7b-12cf-49bf-8590-dc8f25706fdf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "5946a669dc82c20f5c415f6a43597f71 should be able to signTx ",
              "fullTitle": "Account Creation, Sign and Broadcast for User1 5946a669dc82c20f5c415f6a43597f71 should be able to signTx ",
              "timedOut": false,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = {\n            \"baseReq\": {\n                \"from\": config.testAccountAddress,\n                \"chain_id\": config.chain_id\n            },\n            \"type\": \"cosmos-sdk/StdTx\",\n            \"value\": {\n                \"msg\": [\n                    {\n                        \"type\": \"cosmos-sdk/MsgSend\",\n                        \"value\": {\n                            \"from_address\": config.testAccountAddress,\n                            \"to_address\": names1.address,\n                            \"amount\": [\n                                {\n                                    \"denom\": \"stake\",\n                                    \"amount\": \"1000\"\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"fee\": {\n                    \"amount\": [],\n                    \"gas\": \"200000\"\n                },\n                \"signatures\": null,\n                \"memo\": \"\"\n            }\n        }\n        var err, res = await chai.request(server)\n            .post(config.signTx)\n            .send(obj)\n        res.should.have.status(200);\n        res.body.should.be.a('object');\n        expect(res.body.result.success).to.be.true\n        names1.typekey = res.body.result.tx.signatures[0].pub_key.type\n        names1.value = res.body.result.tx.signatures[0].pub_key.value\n        names1.signature = res.body.result.tx.signatures[0].signature",
              "err": {},
              "uuid": "599d94ef-70aa-486a-b035-312bdc982b9e",
              "parentUUID": "a528ab7b-12cf-49bf-8590-dc8f25706fdf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "5946a669dc82c20f5c415f6a43597f71 should be able to broadcastTx ",
              "fullTitle": "Account Creation, Sign and Broadcast for User1 5946a669dc82c20f5c415f6a43597f71 should be able to broadcastTx ",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = {\n            \"tx\": {\n                \"msg\": [\n                    {\n                        \"type\": \"cosmos-sdk/MsgSend\",\n                        \"value\": {\n                            \"from_address\": config.testAccountAddress,\n                            \"to_address\": names1.address,\n                            \"amount\": [\n                                {\n                                    \"denom\": \"stake\",\n                                    \"amount\": \"1000\"\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"fee\": {\n                    \"amount\": [],\n                    \"gas\": \"200000\"\n                },\n                \"signatures\": [\n                    {\n                        \"pub_key\": {\n                            \"type\": names1.typekey,\n                            \"value\": names1.value\n                        },\n                        \"signature\": names1.signature\n                    }\n                ],\n                \"memo\": \"\"\n            },\n            \"mode\": \"sync\"\n        }\n        var err, res = await chai.request(server)\n            .post(config.broadcastTx)\n            .send(obj)\n        res.should.have.status(200);\n        res.body.should.be.a('object');\n        expect(res.body.txhash).to.not.equal(null)\n        expect(res.body.txhash).to.not.equal('')\n        var hash = res.body.txhash\n        var err, res = await chai.request(server)\n            .get('/txs/' + hash)",
              "err": {},
              "uuid": "60b4f136-2322-4ba6-9d9e-9e37778bcd6d",
              "parentUUID": "a528ab7b-12cf-49bf-8590-dc8f25706fdf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "29f75df5-8d93-452d-8333-a68bdd6c5ba8",
            "599d94ef-70aa-486a-b035-312bdc982b9e",
            "60b4f136-2322-4ba6-9d9e-9e37778bcd6d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 218,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "837765f1-8b19-4117-bacf-bee60a6d1bc2",
          "title": "Account Creation, Sign and Broadcast for User2",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
          "file": "/test/testCases.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Account Creation, Sign and Broadcast for User2 \"before each\" hook",
              "timedOut": false,
              "duration": 3004,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
              "err": {},
              "uuid": "6a61d9c4-39bf-4dfc-becf-0cc0c1c73e9b",
              "parentUUID": "837765f1-8b19-4117-bacf-bee60a6d1bc2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "it should create an account for: 8e478208a9558f3b96a892cab3bb53a5",
              "fullTitle": "Account Creation, Sign and Broadcast for User2 it should create an account for: 8e478208a9558f3b96a892cab3bb53a5",
              "timedOut": false,
              "duration": 167,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let name = {\n            name: name2\n        }\n        var err, res = await chai.request('http://localhost:1317')\n            .post(config.keysAdd)\n            .send(name)\n        res.should.have.status(200);\n        res.body.should.be.a('object');\n        expect(res.body.result.success).to.be.true\n        expect(res.body.result.keyOutput.address).to.not.equal(null)\n        expect(res.body.result.keyOutput.address).to.not.equal('')\n        names2.address = res.body.result.keyOutput.address",
              "err": {},
              "uuid": "ad5c5a58-f104-44e9-b9fc-22fec50f0a2e",
              "parentUUID": "837765f1-8b19-4117-bacf-bee60a6d1bc2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "8e478208a9558f3b96a892cab3bb53a5 should be able to signTx ",
              "fullTitle": "Account Creation, Sign and Broadcast for User2 8e478208a9558f3b96a892cab3bb53a5 should be able to signTx ",
              "timedOut": false,
              "duration": 43,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = {\n            \"baseReq\": {\n                \"from\": config.testAccountAddress,\n                \"chain_id\": config.chain_id\n            },\n            \"type\": \"cosmos-sdk/StdTx\",\n            \"value\": {\n                \"msg\": [\n                    {\n                        \"type\": \"cosmos-sdk/MsgSend\",\n                        \"value\": {\n                            \"from_address\": config.testAccountAddress,\n                            \"to_address\": names2.address,\n                            \"amount\": [\n                                {\n                                    \"denom\": \"stake\",\n                                    \"amount\": \"1000\"\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"fee\": {\n                    \"amount\": [],\n                    \"gas\": \"200000\"\n                },\n                \"signatures\": null,\n                \"memo\": \"\"\n            }\n        }\n        var err, res = await chai.request(server)\n            .post(config.signTx)\n            .send(obj)\n        res.should.have.status(200);\n        res.body.should.be.a('object');\n        expect(res.body.result.success).to.be.true\n        names2.typekey = res.body.result.tx.signatures[0].pub_key.type\n        names2.value = res.body.result.tx.signatures[0].pub_key.value\n        names2.signature = res.body.result.tx.signatures[0].signature",
              "err": {},
              "uuid": "7f5c0a0e-4626-4423-a00e-d9bb9388469a",
              "parentUUID": "837765f1-8b19-4117-bacf-bee60a6d1bc2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "8e478208a9558f3b96a892cab3bb53a5 should be able to broadcastTx ",
              "fullTitle": "Account Creation, Sign and Broadcast for User2 8e478208a9558f3b96a892cab3bb53a5 should be able to broadcastTx ",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = {\n            \"tx\": {\n                \"msg\": [\n                    {\n                        \"type\": \"cosmos-sdk/MsgSend\",\n                        \"value\": {\n                            \"from_address\": config.testAccountAddress,\n                            \"to_address\": names2.address,\n                            \"amount\": [\n                                {\n                                    \"denom\": \"stake\",\n                                    \"amount\": \"1000\"\n                                }\n                            ]\n                        }\n                    }\n                ],\n                \"fee\": {\n                    \"amount\": [],\n                    \"gas\": \"200000\"\n                },\n                \"signatures\": [\n                    {\n                        \"pub_key\": {\n                            \"type\": names2.typekey,\n                            \"value\": names2.value\n                        },\n                        \"signature\": names2.signature\n                    }\n                ],\n                \"memo\": \"\"\n            },\n            \"mode\": \"sync\"\n        }\n        var err, res = await chai.request(server)\n            .post(config.broadcastTx)\n            .send(obj)\n        res.should.have.status(200);\n        res.body.should.be.a('object');\n        expect(res.body.txhash).to.not.equal(null)\n        expect(res.body.txhash).to.not.equal('')\n        var hash = res.body.txhash\n        var err, res = await chai.request(server)\n            .get('/txs/' + hash)",
              "err": {},
              "uuid": "8003bb17-d9ee-44e3-a955-6bd7080a092c",
              "parentUUID": "837765f1-8b19-4117-bacf-bee60a6d1bc2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ad5c5a58-f104-44e9-b9fc-22fec50f0a2e",
            "7f5c0a0e-4626-4423-a00e-d9bb9388469a",
            "8003bb17-d9ee-44e3-a955-6bd7080a092c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 225,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0bdcb642-d4ea-4735-b880-0912b8bc87cb",
          "title": "Nub Tx",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
          "file": "/test/testCases.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Nub Tx \"before each\" hook",
              "timedOut": false,
              "duration": 3003,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
              "err": {},
              "uuid": "ec7a8b46-c5a1-4051-9a38-943e480b7969",
              "parentUUID": "0bdcb642-d4ea-4735-b880-0912b8bc87cb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "nubTx: ",
              "fullTitle": "Nub Tx nubTx: ",
              "timedOut": false,
              "duration": 41,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = {\n            \"type\": config.nubType,\n            \"value\": {\n                \"baseReq\": {\n                    \"from\": config.testAccountAddress,\n                    \"chain_id\": config.chain_id\n                },\n                \"nubID\": config.nubID\n            }\n        }\n        var err, res = await chai.request(server)\n            .post(config.nubPath)\n            .send(obj)\n        res.should.have.status(200);\n        res.body.should.be.a('object');\n        expect(res.body.txhash).to.not.equal(null)\n        expect(res.body.txhash).to.not.equal('')\n        txHash = res.body.txhash",
              "err": {},
              "uuid": "4d871a2f-6d54-4c01-8ea1-0d2ad2b7c61c",
              "parentUUID": "0bdcb642-d4ea-4735-b880-0912b8bc87cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Query Tx: ",
              "fullTitle": "Nub Tx Query Tx: ",
              "timedOut": false,
              "duration": 18,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
              "err": {},
              "uuid": "1beab697-18c7-4b4f-a3c4-43b788f895d9",
              "parentUUID": "0bdcb642-d4ea-4735-b880-0912b8bc87cb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4d871a2f-6d54-4c01-8ea1-0d2ad2b7c61c",
            "1beab697-18c7-4b4f-a3c4-43b788f895d9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 59,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "caabd590-60da-488c-9c61-dbba963fd4e1",
          "title": "Identity",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
          "file": "/test/testCases.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0cbcea2b-0855-4441-b484-e29b83a8dbc1",
              "title": "Issue Identity 1",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Issue Identity 1 \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "9df8d492-a497-4ad9-9ac4-9305341488a4",
                  "parentUUID": "0cbcea2b-0855-4441-b484-e29b83a8dbc1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Identity Issue Identity 1 Query Identity: ",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == config.nubID) {\n                    data.clasificationID = value.value.id.value.classificationID.value.idString\n                    data.hashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "a3bd2d02-6d66-4319-94f5-2f0e0bbcba01",
                  "parentUUID": "0cbcea2b-0855-4441-b484-e29b83a8dbc1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Identity: ",
                  "fullTitle": "Identity Issue Identity 1 Define Identity: ",
                  "timedOut": false,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.defineIdentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"mutableTraits\": \"mutableTraits1:S|num1\",\n                    \"immutableTraits\": \"immutableTraits1:S|\",\n                    \"mutableMetaTraits\": \"mutableMetaTraits1:S|num3\",\n                    \"immutableMetaTraits\": \"immutableMetaTraits1:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "75ea70ad-dc54-4e0c-aebc-979d56b4e7ce",
                  "parentUUID": "0cbcea2b-0855-4441-b484-e29b83a8dbc1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Issue Identity 1 Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "32cb4283-eee6-46e2-a199-5cf9b164e641",
                  "parentUUID": "0cbcea2b-0855-4441-b484-e29b83a8dbc1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Identity Issue Identity 1 Query Classification: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qClassification)\n            var list = res.body.result.value.classifications.value.list\n            list.forEach(function (value) {\n                if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.chainID = value.value.id.value.chainID.value.idString\n                    data.clshashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "de47d994-b3be-44a3-ab83-370bcbd09f92",
                  "parentUUID": "0cbcea2b-0855-4441-b484-e29b83a8dbc1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Issue Identity: ",
                  "fullTitle": "Identity Issue Identity 1 Issue Identity: ",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.issuedentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": config.testAccountAddress,\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"classificationID\": data.chainID + '.' + data.clshashID,\n                    \"mutableProperties\": \"mutableTraits1:S|num1\",\n                    \"immutableProperties\": \"immutableTraits1:S|\",\n                    \"mutableMetaProperties\": \"mutableMetaTraits1:S|num3\",\n                    \"immutableMetaProperties\": \"immutableMetaTraits1:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.issueIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "77f0f634-a58a-4a68-9bdf-7bc23bb5449d",
                  "parentUUID": "0cbcea2b-0855-4441-b484-e29b83a8dbc1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Issue Identity 1 Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "cab8ffa0-e879-46b7-b6c9-b4bfe63fc0a0",
                  "parentUUID": "0cbcea2b-0855-4441-b484-e29b83a8dbc1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a3bd2d02-6d66-4319-94f5-2f0e0bbcba01",
                "75ea70ad-dc54-4e0c-aebc-979d56b4e7ce",
                "32cb4283-eee6-46e2-a199-5cf9b164e641",
                "de47d994-b3be-44a3-ab83-370bcbd09f92",
                "77f0f634-a58a-4a68-9bdf-7bc23bb5449d",
                "cab8ffa0-e879-46b7-b6c9-b4bfe63fc0a0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 106,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9255c967-0bec-4d7c-aaa5-a5e9c2398334",
              "title": "Provision Key",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Provision Key \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "e5950e85-ebaf-49f5-8bfd-36bf7171443e",
                  "parentUUID": "9255c967-0bec-4d7c-aaa5-a5e9c2398334",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Identity Provision Key Query Identity: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == config.nubID) {\n                    data.clasificationID = value.value.id.value.classificationID.value.idString\n                    data.hashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "278ae2a9-9d5e-42dc-99ed-671798401e9d",
                  "parentUUID": "9255c967-0bec-4d7c-aaa5-a5e9c2398334",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Provision Key: ",
                  "fullTitle": "Identity Provision Key Provision Key: ",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.provisionKeyType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": names1.address,\n                    \"identityID\": data.clasificationID + '|' + data.hashID\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.provisionKeyPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "756f08a3-27e8-4a14-9d0f-388f5db09c6e",
                  "parentUUID": "9255c967-0bec-4d7c-aaa5-a5e9c2398334",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Provision Key Query Tx: ",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "d178ddad-9439-45a2-b5ac-045efcb83c91",
                  "parentUUID": "9255c967-0bec-4d7c-aaa5-a5e9c2398334",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "278ae2a9-9d5e-42dc-99ed-671798401e9d",
                "756f08a3-27e8-4a14-9d0f-388f5db09c6e",
                "d178ddad-9439-45a2-b5ac-045efcb83c91"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 73,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "080d6bd0-cbae-40cb-b590-953200f09a87",
              "title": "Unprovision Key",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Unprovision Key \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "cba68b9f-6959-4cc6-b883-bf43eaf592a0",
                  "parentUUID": "080d6bd0-cbae-40cb-b590-953200f09a87",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Identity Unprovision Key Query Identity: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == config.nubID) {\n                    data.clasificationID = value.value.id.value.classificationID.value.idString\n                    data.hashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "0c278174-95be-4a9d-875a-4579bbf394bc",
                  "parentUUID": "080d6bd0-cbae-40cb-b590-953200f09a87",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Unprovision Key: ",
                  "fullTitle": "Identity Unprovision Key Unprovision Key: ",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.unprovisionKeyType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": names1.address,\n                    \"identityID\": data.clasificationID + '|' + data.hashID\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.unprovisionKeyPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "db71ca09-3950-41ab-8d23-e3d392436008",
                  "parentUUID": "080d6bd0-cbae-40cb-b590-953200f09a87",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Unprovision Key Query Tx: ",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "5a1f8d44-521c-45c3-9cc1-6ca4e7444fea",
                  "parentUUID": "080d6bd0-cbae-40cb-b590-953200f09a87",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0c278174-95be-4a9d-875a-4579bbf394bc",
                "db71ca09-3950-41ab-8d23-e3d392436008",
                "5a1f8d44-521c-45c3-9cc1-6ca4e7444fea"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 68,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ea0d062d-491f-4ce7-b23d-78bd25bba930",
              "title": "Provision an unprovision Key",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Provision an unprovision Key \"before each\" hook",
                  "timedOut": false,
                  "duration": 3003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "fc150cdf-06c8-456e-ad9a-84da64cbd61a",
                  "parentUUID": "ea0d062d-491f-4ce7-b23d-78bd25bba930",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Identity Provision an unprovision Key Query Identity: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == config.nubID) {\n                    data.clasificationID = value.value.id.value.classificationID.value.idString\n                    data.hashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "5b7ab0e0-c402-4da9-92bf-96dc7e4fdfeb",
                  "parentUUID": "ea0d062d-491f-4ce7-b23d-78bd25bba930",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Provision an unprovision Key: ",
                  "fullTitle": "Identity Provision an unprovision Key Provision an unprovision Key: ",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.provisionKeyType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": names1.address,\n                    \"identityID\": data.clasificationID + '|' + data.hashID\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.provisionKeyPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "3a43e3b4-9426-4973-ba63-34e3a0549e33",
                  "parentUUID": "ea0d062d-491f-4ce7-b23d-78bd25bba930",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Provision an unprovision Key Query Tx: ",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "c79992dd-0168-41c7-9d65-3c01297c445c",
                  "parentUUID": "ea0d062d-491f-4ce7-b23d-78bd25bba930",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5b7ab0e0-c402-4da9-92bf-96dc7e4fdfeb",
                "3a43e3b4-9426-4973-ba63-34e3a0549e33",
                "c79992dd-0168-41c7-9d65-3c01297c445c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 49,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1a57eb6e-113b-4e5a-af06-7da8eea88114",
              "title": "Issue Identity 2",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Issue Identity 2 \"before each\" hook",
                  "timedOut": false,
                  "duration": 3002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "3d655cdf-9aab-4299-87a4-55703cbef089",
                  "parentUUID": "1a57eb6e-113b-4e5a-af06-7da8eea88114",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Identity Issue Identity 2 Query Identity: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == config.nubID) {\n                    data.clasificationID = value.value.id.value.classificationID.value.idString\n                    data.hashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "3352f03a-9d98-456a-9f04-360d47841e0b",
                  "parentUUID": "1a57eb6e-113b-4e5a-af06-7da8eea88114",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Identity: ",
                  "fullTitle": "Identity Issue Identity 2 Define Identity: ",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.defineIdentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"mutableTraits\": \"mutableTraits2:S|num1\",\n                    \"immutableTraits\": \"immutableTraits2:S|\",\n                    \"mutableMetaTraits\": \"mutableMetaTraits2:S|num3\",\n                    \"immutableMetaTraits\": \"immutableMetaTraits2:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "a9f7a6f9-428e-4203-af3d-caf48ca79f5a",
                  "parentUUID": "1a57eb6e-113b-4e5a-af06-7da8eea88114",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Issue Identity 2 Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "d42f3343-b1fb-4461-8787-3f339fd9f521",
                  "parentUUID": "1a57eb6e-113b-4e5a-af06-7da8eea88114",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Identity Issue Identity 2 Query Classification: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qClassification)\n            var list = res.body.result.value.classifications.value.list\n            list.forEach(function (value) {\n                if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits2\") {\n                    data.chainID = value.value.id.value.chainID.value.idString\n                    data.clshashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "aa884448-1b19-4a55-b4a5-3432cd7b603b",
                  "parentUUID": "1a57eb6e-113b-4e5a-af06-7da8eea88114",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Issue Identity 2: ",
                  "fullTitle": "Identity Issue Identity 2 Issue Identity 2: ",
                  "timedOut": false,
                  "duration": 59,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.issuedentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": config.testAccountAddress,\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"classificationID\": data.chainID + '.' + data.clshashID,\n                    \"mutableProperties\": \"mutableTraits2:S|num1\",\n                    \"immutableProperties\": \"immutableTraits2:S|\",\n                    \"mutableMetaProperties\": \"mutableMetaTraits2:S|num3\",\n                    \"immutableMetaProperties\": \"immutableMetaTraits2:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.issueIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "e6f4d6de-27ee-4917-9557-598c80913004",
                  "parentUUID": "1a57eb6e-113b-4e5a-af06-7da8eea88114",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Issue Identity 2 Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "c14ab129-5330-4612-b8a4-087f5e0dc580",
                  "parentUUID": "1a57eb6e-113b-4e5a-af06-7da8eea88114",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3352f03a-9d98-456a-9f04-360d47841e0b",
                "a9f7a6f9-428e-4203-af3d-caf48ca79f5a",
                "d42f3343-b1fb-4461-8787-3f339fd9f521",
                "aa884448-1b19-4a55-b4a5-3432cd7b603b",
                "e6f4d6de-27ee-4917-9557-598c80913004",
                "c14ab129-5330-4612-b8a4-087f5e0dc580"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 130,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "47d4b560-f58c-4353-8a8c-88453a928b73",
              "title": "Issue Identity 3",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Identity Issue Identity 3 \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "197ec86e-4fe5-4e4a-91e0-40628c63d639",
                  "parentUUID": "47d4b560-f58c-4353-8a8c-88453a928b73",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Identity Issue Identity 3 Query Identity: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == config.nubID) {\n                    data.clasificationID = value.value.id.value.classificationID.value.idString\n                    data.hashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "dbcb4cb3-1b7e-4996-9b9b-02ff7a28bf99",
                  "parentUUID": "47d4b560-f58c-4353-8a8c-88453a928b73",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Identity: ",
                  "fullTitle": "Identity Issue Identity 3 Define Identity: ",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.defineIdentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"mutableTraits\": \"mutableTraits3:S|num1\",\n                    \"immutableTraits\": \"immutableTraits3:S|\",\n                    \"mutableMetaTraits\": \"mutableMetaTraits3:S|num3\",\n                    \"immutableMetaTraits\": \"immutableMetaTraits3:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "82d877cf-40f7-44f7-9c50-f9dfef9d0e5a",
                  "parentUUID": "47d4b560-f58c-4353-8a8c-88453a928b73",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Issue Identity 3 Query Tx: ",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "cfc26c00-644b-417b-baf9-165cfccffbde",
                  "parentUUID": "47d4b560-f58c-4353-8a8c-88453a928b73",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Identity Issue Identity 3 Query Classification: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qClassification)\n            var list = res.body.result.value.classifications.value.list\n            list.forEach(function (value) {\n                if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits3\") {\n                    data.chainID = value.value.id.value.chainID.value.idString\n                    data.clshashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "a951dd65-f4b4-41bb-b6d6-911d3017f902",
                  "parentUUID": "47d4b560-f58c-4353-8a8c-88453a928b73",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Issue Identity 3: ",
                  "fullTitle": "Identity Issue Identity 3 Issue Identity 3: ",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.issuedentityType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"to\": config.testAccountAddress,\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"classificationID\": data.chainID + '.' + data.clshashID,\n                    \"mutableProperties\": \"mutableTraits3:S|num1\",\n                    \"immutableProperties\": \"immutableTraits3:S|\",\n                    \"mutableMetaProperties\": \"mutableMetaTraits3:S|num3\",\n                    \"immutableMetaProperties\": \"immutableMetaTraits3:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.issueIdentityPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "cb36f452-f6e2-41a9-b3cc-e994f40e14c6",
                  "parentUUID": "47d4b560-f58c-4353-8a8c-88453a928b73",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Identity Issue Identity 3 Query Tx: ",
                  "timedOut": false,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "a5828cdb-b4e0-4be0-b4b3-db14d7f3b776",
                  "parentUUID": "47d4b560-f58c-4353-8a8c-88453a928b73",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dbcb4cb3-1b7e-4996-9b9b-02ff7a28bf99",
                "82d877cf-40f7-44f7-9c50-f9dfef9d0e5a",
                "cfc26c00-644b-417b-baf9-165cfccffbde",
                "a951dd65-f4b4-41bb-b6d6-911d3017f902",
                "cb36f452-f6e2-41a9-b3cc-e994f40e14c6",
                "a5828cdb-b4e0-4be0-b4b3-db14d7f3b776"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 166,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0f71ea2c-be48-496a-88cc-8f098cdd2a0b",
          "title": "Assets",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
          "file": "/test/testCases.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8b0fd67b-8324-4a14-b3e0-ff9eeb74e5ce",
              "title": "Mint Asset",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset \"before each\" hook",
                  "timedOut": false,
                  "duration": 3003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "ac804b23-c685-4030-b610-8708b5ebbff9",
                  "parentUUID": "8b0fd67b-8324-4a14-b3e0-ff9eeb74e5ce",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mint Asset Query Identity: ",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.clasificationID = value.value.id.value.classificationID.value.idString\n                    data.hashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "36e04391-2064-4180-b6fe-e3c461796177",
                  "parentUUID": "8b0fd67b-8324-4a14-b3e0-ff9eeb74e5ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset Define Asset: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"mutableTraits\": \"ASSET1:S|num1\" + \",burn:H|1\",\n                    \"immutableTraits\": \"ASSET2:S|\",\n                    \"mutableMetaTraits\": \"ASSET3:S|num3\",\n                    \"immutableMetaTraits\": \"ASSET4:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "63b97056-0201-4eca-b87d-452514bd5462",
                  "parentUUID": "8b0fd67b-8324-4a14-b3e0-ff9eeb74e5ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset Query Tx: ",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "ed807a81-f20f-4108-9265-0c70995a6792",
                  "parentUUID": "8b0fd67b-8324-4a14-b3e0-ff9eeb74e5ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Mint Asset Query Classification: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qClassification)\n            var list = res.body.result.value.classifications.value.list\n            list.forEach(function (value) {\n                if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET4\") {\n                    data.chainID = value.value.id.value.chainID.value.idString\n                    data.clshashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "26f364fe-45cf-424c-a71a-8dcd4194c971",
                  "parentUUID": "8b0fd67b-8324-4a14-b3e0-ff9eeb74e5ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset Mint Asset: ",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": data.clasificationID + '|' + data.hashID,\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"classificationID\": data.chainID + '.' + data.clshashID,\n                    \"mutableProperties\": \"ASSET1:S|num1\" + \",burn:H|1\",\n                    \"immutableProperties\": \"ASSET2:S|num2\",\n                    \"mutableMetaProperties\": \"ASSET3:S|num3\",\n                    \"immutableMetaProperties\": \"ASSET4:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "b7a50b93-b0a8-4862-990e-35f542cbfa60",
                  "parentUUID": "8b0fd67b-8324-4a14-b3e0-ff9eeb74e5ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset Query Tx: ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "42e446a1-f935-4edd-86eb-dbdf86e1a9b2",
                  "parentUUID": "8b0fd67b-8324-4a14-b3e0-ff9eeb74e5ce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "36e04391-2064-4180-b6fe-e3c461796177",
                "63b97056-0201-4eca-b87d-452514bd5462",
                "ed807a81-f20f-4108-9265-0c70995a6792",
                "26f364fe-45cf-424c-a71a-8dcd4194c971",
                "b7a50b93-b0a8-4862-990e-35f542cbfa60",
                "42e446a1-f935-4edd-86eb-dbdf86e1a9b2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 145,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c229917d-fe8f-404d-b2cb-cb76596a73e7",
              "title": "Mutate Asset",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mutate Asset \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "c495ca46-939e-40d5-9698-13e1ab0913a9",
                  "parentUUID": "c229917d-fe8f-404d-b2cb-cb76596a73e7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mutate Asset Query Identity: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.iclasificationID = value.value.id.value.classificationID.value.idString\n                    data.ihashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "3f77b70d-e343-4750-9042-ab6f824887d3",
                  "parentUUID": "c229917d-fe8f-404d-b2cb-cb76596a73e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Assets Mutate Asset Query Asset: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qAsset)\n            var list = res.body.result.value.assets.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET4\") {\n                    data.aclasificationID = value.value.id.value.classificationID.value.idString\n                    data.ahashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "fcd139cc-30e6-47f7-94fe-a06a2f018778",
                  "parentUUID": "c229917d-fe8f-404d-b2cb-cb76596a73e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset: ",
                  "fullTitle": "Assets Mutate Asset Mutate Asset: ",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.iclasificationID + '|' + data.ihashID,\n                    \"assetID\": data.aclasificationID + '|' + data.ahashID,\n                    \"mutableProperties\": \"ASSET1:S|\",\n                    \"mutableMetaProperties\": \"ASSET3:S|num3\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "e6d60041-3ff8-4c7d-aa83-152c3c109359",
                  "parentUUID": "c229917d-fe8f-404d-b2cb-cb76596a73e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mutate Asset Query Tx: ",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "d69a58e4-f449-464c-8670-64ec02041919",
                  "parentUUID": "c229917d-fe8f-404d-b2cb-cb76596a73e7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3f77b70d-e343-4750-9042-ab6f824887d3",
                "fcd139cc-30e6-47f7-94fe-a06a2f018778",
                "e6d60041-3ff8-4c7d-aa83-152c3c109359",
                "d69a58e4-f449-464c-8670-64ec02041919"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 80,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "02be858e-a2da-4413-a583-b5d26c123709",
              "title": "Mint Asset with meta properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with meta properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 3004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "22203cb3-19ae-425e-b701-d4015bfe9562",
                  "parentUUID": "02be858e-a2da-4413-a583-b5d26c123709",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mint Asset with meta properties Query Identity: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.clasificationID = value.value.id.value.classificationID.value.idString\n                    data.hashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "f19e1a5b-9154-49e1-93d1-d718552e7542",
                  "parentUUID": "02be858e-a2da-4413-a583-b5d26c123709",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Mint Asset with meta properties Query Classification: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qClassification)\n            var list = res.body.result.value.classifications.value.list\n            list.forEach(function (value) {\n                if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET4\") {\n                    data.chainID = value.value.id.value.chainID.value.idString\n                    data.clshashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "08ae13c2-5ed3-4169-9507-01d81234c287",
                  "parentUUID": "02be858e-a2da-4413-a583-b5d26c123709",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset with meta properties: ",
                  "fullTitle": "Assets Mint Asset with meta properties Mint Asset with meta properties: ",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": data.clasificationID + '|' + data.hashID,\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"classificationID\": data.chainID + '.' + data.clshashID,\n                    \"mutableProperties\": \"ASSET1:S|num5\" + \",burn:H|1\",\n                    \"immutableProperties\": \"ASSET2:S|num6\",\n                    \"mutableMetaProperties\": \"ASSET3:S|num7\",\n                    \"immutableMetaProperties\": \"ASSET4:S|num8\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "43799f83-c408-4e7a-bf02-5f1022e495d2",
                  "parentUUID": "02be858e-a2da-4413-a583-b5d26c123709",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with meta properties Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "dfa2a141-6444-42d7-b1ee-b3972de3dd3c",
                  "parentUUID": "02be858e-a2da-4413-a583-b5d26c123709",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f19e1a5b-9154-49e1-93d1-d718552e7542",
                "08ae13c2-5ed3-4169-9507-01d81234c287",
                "43799f83-c408-4e7a-bf02-5f1022e495d2",
                "dfa2a141-6444-42d7-b1ee-b3972de3dd3c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 67,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fce5db59-96fc-4af3-a572-0fb8c98213f3",
              "title": "Mutate asset non meta properteies to meta properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 3003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "3f1a55d1-12f9-40d2-9ccd-351449494be9",
                  "parentUUID": "fce5db59-96fc-4af3-a572-0fb8c98213f3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Query Identity: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.iclasificationID = value.value.id.value.classificationID.value.idString\n                    data.ihashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "c06b99af-d857-438e-b4e4-e0ceb98e7a8a",
                  "parentUUID": "fce5db59-96fc-4af3-a572-0fb8c98213f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Define Asset: ",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"mutableTraits\": \"ASSETS1:S|num1\" + \",burn:H|1\",\n                    \"immutableTraits\": \"ASSETS2:S|\",\n                    \"mutableMetaTraits\": \"ASSETS3:S|num3\",\n                    \"immutableMetaTraits\": \"ASSETS4:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "b79a18a7-9ed0-4561-8b4a-13da3b3b7580",
                  "parentUUID": "fce5db59-96fc-4af3-a572-0fb8c98213f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Query Tx: ",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "3362022b-9fa7-4c92-a277-fddee1393a97",
                  "parentUUID": "fce5db59-96fc-4af3-a572-0fb8c98213f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Query Classification: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qClassification)\n            var list = res.body.result.value.classifications.value.list\n            list.forEach(function (value) {\n                if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSETS4\") {\n                    data.chainID = value.value.id.value.chainID.value.idString\n                    data.clshashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "8257c748-9f9b-43b8-a1fe-a225158b839a",
                  "parentUUID": "fce5db59-96fc-4af3-a572-0fb8c98213f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Mint Asset: ",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": data.clasificationID + '|' + data.hashID,\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"classificationID\": data.chainID + '.' + data.clshashID,\n                    \"mutableProperties\": \"ASSETS1:S|num5\" + \",burn:H|1\",\n                    \"immutableProperties\": \"ASSETS2:S|num6\",\n                    \"mutableMetaProperties\": \"ASSETS3:S|num7\",\n                    \"immutableMetaProperties\": \"ASSETS4:S|num8\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "afa51c88-c87b-46b4-897d-827e081cc5f1",
                  "parentUUID": "fce5db59-96fc-4af3-a572-0fb8c98213f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Query Tx: ",
                  "timedOut": false,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "367867ed-eb14-44ba-a26b-059c9f92570a",
                  "parentUUID": "fce5db59-96fc-4af3-a572-0fb8c98213f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Query Asset: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qAsset)\n            var list = res.body.result.value.assets.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSETS4\") {\n                    data.aclasificationID = value.value.id.value.classificationID.value.idString\n                    data.ahashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "e34ce7f1-d65d-42e8-8a9b-bf3884074fca",
                  "parentUUID": "fce5db59-96fc-4af3-a572-0fb8c98213f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Meta Reveal: ",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"S|num5\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "a8a834a8-7bed-4803-8c9a-ff8cd01621d7",
                  "parentUUID": "fce5db59-96fc-4af3-a572-0fb8c98213f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Query Tx: ",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "3a69af13-0268-4624-9189-da80aa6478e9",
                  "parentUUID": "fce5db59-96fc-4af3-a572-0fb8c98213f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset non meta properties to meta properties: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Mutate Asset non meta properties to meta properties: ",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.iclasificationID + '|' + data.ihashID,\n                    \"assetID\": data.aclasificationID + '|' + data.ahashID,\n                    \"mutableProperties\": \"ASSETS1:S|\",\n                    \"mutableMetaProperties\": \"ASSETS3:S|num3\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "39ac9c4a-6f2a-4c50-a748-b49f4ddb21e2",
                  "parentUUID": "fce5db59-96fc-4af3-a572-0fb8c98213f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mutate asset non meta properteies to meta properties Query Tx: ",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "ee0cef2a-e879-4967-87a0-50a049680723",
                  "parentUUID": "fce5db59-96fc-4af3-a572-0fb8c98213f3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c06b99af-d857-438e-b4e4-e0ceb98e7a8a",
                "b79a18a7-9ed0-4561-8b4a-13da3b3b7580",
                "3362022b-9fa7-4c92-a277-fddee1393a97",
                "8257c748-9f9b-43b8-a1fe-a225158b839a",
                "afa51c88-c87b-46b4-897d-827e081cc5f1",
                "367867ed-eb14-44ba-a26b-059c9f92570a",
                "e34ce7f1-d65d-42e8-8a9b-bf3884074fca",
                "a8a834a8-7bed-4803-8c9a-ff8cd01621d7",
                "3a69af13-0268-4624-9189-da80aa6478e9",
                "39ac9c4a-6f2a-4c50-a748-b49f4ddb21e2",
                "ee0cef2a-e879-4967-87a0-50a049680723"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 319,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "13b59c15-0209-412f-80f7-426244f629ce",
              "title": "Mint Asset with 22 properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with 22 properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 3004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "e375a237-79ab-41f8-96c4-d141523eac15",
                  "parentUUID": "13b59c15-0209-412f-80f7-426244f629ce",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Query Identity: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.clasificationID = value.value.id.value.classificationID.value.idString\n                    data.hashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "14484121-7ce4-407f-8660-e4177866232c",
                  "parentUUID": "13b59c15-0209-412f-80f7-426244f629ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Define Asset: ",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"mutableTraits\": \"ASSETP1:S|A,ASSETP11:S|B,ASSETP12:S|C,ASSETP13:S|D,ASSETP14:S|E,burn:H|1\",\n                    \"immutableTraits\": \"ASSETP2:S|G,ASSETP21:S|H,ASSETP22:S|I,ASSETP23:S|J,ASSETP24:S|K\",\n                    \"mutableMetaTraits\": \"ASSETP3:S|L,ASSETP31:S|M,ASSETP32:S|N,ASSETP33:S|O,ASSETP34:S|P\",\n                    \"immutableMetaTraits\": \"ASSETP4:S|Q,ASSETP41:S|R,ASSETP42:S|S,ASSETP43:S|T,ASSETP44:S|U,ASSETP45:S|V\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "18ea489c-8acb-4817-a7f3-96dab2f057dd",
                  "parentUUID": "13b59c15-0209-412f-80f7-426244f629ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Query Tx: ",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "3ef7b736-b72d-4e56-9067-32f84be621e8",
                  "parentUUID": "13b59c15-0209-412f-80f7-426244f629ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Query Classification: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qClassification)\n            var list = res.body.result.value.classifications.value.list\n            list.forEach(function (value) {\n                if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSETP4\") {\n                    data.chainID = value.value.id.value.chainID.value.idString\n                    data.clshashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "b6522513-3795-4211-b26e-90f274cd5c98",
                  "parentUUID": "13b59c15-0209-412f-80f7-426244f629ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Mint Asset: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": data.clasificationID + '|' + data.hashID,\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"classificationID\": data.chainID + '.' + data.clshashID,\n                    \"mutableProperties\": \"ASSETP1:S|A,ASSETP11:S|B,ASSETP12:S|C,ASSETP13:S|D,ASSETP14:S|E,burn:H|1\",\n                    \"immutableProperties\": \"ASSETP2:S|G,ASSETP21:S|H,ASSETP22:S|I,ASSETP23:S|J,ASSETP24:S|K\",\n                    \"mutableMetaProperties\": \"ASSETP3:S|L,ASSETP31:S|M,ASSETP32:S|N,ASSETP33:S|O,ASSETP34:S|P\",\n                    \"immutableMetaProperties\": \"ASSETP4:S|Q,ASSETP41:S|R,ASSETP42:S|S,ASSETP43:S|T,ASSETP44:S|U,ASSETP45:S|V\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "18ca7998-7ac9-42ef-822c-a2d2ba577923",
                  "parentUUID": "13b59c15-0209-412f-80f7-426244f629ce",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with 22 properties Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "2e50c728-ba76-4afd-8d95-d6f12bbea8a3",
                  "parentUUID": "13b59c15-0209-412f-80f7-426244f629ce",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "14484121-7ce4-407f-8660-e4177866232c",
                "18ea489c-8acb-4817-a7f3-96dab2f057dd",
                "3ef7b736-b72d-4e56-9067-32f84be621e8",
                "b6522513-3795-4211-b26e-90f274cd5c98",
                "18ca7998-7ac9-42ef-822c-a2d2ba577923",
                "2e50c728-ba76-4afd-8d95-d6f12bbea8a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 131,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e61708b3-69ff-4345-a40e-6e989ac71bbf",
              "title": "Add asset properties on mutation",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Add asset properties on mutation \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "7b78e70d-f62f-4171-a7a1-25a260cafd80",
                  "parentUUID": "e61708b3-69ff-4345-a40e-6e989ac71bbf",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Add asset properties on mutation Query Identity: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.iclasificationID = value.value.id.value.classificationID.value.idString\n                    data.ihashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "f4530d29-594f-47ac-ab77-9d57f1c36a74",
                  "parentUUID": "e61708b3-69ff-4345-a40e-6e989ac71bbf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Add asset properties on mutation Define Asset: ",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"mutableTraits\": \"ASSET_A5:S|, burn:H|1\",\n                    \"immutableTraits\": \"ASSET_A6:S|\",\n                    \"mutableMetaTraits\": \"ASSET_A7:S|\",\n                    \"immutableMetaTraits\": \"ASSET_A8:S|\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "34e4d90e-5360-479c-bf59-1c740793225c",
                  "parentUUID": "e61708b3-69ff-4345-a40e-6e989ac71bbf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Add asset properties on mutation Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "23334439-2f12-48ff-99ee-9eb8b9b58565",
                  "parentUUID": "e61708b3-69ff-4345-a40e-6e989ac71bbf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Add asset properties on mutation Query Classification: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qClassification)\n            var list = res.body.result.value.classifications.value.list\n            list.forEach(function (value) {\n                if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET_A8\") {\n                    data.chainID = value.value.id.value.chainID.value.idString\n                    data.clshashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "36aeaccc-06b2-41e6-b68a-cc1450b7d747",
                  "parentUUID": "e61708b3-69ff-4345-a40e-6e989ac71bbf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Add asset properties on mutation Mint Asset: ",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": data.clasificationID + '|' + data.hashID,\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"classificationID\": data.chainID + '.' + data.clshashID,\n                    \"mutableProperties\": \"ASSET_A5:S|A, burn:H|1\",\n                    \"immutableProperties\": \"ASSET_A6:S|B\",\n                    \"mutableMetaProperties\": \"ASSET_A7:S|C\",\n                    \"immutableMetaProperties\": \"ASSET_A8:S|D\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "1b62e54a-01df-442f-babd-30f56a8d16a3",
                  "parentUUID": "e61708b3-69ff-4345-a40e-6e989ac71bbf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Add asset properties on mutation Query Tx: ",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "3eabeb8b-03ce-4fc4-97b7-f329d5a6aa58",
                  "parentUUID": "e61708b3-69ff-4345-a40e-6e989ac71bbf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Assets Add asset properties on mutation Query Asset: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qAsset)\n            var list = res.body.result.value.assets.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET_A8\") {\n                    data.aclasificationID = value.value.id.value.classificationID.value.idString\n                    data.ahashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "67a784ee-3408-4503-94a0-657c84c63109",
                  "parentUUID": "e61708b3-69ff-4345-a40e-6e989ac71bbf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Add asset properties on mutation: ",
                  "fullTitle": "Assets Add asset properties on mutation Add asset properties on mutation: ",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.iclasificationID + '|' + data.ihashID,\n                    \"assetID\": data.aclasificationID + '|' + data.ahashID,\n                    \"mutableProperties\": \"ASSET_A5:S|A\",\n                    \"mutableMetaProperties\": \"ASSET_A7:S|C\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "53591a2e-4cb9-4709-ab54-3a670acd4117",
                  "parentUUID": "e61708b3-69ff-4345-a40e-6e989ac71bbf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Add asset properties on mutation Query Tx: ",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "ca058621-28d9-4449-8e9a-6b3149b299bc",
                  "parentUUID": "e61708b3-69ff-4345-a40e-6e989ac71bbf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f4530d29-594f-47ac-ab77-9d57f1c36a74",
                "34e4d90e-5360-479c-bf59-1c740793225c",
                "23334439-2f12-48ff-99ee-9eb8b9b58565",
                "36aeaccc-06b2-41e6-b68a-cc1450b7d747",
                "1b62e54a-01df-442f-babd-30f56a8d16a3",
                "3eabeb8b-03ce-4fc4-97b7-f329d5a6aa58",
                "67a784ee-3408-4503-94a0-657c84c63109",
                "53591a2e-4cb9-4709-ab54-3a670acd4117",
                "ca058621-28d9-4449-8e9a-6b3149b299bc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 211,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dc6c39e3-6bc2-44d7-8190-cc97201878fd",
              "title": "Mint Asset with more than 22 properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with more than 22 properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 3003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "273dcf4a-1eab-4cbc-990a-83743c357b9c",
                  "parentUUID": "dc6c39e3-6bc2-44d7-8190-cc97201878fd",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mint Asset with more than 22 properties Query Identity: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.clasificationID = value.value.id.value.classificationID.value.idString\n                    data.hashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "9346da5a-b08e-4827-9edf-7515d5b8d7e1",
                  "parentUUID": "dc6c39e3-6bc2-44d7-8190-cc97201878fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with more than 22 properties Define Asset: ",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"mutableTraits\": \"P1:S|A,P11:S|B,P12:S|C,P13:S|D,P14:S|E,P14:S|F,burn:H|1\",\n                    \"immutableTraits\": \"P2:S|G,P21:S|H,P22:S|I,P23:S|J,P24:S|K\",\n                    \"mutableMetaTraits\": \"P3:S|L,P31:S|M,P32:S|N,P33:S|O,P34:S|P\",\n                    \"immutableMetaTraits\": \"P4:S|Q,P41:S|R,P42:S|S,P43:S|T,P44:S|U,P45:S|V\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "b8ae7992-260d-42af-81c7-b57d002df058",
                  "parentUUID": "dc6c39e3-6bc2-44d7-8190-cc97201878fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with more than 22 properties Query Tx: ",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "f3a70f6d-efa3-40f5-b9ba-cf0e30b2253e",
                  "parentUUID": "dc6c39e3-6bc2-44d7-8190-cc97201878fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Mint Asset with more than 22 properties Query Classification: ",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qClassification)\n            var list = res.body.result.value.classifications.value.list\n            list.forEach(function (value) {\n                if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"P4\") {\n                    data.chainID = value.value.id.value.chainID.value.idString\n                    data.clshashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "711fa565-fb81-48b4-9b77-2d6d6c5764ce",
                  "parentUUID": "dc6c39e3-6bc2-44d7-8190-cc97201878fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset with more than 22 properties: ",
                  "fullTitle": "Assets Mint Asset with more than 22 properties Mint Asset with more than 22 properties: ",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": data.clasificationID + '|' + data.hashID,\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"classificationID\": data.chainID + '.' + data.clshashID,\n                    \"mutableProperties\": \"P1:S|A,P11:S|B,P12:S|C,P13:S|D,P14:S|E,P14:S|F,burn:H|1\",\n                    \"immutableProperties\": \"P2:S|G,P21:S|H,P22:S|I,P23:S|J,P24:S|K\",\n                    \"mutableMetaProperties\": \"P3:S|L,P31:S|M,P32:S|N,P33:S|O,P34:S|P\",\n                    \"immutableMetaProperties\": \"P4:S|Q,P41:S|R,P42:S|S,P43:S|T,P44:S|U,P45:S|V\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "85ae92d9-8f31-4ab2-85d4-e8d4d165c564",
                  "parentUUID": "dc6c39e3-6bc2-44d7-8190-cc97201878fd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with more than 22 properties Query Tx: ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "de429146-6428-4f07-b275-c7aa54b7a145",
                  "parentUUID": "dc6c39e3-6bc2-44d7-8190-cc97201878fd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9346da5a-b08e-4827-9edf-7515d5b8d7e1",
                "b8ae7992-260d-42af-81c7-b57d002df058",
                "f3a70f6d-efa3-40f5-b9ba-cf0e30b2253e",
                "711fa565-fb81-48b4-9b77-2d6d6c5764ce",
                "85ae92d9-8f31-4ab2-85d4-e8d4d165c564",
                "de429146-6428-4f07-b275-c7aa54b7a145"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 138,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "64f2bff2-6cbc-469f-a47c-997f356b3417",
              "title": "Mutate Asset to add more that 22 properties",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mutate Asset to add more that 22 properties \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "c642b5a6-d167-418c-b4ae-3a943312bf91",
                  "parentUUID": "64f2bff2-6cbc-469f-a47c-997f356b3417",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mutate Asset to add more that 22 properties Query Identity: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.iclasificationID = value.value.id.value.classificationID.value.idString\n                    data.ihashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "4e322aaa-edc4-4e6a-97aa-97ec4423dda7",
                  "parentUUID": "64f2bff2-6cbc-469f-a47c-997f356b3417",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Assets Mutate Asset to add more that 22 properties Query Asset: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qAsset)\n            var list = res.body.result.value.assets.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET_A8\") {\n                    data.aclasificationID = value.value.id.value.classificationID.value.idString\n                    data.ahashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "51c3cf87-8d77-47c2-90a1-ad3d35874ee6",
                  "parentUUID": "64f2bff2-6cbc-469f-a47c-997f356b3417",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset to add more that 22 properties: ",
                  "fullTitle": "Assets Mutate Asset to add more that 22 properties Mutate Asset to add more that 22 properties: ",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.iclasificationID + '|' + data.ihashID,\n                    \"assetID\": data.aclasificationID + '|' + data.ahashID,\n                    \"mutableProperties\": \"ASSET_A5:S|A,ASSET_A5:S|B,ASSET_A5:S|C,ASSET_A5:S|D,ASSET_A5:S|E,ASSET_A5:S|F,ASSET_A5:S|G,ASSET_A5:S|H,ASSET_A5:S|I,ASSET_A5:S|J,ASSET_A5:S|K,ASSET_A5:S|L,ASSET_A5:S|M,ASSET_A5:S|N\",\n                    \"mutableMetaProperties\": \"ASSET_A7:S|O,ASSET_A7:S|P,ASSET_A7:S|Q,ASSET_A7:S|R,ASSET_A7:S|S,ASSET_A7:S|T,ASSET_A7:S|U,ASSET_A7:S|V,ASSET_A7:S|W\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "b02ba981-166c-46e2-8391-5618ac31938a",
                  "parentUUID": "64f2bff2-6cbc-469f-a47c-997f356b3417",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mutate Asset to add more that 22 properties Query Tx: ",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "8b69f796-b83d-4823-90de-ad588e88c932",
                  "parentUUID": "64f2bff2-6cbc-469f-a47c-997f356b3417",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4e322aaa-edc4-4e6a-97aa-97ec4423dda7",
                "51c3cf87-8d77-47c2-90a1-ad3d35874ee6",
                "b02ba981-166c-46e2-8391-5618ac31938a",
                "8b69f796-b83d-4823-90de-ad588e88c932"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 88,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "87b133af-8586-459e-967d-e9d0f047eabc",
              "title": "Burn Asset",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Burn Asset \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "4c95cb2b-820e-441c-a4ae-918cf2f4f04f",
                  "parentUUID": "87b133af-8586-459e-967d-e9d0f047eabc",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Burn Asset Query Identity: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.iclasificationID = value.value.id.value.classificationID.value.idString\n                    data.ihashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "a9fecfed-8bea-4265-bbd3-9f6ce89abf7e",
                  "parentUUID": "87b133af-8586-459e-967d-e9d0f047eabc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Assets Burn Asset Query Asset: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qAsset)\n            var list = res.body.result.value.assets.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET_P4\") {\n                    data.aclasificationID = value.value.id.value.classificationID.value.idString\n                    data.ahashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "9b7d60de-7288-4f71-b35a-f669641cb29c",
                  "parentUUID": "87b133af-8586-459e-967d-e9d0f047eabc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Burn Asset Meta Reveal: ",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"H|1\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "5b897c4a-60d6-4db3-9259-ca1c85b5f6d7",
                  "parentUUID": "87b133af-8586-459e-967d-e9d0f047eabc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Burn Asset Query Tx: ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "618afe71-436f-4808-80b7-884b4254d964",
                  "parentUUID": "87b133af-8586-459e-967d-e9d0f047eabc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Burn Asset",
                  "fullTitle": "Assets Burn Asset Burn Asset",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.burnAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.iclasificationID + '|' + data.ihashID,\n                    \"assetID\": data.aclasificationID + '|' + data.ahashID\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.burnAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "e568903c-cdaf-4f72-88a4-fb54e9d2b06c",
                  "parentUUID": "87b133af-8586-459e-967d-e9d0f047eabc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Burn Asset Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "a05b3f8e-307b-443a-8c0d-79dcdff58013",
                  "parentUUID": "87b133af-8586-459e-967d-e9d0f047eabc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a9fecfed-8bea-4265-bbd3-9f6ce89abf7e",
                "9b7d60de-7288-4f71-b35a-f669641cb29c",
                "5b897c4a-60d6-4db3-9259-ca1c85b5f6d7",
                "618afe71-436f-4808-80b7-884b4254d964",
                "e568903c-cdaf-4f72-88a4-fb54e9d2b06c",
                "a05b3f8e-307b-443a-8c0d-79dcdff58013"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 117,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e3ee7d9b-1ccb-471a-ac25-00cdb87cd40d",
              "title": "Mint Asset with burn greater than forseeable block height",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "2feff7ea-66f3-4d35-90ae-69d066d98fe5",
                  "parentUUID": "e3ee7d9b-1ccb-471a-ac25-00cdb87cd40d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Identity: ",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.iclasificationID = value.value.id.value.classificationID.value.idString\n                    data.ihashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "b03b2d6d-c018-48b2-ab7c-e0f0c5d03120",
                  "parentUUID": "e3ee7d9b-1ccb-471a-ac25-00cdb87cd40d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Define Asset: ",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.iclasificationID + '|' + data.ihashID,\n                    \"mutableTraits\": \"AssetA:S|num1\" + \",burn:H|1\",\n                    \"immutableTraits\": \"AssetB:S|\",\n                    \"mutableMetaTraits\": \"AssetC:S|num3\",\n                    \"immutableMetaTraits\": \"AssetD:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "f4dae76b-0cb8-4685-9be0-ee31d483c9ed",
                  "parentUUID": "e3ee7d9b-1ccb-471a-ac25-00cdb87cd40d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "a0bf7d61-d745-4cb0-b393-f9094d8dcd85",
                  "parentUUID": "e3ee7d9b-1ccb-471a-ac25-00cdb87cd40d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Classification: ",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qClassification)\n            var list = res.body.result.value.classifications.value.list\n            list.forEach(function (value) {\n                if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"AssetD\") {\n                    data.chainID = value.value.id.value.chainID.value.idString\n                    data.clshashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "4a786e5b-418b-4aa0-9811-5f77ed7f75b2",
                  "parentUUID": "e3ee7d9b-1ccb-471a-ac25-00cdb87cd40d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Mint Asset: ",
                  "timedOut": false,
                  "duration": 64,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": data.iclasificationID + '|' + data.ihashID,\n                    \"fromID\": data.iclasificationID + '|' + data.ihashID,\n                    \"classificationID\": data.chainID + '.' + data.clshashID,\n                    \"mutableProperties\": \"AssetA:S|num1\" + \",burn:H|100000000\",\n                    \"immutableProperties\": \"AssetB:S|num2\",\n                    \"mutableMetaProperties\": \"AssetC:S|num3\",\n                    \"immutableMetaProperties\": \"AssetD:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "86342cc5-3b21-4f34-8b85-7ed38e0a5cd8",
                  "parentUUID": "e3ee7d9b-1ccb-471a-ac25-00cdb87cd40d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Tx: ",
                  "timedOut": false,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "ccf2aaf1-a842-4956-acbb-edfba0732078",
                  "parentUUID": "e3ee7d9b-1ccb-471a-ac25-00cdb87cd40d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Asset: ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qAsset)\n            var list = res.body.result.value.assets.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"AssetD\") {\n                    data.aclasificationID = value.value.id.value.classificationID.value.idString\n                    data.ahashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "2191507f-4603-40cf-8225-80476c240668",
                  "parentUUID": "e3ee7d9b-1ccb-471a-ac25-00cdb87cd40d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Meta Reveal: ",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"H|100000000\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "648f33f2-d2c4-400f-aea6-9c7fc8133229",
                  "parentUUID": "e3ee7d9b-1ccb-471a-ac25-00cdb87cd40d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Tx: ",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "b9ac650e-9799-4325-b18f-27d3d02a921b",
                  "parentUUID": "e3ee7d9b-1ccb-471a-ac25-00cdb87cd40d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Burn Asset",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Burn Asset",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.burnAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.iclasificationID + '|' + data.ihashID,\n                    \"assetID\": data.aclasificationID + '|' + data.ahashID\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.burnAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "88403b99-4a02-4826-9a5c-267f87415eb6",
                  "parentUUID": "e3ee7d9b-1ccb-471a-ac25-00cdb87cd40d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Tx: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "855ac399-a583-49d3-a7bb-bf3b688a0bad",
                  "parentUUID": "e3ee7d9b-1ccb-471a-ac25-00cdb87cd40d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Meta Reveal: ",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"H|100\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "fa896683-d7aa-4cb5-a918-4783fa978afa",
                  "parentUUID": "e3ee7d9b-1ccb-471a-ac25-00cdb87cd40d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "180f3721-6311-4c4b-9d37-87e343cda01f",
                  "parentUUID": "e3ee7d9b-1ccb-471a-ac25-00cdb87cd40d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mutate Asset: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Mutate Asset: ",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.mutateAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.iclasificationID + '|' + data.ihashID,\n                    \"assetID\": data.aclasificationID + '|' + data.ahashID,\n                    \"mutableProperties\": \"AssetA:S|ABCd,burn:H|100\",\n                    \"mutableMetaProperties\": \"AssetC:S|num3\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.mutateAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "c3968d71-7fd8-480c-8fed-776eff58e6a9",
                  "parentUUID": "e3ee7d9b-1ccb-471a-ac25-00cdb87cd40d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "e7e3ec75-df30-4836-924b-8e10cc923647",
                  "parentUUID": "e3ee7d9b-1ccb-471a-ac25-00cdb87cd40d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Burn Asset",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Burn Asset",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.burnAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.iclasificationID + '|' + data.ihashID,\n                    \"assetID\": data.aclasificationID + '|' + data.ahashID\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.burnAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "aa14cd00-062f-4b31-8188-b7a035e7c65d",
                  "parentUUID": "e3ee7d9b-1ccb-471a-ac25-00cdb87cd40d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with burn greater than forseeable block height Query Tx: ",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "0fdb6614-107c-4d40-b1d6-ccc59103a1a8",
                  "parentUUID": "e3ee7d9b-1ccb-471a-ac25-00cdb87cd40d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b03b2d6d-c018-48b2-ab7c-e0f0c5d03120",
                "f4dae76b-0cb8-4685-9be0-ee31d483c9ed",
                "a0bf7d61-d745-4cb0-b393-f9094d8dcd85",
                "4a786e5b-418b-4aa0-9811-5f77ed7f75b2",
                "86342cc5-3b21-4f34-8b85-7ed38e0a5cd8",
                "ccf2aaf1-a842-4956-acbb-edfba0732078",
                "2191507f-4603-40cf-8225-80476c240668",
                "648f33f2-d2c4-400f-aea6-9c7fc8133229",
                "b9ac650e-9799-4325-b18f-27d3d02a921b",
                "88403b99-4a02-4826-9a5c-267f87415eb6",
                "855ac399-a583-49d3-a7bb-bf3b688a0bad",
                "fa896683-d7aa-4cb5-a918-4783fa978afa",
                "180f3721-6311-4c4b-9d37-87e343cda01f",
                "c3968d71-7fd8-480c-8fed-776eff58e6a9",
                "e7e3ec75-df30-4836-924b-8e10cc923647",
                "aa14cd00-062f-4b31-8188-b7a035e7c65d",
                "0fdb6614-107c-4d40-b1d6-ccc59103a1a8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 468,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e287e3ee-649c-4838-a074-4f2b04f9c4f9",
              "title": "Mint Asset with extra properties when mutable trait is not defined",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "61247dff-c10d-4e6e-b0cc-25c133211632",
                  "parentUUID": "e287e3ee-649c-4838-a074-4f2b04f9c4f9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Query Identity: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.clasificationID = value.value.id.value.classificationID.value.idString\n                    data.hashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "b7e8904b-e4da-47e0-981d-0335a8efd4fa",
                  "parentUUID": "e287e3ee-649c-4838-a074-4f2b04f9c4f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Define Asset: ",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"mutableTraits\": \"ASSETA1:S|,burn:H|1\",\n                    \"immutableTraits\": \"ASSETA2:S|G\",\n                    \"mutableMetaTraits\": \"ASSETA3:S|L\",\n                    \"immutableMetaTraits\": \"ASSETA4:S|Q\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "04e16039-0def-4299-9c05-2374be1d0837",
                  "parentUUID": "e287e3ee-649c-4838-a074-4f2b04f9c4f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "55deae24-5e6d-49e1-841a-431a1e802e4d",
                  "parentUUID": "e287e3ee-649c-4838-a074-4f2b04f9c4f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Query Classification: ",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qClassification)\n            var list = res.body.result.value.classifications.value.list\n            list.forEach(function (value) {\n                if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"AssetD\") {\n                    data.chainID = value.value.id.value.chainID.value.idString\n                    data.clshashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "5834a695-7d16-401e-9bb8-5976c6aa5926",
                  "parentUUID": "e287e3ee-649c-4838-a074-4f2b04f9c4f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Mint Asset: ",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": data.clasificationID + '|' + data.hashID,\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"classificationID\": data.chainID + '.' + data.clshashID,\n                    \"mutableProperties\": \"ASSETA1:S|A,burn:H|1,ASSETA1:S|B,ASSETA1:S|C\",\n                    \"immutableProperties\": \"ASSETA2:S|G\",\n                    \"mutableMetaProperties\": \"ASSETA3:S|L\",\n                    \"immutableMetaProperties\": \"ASSETA4:S|Q\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "a3c33db4-b136-4878-9f80-b72ed5622a11",
                  "parentUUID": "e287e3ee-649c-4838-a074-4f2b04f9c4f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Assets Mint Asset with extra properties when mutable trait is not defined Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "ccbdb8d6-a7ac-4434-97c9-0e9b6528b8f9",
                  "parentUUID": "e287e3ee-649c-4838-a074-4f2b04f9c4f9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b7e8904b-e4da-47e0-981d-0335a8efd4fa",
                "04e16039-0def-4299-9c05-2374be1d0837",
                "55deae24-5e6d-49e1-841a-431a1e802e4d",
                "5834a695-7d16-401e-9bb8-5976c6aa5926",
                "a3c33db4-b136-4878-9f80-b72ed5622a11",
                "ccbdb8d6-a7ac-4434-97c9-0e9b6528b8f9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 128,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dd82f18f-2758-449d-b111-9d2a83c82f7a",
          "title": "Splits",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
          "file": "/test/testCases.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1384efab-3b8f-46a8-b7da-f8a815a201c1",
              "title": "send split of an asset",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Splits send split of an asset \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "9b0f0283-166c-44aa-ad7f-eb1b9fd9e9f1",
                  "parentUUID": "1384efab-3b8f-46a8-b7da-f8a815a201c1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity 1: ",
                  "fullTitle": "Splits send split of an asset Query Identity 1: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.iclasificationID1 = value.value.id.value.classificationID.value.idString\n                    data.ihashID1 = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "e53cee12-51ee-43c1-8370-991fae022345",
                  "parentUUID": "1384efab-3b8f-46a8-b7da-f8a815a201c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 2: ",
                  "fullTitle": "Splits send split of an asset Query Identity 2: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits2\") {\n                    data.iclasificationID2 = value.value.id.value.classificationID.value.idString\n                    data.ihashID2 = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "772b6891-a613-4398-a9eb-258ae95724de",
                  "parentUUID": "1384efab-3b8f-46a8-b7da-f8a815a201c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Splits send split of an asset Query Asset: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qAsset)\n            var list = res.body.result.value.assets.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \" \") {\n                    data.aclasificationID = value.value.id.value.classificationID.value.idString\n                    data.ahashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "f589a4f4-e7ab-4bcd-87c5-ce6b5ee99165",
                  "parentUUID": "1384efab-3b8f-46a8-b7da-f8a815a201c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Send split of an asset: ",
                  "fullTitle": "Splits send split of an asset Send split of an asset: ",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.sendSplitType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.iclasificationID1 + '|' + data.ihashID1,\n                    \"toID\": data.iclasificationID2 + '|' + data.ihashID2,\n                    \"ownableID\": data.aclasificationID + '.' + data.ahashID,\n                    \"split\": config.splitval\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.sendSplitPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "0e37b969-153d-4126-89dc-2162f80b00e5",
                  "parentUUID": "1384efab-3b8f-46a8-b7da-f8a815a201c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Splits send split of an asset Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "2f0f2bbb-a398-46e6-8b4b-538330ecd82f",
                  "parentUUID": "1384efab-3b8f-46a8-b7da-f8a815a201c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e53cee12-51ee-43c1-8370-991fae022345",
                "772b6891-a613-4398-a9eb-258ae95724de",
                "f589a4f4-e7ab-4bcd-87c5-ce6b5ee99165",
                "0e37b969-153d-4126-89dc-2162f80b00e5",
                "2f0f2bbb-a398-46e6-8b4b-538330ecd82f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 78,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "76540383-bc2b-45eb-9c61-b55867c850d2",
              "title": "Unwrap a coin",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Splits Unwrap a coin \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "330511ca-3ff8-4091-9a87-8c9dc09c7745",
                  "parentUUID": "76540383-bc2b-45eb-9c61-b55867c850d2",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Splits Unwrap a coin Query Identity: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.iclasificationID1 = value.value.id.value.classificationID.value.idString\n                    data.ihashID1 = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "9b10316f-6949-4eea-886f-48ed645fecfe",
                  "parentUUID": "76540383-bc2b-45eb-9c61-b55867c850d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Splits Unwrap a coin Query Asset: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qAsset)\n            var list = res.body.result.value.assets.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"AssetD\") {\n                    data.aclasificationID = value.value.id.value.classificationID.value.idString\n                    data.ahashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "3cd4890d-c077-4df8-bb09-5275dbd0b57e",
                  "parentUUID": "76540383-bc2b-45eb-9c61-b55867c850d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Unwrap a coin: ",
                  "fullTitle": "Splits Unwrap a coin Unwrap a coin: ",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.unwrapCoinType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.iclasificationID1 + '|' + data.ihashID1,\n                    \"ownableID\": data.aclasificationID + '.' + data.ahashID,\n                    \"split\": config.splitval\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.unwrapCoinPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "9feeb814-cc06-4ca9-872a-7410fe8e0cf6",
                  "parentUUID": "76540383-bc2b-45eb-9c61-b55867c850d2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Splits Unwrap a coin Query Tx: ",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "f901cb8f-9846-4ad9-8a84-c6383518cb6e",
                  "parentUUID": "76540383-bc2b-45eb-9c61-b55867c850d2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9b10316f-6949-4eea-886f-48ed645fecfe",
                "3cd4890d-c077-4df8-bb09-5275dbd0b57e",
                "9feeb814-cc06-4ca9-872a-7410fe8e0cf6",
                "f901cb8f-9846-4ad9-8a84-c6383518cb6e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 83,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e9ed0de5-2bdf-4788-a327-4c49e3d7edbc",
              "title": "Wrap a coin",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Splits Wrap a coin \"before each\" hook",
                  "timedOut": false,
                  "duration": 3003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "6eebcbbe-e3c6-4006-b1c6-629ee42403c1",
                  "parentUUID": "e9ed0de5-2bdf-4788-a327-4c49e3d7edbc",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Splits Wrap a coin Query Identity: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.iclasificationID1 = value.value.id.value.classificationID.value.idString\n                    data.ihashID1 = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "ff01b8a6-d390-47ed-a58f-970eaec6dc85",
                  "parentUUID": "e9ed0de5-2bdf-4788-a327-4c49e3d7edbc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Wrap a coin: ",
                  "fullTitle": "Splits Wrap a coin Wrap a coin: ",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.wrapCoinType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.iclasificationID1 + '|' + data.ihashID1,\n                    \"coins\": config.coins\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.wrapCoinPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "554df111-bc3a-478f-8244-6f30842ab70c",
                  "parentUUID": "e9ed0de5-2bdf-4788-a327-4c49e3d7edbc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Splits Wrap a coin Query Tx: ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "f535dff1-823a-4b82-afc0-dbfb622e8f6d",
                  "parentUUID": "e9ed0de5-2bdf-4788-a327-4c49e3d7edbc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff01b8a6-d390-47ed-a58f-970eaec6dc85",
                "554df111-bc3a-478f-8244-6f30842ab70c",
                "f535dff1-823a-4b82-afc0-dbfb622e8f6d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 57,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "80fd6ab7-72f1-4677-b236-fd77b0be589a",
              "title": "send split of an coin",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Splits send split of an coin \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "562165ef-9b91-40c9-bf25-832c0cfb40fa",
                  "parentUUID": "80fd6ab7-72f1-4677-b236-fd77b0be589a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity 1: ",
                  "fullTitle": "Splits send split of an coin Query Identity 1: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.iclasificationID1 = value.value.id.value.classificationID.value.idString\n                    data.ihashID1 = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "7d8b29e2-f9d0-45b4-a164-85c7309e81b1",
                  "parentUUID": "80fd6ab7-72f1-4677-b236-fd77b0be589a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 2: ",
                  "fullTitle": "Splits send split of an coin Query Identity 2: ",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits2\") {\n                    data.iclasificationID2 = value.value.id.value.classificationID.value.idString\n                    data.ihashID2 = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "f7eac020-aeed-4195-8bf0-f264f2d15523",
                  "parentUUID": "80fd6ab7-72f1-4677-b236-fd77b0be589a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Splits send split of an coin Query Asset: ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qAsset)\n            var list = res.body.result.value.assets.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"AssetD\") {\n                    data.aclasificationID = value.value.id.value.classificationID.value.idString\n                    data.ahashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "dffa779c-6735-40f1-9c3a-a60ea158801b",
                  "parentUUID": "80fd6ab7-72f1-4677-b236-fd77b0be589a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Send split of an coin: ",
                  "fullTitle": "Splits send split of an coin Send split of an coin: ",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.sendSplitType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.iclasificationID1 + '|' + data.ihashID1,\n                    \"toID\": data.iclasificationID2 + '|' + data.ihashID2,\n                    \"ownableID\": data.aclasificationID + '.' + data.ahashID,\n                    \"split\": config.splitval\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.sendSplitPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "6eee11c6-74af-4ca6-87c6-8deb0387c4ce",
                  "parentUUID": "80fd6ab7-72f1-4677-b236-fd77b0be589a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Splits send split of an coin Query Tx: ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "ae21cea1-ab49-4647-94a3-8ccee1607527",
                  "parentUUID": "80fd6ab7-72f1-4677-b236-fd77b0be589a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d8b29e2-f9d0-45b4-a164-85c7309e81b1",
                "f7eac020-aeed-4195-8bf0-f264f2d15523",
                "dffa779c-6735-40f1-9c3a-a60ea158801b",
                "6eee11c6-74af-4ca6-87c6-8deb0387c4ce",
                "ae21cea1-ab49-4647-94a3-8ccee1607527"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 79,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3baf7a03-1402-450c-9ef1-13126b08cd2a",
          "title": "Metas",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
          "file": "/test/testCases.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "40aae785-5714-43a3-8651-76f13984aff4",
              "title": "Reveal a meta",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "a2a10d66-b8aa-440c-99f6-d4d1f274adfc",
                  "parentUUID": "40aae785-5714-43a3-8651-76f13984aff4",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Metas Reveal a meta Query Identity: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.iclasificationID1 = value.value.id.value.classificationID.value.idString\n                    data.ihashID1 = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "68d708ed-1506-4382-a39f-42fb1ed5c5c1",
                  "parentUUID": "40aae785-5714-43a3-8651-76f13984aff4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Metas Reveal a meta Define Asset: ",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.iclasificationID1 + '|' + data.ihashID1,\n                    \"mutableTraits\": \"ASSET_PA:S|AAA, burn:H|4\",\n                    \"immutableTraits\": \"ASSET_PB:D|0.344\",\n                    \"mutableMetaTraits\": \"ASSET_PC:I|ID\",\n                    \"immutableMetaTraits\": \"ASSET_PD:S|A\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "a5ae122e-5f89-4ce4-9719-dea3c02a5a7d",
                  "parentUUID": "40aae785-5714-43a3-8651-76f13984aff4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal a meta Query Tx: ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "3679716d-b865-4ee1-91ae-0f6ad5947ed7",
                  "parentUUID": "40aae785-5714-43a3-8651-76f13984aff4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Metas Reveal a meta Query Classification: ",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qClassification)\n            var list = res.body.result.value.classifications.value.list\n            list.forEach(function (value) {\n                if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET_PD\") {\n                    data.chainID = value.value.id.value.chainID.value.idString\n                    data.clshashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "b27a813d-8574-421d-acb7-67d1eb9d9ed7",
                  "parentUUID": "40aae785-5714-43a3-8651-76f13984aff4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Metas Reveal a meta Mint Asset: ",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": data.iclasificationID1 + '|' + data.ihashID1,\n                    \"fromID\": data.iclasificationID1 + '|' + data.ihashID1,\n                    \"classificationID\": data.chainID + '.' + data.clshashID,\n                    \"mutableProperties\": \"ASSET_PA:S|AAA, burn:H|4\",\n                    \"immutableProperties\": \"ASSET_PB:D|0.344\",\n                    \"mutableMetaProperties\": \"ASSET_PC:I|ID\",\n                    \"immutableMetaProperties\": \"ASSET_PD:S|A\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "0ac79b9a-793c-4026-a36a-8624e840557e",
                  "parentUUID": "40aae785-5714-43a3-8651-76f13984aff4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal a meta Query Tx: ",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "6ab30097-f43e-4924-827b-83a8c358e148",
                  "parentUUID": "40aae785-5714-43a3-8651-76f13984aff4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Metas Reveal a meta Query Asset: ",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qAsset)\n            var list = res.body.result.value.assets.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET_PD\") {\n                    data.aclasificationID = value.value.id.value.classificationID.value.idString\n                    data.ahashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "b01afe20-3b8e-4920-8d79-476dc88d1fd6",
                  "parentUUID": "40aae785-5714-43a3-8651-76f13984aff4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta Meta Reveal: ",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"S|AAA\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "d1bf9655-0530-492f-a615-c9d3ec2ffed3",
                  "parentUUID": "40aae785-5714-43a3-8651-76f13984aff4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal a meta Query Tx: ",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "fb827c6d-4f7d-464a-bbd8-2d51f2b5e956",
                  "parentUUID": "40aae785-5714-43a3-8651-76f13984aff4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "68d708ed-1506-4382-a39f-42fb1ed5c5c1",
                "a5ae122e-5f89-4ce4-9719-dea3c02a5a7d",
                "3679716d-b865-4ee1-91ae-0f6ad5947ed7",
                "b27a813d-8574-421d-acb7-67d1eb9d9ed7",
                "0ac79b9a-793c-4026-a36a-8624e840557e",
                "6ab30097-f43e-4924-827b-83a8c358e148",
                "b01afe20-3b8e-4920-8d79-476dc88d1fd6",
                "d1bf9655-0530-492f-a615-c9d3ec2ffed3",
                "fb827c6d-4f7d-464a-bbd8-2d51f2b5e956"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 202,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dd510315-e2c4-406b-8f1c-b098f9862755",
              "title": "Reveal a meta of id type",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta of id type \"before each\" hook",
                  "timedOut": false,
                  "duration": 3003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "5c29d0ac-4685-41d6-9232-ccff5a66ce88",
                  "parentUUID": "dd510315-e2c4-406b-8f1c-b098f9862755",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of id type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"I|ID\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "289042ba-600d-4f49-92b4-d4343aabf2b9",
                  "parentUUID": "dd510315-e2c4-406b-8f1c-b098f9862755",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal a meta of id type Query Tx: ",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "eaa21a08-0bad-4e94-86a8-aa360918e86d",
                  "parentUUID": "dd510315-e2c4-406b-8f1c-b098f9862755",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "289042ba-600d-4f49-92b4-d4343aabf2b9",
                "eaa21a08-0bad-4e94-86a8-aa360918e86d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 66,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "979bf9f8-3c3d-4b0e-8e17-90ae6d1049ee",
              "title": "Reveal a meta of string type",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta of string type \"before each\" hook",
                  "timedOut": false,
                  "duration": 3003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "534bc032-1919-453d-9071-f75a2e833520",
                  "parentUUID": "979bf9f8-3c3d-4b0e-8e17-90ae6d1049ee",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of string type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"S|AAA\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "ce10fc71-df8d-41a5-857d-98c64ffc328d",
                  "parentUUID": "979bf9f8-3c3d-4b0e-8e17-90ae6d1049ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal a meta of string type Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "d5c02084-748f-4705-8782-2fe27fffa1bc",
                  "parentUUID": "979bf9f8-3c3d-4b0e-8e17-90ae6d1049ee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ce10fc71-df8d-41a5-857d-98c64ffc328d",
                "d5c02084-748f-4705-8782-2fe27fffa1bc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 49,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0bd927de-0dd3-44f8-9ab7-a36c3cd72834",
              "title": "Reveal a meta of dec type",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta of dec type \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "0dcd0033-8b74-4ddd-8133-897b58952e58",
                  "parentUUID": "0bd927de-0dd3-44f8-9ab7-a36c3cd72834",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of dec type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 40,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"D|0.344\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "6d873a9f-46ac-4cf6-9934-eef5f86512a7",
                  "parentUUID": "0bd927de-0dd3-44f8-9ab7-a36c3cd72834",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal a meta of dec type Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "f2892f7d-3134-4a89-b11e-05dbf0f68758",
                  "parentUUID": "0bd927de-0dd3-44f8-9ab7-a36c3cd72834",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6d873a9f-46ac-4cf6-9934-eef5f86512a7",
                "f2892f7d-3134-4a89-b11e-05dbf0f68758"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 46,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "36fb97a1-dd40-4237-a9b1-bf973134f3bd",
              "title": "Reveal a meta of height type",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal a meta of height type \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "7b432e0f-d8fa-4dbc-96bf-759c998947ed",
                  "parentUUID": "36fb97a1-dd40-4237-a9b1-bf973134f3bd",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal a meta of height type Meta Reveal: ",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"H|4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "014d9a9d-aa20-4d24-b7e9-a666daa81676",
                  "parentUUID": "36fb97a1-dd40-4237-a9b1-bf973134f3bd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal a meta of height type Query Tx: ",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "1adad593-8aca-4620-ba37-f4e89c0f86bd",
                  "parentUUID": "36fb97a1-dd40-4237-a9b1-bf973134f3bd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "014d9a9d-aa20-4d24-b7e9-a666daa81676",
                "1adad593-8aca-4620-ba37-f4e89c0f86bd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 57,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bd31f276-01a0-4bda-9cce-b83b12751214",
              "title": "Reveal an already revealed meta",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Metas Reveal an already revealed meta \"before each\" hook",
                  "timedOut": false,
                  "duration": 3002,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "89d64636-5cb6-49fc-94d2-d7e493eca4c2",
                  "parentUUID": "bd31f276-01a0-4bda-9cce-b83b12751214",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Meta Reveal: ",
                  "fullTitle": "Metas Reveal an already revealed meta Meta Reveal: ",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.metaRevealType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"metaFact\": \"H|4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.metaRevealPath)\n                .send(obj)\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "9db9ea8a-176f-415b-a677-5a04d29d7085",
                  "parentUUID": "bd31f276-01a0-4bda-9cce-b83b12751214",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Metas Reveal an already revealed meta Query Tx: ",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "871a2564-a071-4e45-a281-642b8c01daf8",
                  "parentUUID": "bd31f276-01a0-4bda-9cce-b83b12751214",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9db9ea8a-176f-415b-a677-5a04d29d7085",
                "871a2564-a071-4e45-a281-642b8c01daf8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 64,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8bef693d-e1e3-4460-9d6d-457953bd3a7c",
          "title": "Orders",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
          "file": "/test/testCases.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c6291b53-8e75-4879-925a-dbf4f9c68e69",
              "title": "Create an asset make order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Create an asset make order \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "e46c4cb4-d138-4f3f-a083-0e79c7a644d0",
                  "parentUUID": "c6291b53-8e75-4879-925a-dbf4f9c68e69",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Orders Create an asset make order Query Identity: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.clasificationID = value.value.id.value.classificationID.value.idString\n                    data.hashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "d2737692-2d98-4f96-8ca8-7b9280c9ae18",
                  "parentUUID": "c6291b53-8e75-4879-925a-dbf4f9c68e69",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Create an asset make order Define Order: ",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.defineOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"mutableTraits\": \"ORDER_MUTABLE2:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n                    \"immutableTraits\": \"ORDER_IMMUTABLE2:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n                    \"mutableMetaTraits\": \"ORDER_MUTABLE_META2:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerOwnableSplit:D|\" + config.makerownablesplit + \",expiry:H|\" + config.expiry + \",makerSplit:D|\" + config.makerownablesplit + \",takerID:S|\",\n                    \"immutableMetaTraits\": \"ORDER_IMMUTABLE_META2:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "b28091aa-f7db-4d21-b2e3-467021ad31f7",
                  "parentUUID": "c6291b53-8e75-4879-925a-dbf4f9c68e69",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create an asset make order Query Tx: ",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "4f65286d-4204-44fe-818c-081457820728",
                  "parentUUID": "c6291b53-8e75-4879-925a-dbf4f9c68e69",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Create an asset make order Query Classification: ",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qClassification)\n            var list = res.body.result.value.classifications.value.list\n            list.forEach(function (value) {\n                if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META2\") {\n                    data.chainID = value.value.id.value.chainID.value.idString\n                    data.clshashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "c9562d3f-938c-4767-a123-3de4d87f7753",
                  "parentUUID": "c6291b53-8e75-4879-925a-dbf4f9c68e69",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Orders Create an asset make order Query Asset: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qAsset)\n            var list = res.body.result.value.assets.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET4\") {\n                    data.aclasificationID = value.value.id.value.classificationID.value.idString\n                    data.ahashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "34bf4f4f-7183-4cfc-916c-c0eb86c236b3",
                  "parentUUID": "c6291b53-8e75-4879-925a-dbf4f9c68e69",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Asset Make Order: ",
                  "fullTitle": "Orders Create an asset make order Asset Make Order: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"classificationID\": data.chainID + '.' + data.clshashID,\n                    \"makerOwnableID\": data.aclasificationID + '|' + data.ahashID,\n                    \"takerOwnableID\": config.makerownableid,\n                    \"expiresIn\": config.expiry,\n                    \"makerOwnableSplit\": config.makerownablesplit,\n                    \"mutableProperties\": \"ORDER_MUTABLE2:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n                    \"immutableProperties\": \"ORDER_IMMUTABLE2:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n                    \"mutableMetaProperties\": \"ORDER_MUTABLE_META2:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerSplit:D|\" + config.makerownablesplit,\n                    \"immutableMetaProperties\": \"ORDER_IMMUTABLE_META2:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "f73521fd-a424-40cb-a7cd-48570cc212cf",
                  "parentUUID": "c6291b53-8e75-4879-925a-dbf4f9c68e69",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create an asset make order Query Tx: ",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "a974bf1f-e55d-44aa-827a-eb565866772a",
                  "parentUUID": "c6291b53-8e75-4879-925a-dbf4f9c68e69",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d2737692-2d98-4f96-8ca8-7b9280c9ae18",
                "b28091aa-f7db-4d21-b2e3-467021ad31f7",
                "4f65286d-4204-44fe-818c-081457820728",
                "c9562d3f-938c-4767-a123-3de4d87f7753",
                "34bf4f4f-7183-4cfc-916c-c0eb86c236b3",
                "f73521fd-a424-40cb-a7cd-48570cc212cf",
                "a974bf1f-e55d-44aa-827a-eb565866772a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 164,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "58b23666-e514-4254-bb5f-064e8a929f4d",
              "title": "Take an asset take order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Take an asset take order \"before each\" hook",
                  "timedOut": false,
                  "duration": 3003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "78a82435-adba-401b-a737-99af3a325cca",
                  "parentUUID": "58b23666-e514-4254-bb5f-064e8a929f4d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Orders Take an asset take order Query Identity: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.clasificationID = value.value.id.value.classificationID.value.idString\n                    data.hashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "e5ea73f9-004f-4621-9387-1184779f2208",
                  "parentUUID": "58b23666-e514-4254-bb5f-064e8a929f4d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Orders: ",
                  "fullTitle": "Orders Take an asset take order Query Orders: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qOrder)\n            var list = res.body.result.value.orders.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META2\") {\n                    data.oclassificationID = value.value.id.value.classificationID.value.idString\n                    data.omakerownableid = value.value.id.value.makerOwnableID.value.idString\n                    data.otakerownableid = value.value.id.value.takerOwnableID.value.idString\n                    data.omakerid = value.value.id.value.makerID.value.idString\n                    data.ohashid = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "e7ac1057-f9e6-41e3-9f44-7541d78f9ca6",
                  "parentUUID": "58b23666-e514-4254-bb5f-064e8a929f4d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Take Order: ",
                  "fullTitle": "Orders Take an asset take order Take Order: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.takeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"takerOwnableSplit\": config.makerownablesplit,\n                    \"orderID\": data.oclassificationID + '*' + data.omakerownableid + '*' + data.otakerownableid + '*' + data.omakerid + '*' + data.ohashid\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.takeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "658adf09-9306-4c51-9d9c-c8c165179e39",
                  "parentUUID": "58b23666-e514-4254-bb5f-064e8a929f4d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Take an asset take order Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "120d59e7-c51f-4169-8fa7-b65e24750d91",
                  "parentUUID": "58b23666-e514-4254-bb5f-064e8a929f4d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e5ea73f9-004f-4621-9387-1184779f2208",
                "e7ac1057-f9e6-41e3-9f44-7541d78f9ca6",
                "658adf09-9306-4c51-9d9c-c8c165179e39",
                "120d59e7-c51f-4169-8fa7-b65e24750d91"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 71,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "266039a8-98bb-46f7-a1b1-e53277b24946",
              "title": "Cancel an asset order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Cancel an asset order \"before each\" hook",
                  "timedOut": false,
                  "duration": 3003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "9664ff55-0598-4de4-970c-4bf7aa6e18b8",
                  "parentUUID": "266039a8-98bb-46f7-a1b1-e53277b24946",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Orders Cancel an asset order Query Identity: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.clasificationID = value.value.id.value.classificationID.value.idString\n                    data.hashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "71c2f31e-44d1-4cf3-9856-e3df9f1a9687",
                  "parentUUID": "266039a8-98bb-46f7-a1b1-e53277b24946",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Cancel an asset order Define Order: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.defineOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"mutableTraits\": \"ORDER_MUTABLE3:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n                    \"immutableTraits\": \"ORDER_IMMUTABLE3:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n                    \"mutableMetaTraits\": \"ORDER_MUTABLE_META3:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerOwnableSplit:D|\" + config.makerownablesplit + \",expiry:H|\" + config.expiry + \",makerSplit:D|\" + config.makerownablesplit + \",takerID:S|ID\",\n                    \"immutableMetaTraits\": \"ORDER_IMMUTABLE_META3:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "166945d1-7676-4f27-97ef-4a8a3008aa4b",
                  "parentUUID": "266039a8-98bb-46f7-a1b1-e53277b24946",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Cancel an asset order Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "36735e36-50e4-462b-9cf3-4bbc7c88c96f",
                  "parentUUID": "266039a8-98bb-46f7-a1b1-e53277b24946",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Cancel an asset order Query Classification: ",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qClassification)\n            var list = res.body.result.value.classifications.value.list\n            list.forEach(function (value) {\n                if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META3\") {\n                    data.chainID = value.value.id.value.chainID.value.idString\n                    data.clshashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "10d59be7-a795-410e-b78f-5cc810817283",
                  "parentUUID": "266039a8-98bb-46f7-a1b1-e53277b24946",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Orders Cancel an asset order Query Asset: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qAsset)\n            var list = res.body.result.value.assets.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"AssetD\") {\n                    data.aclasificationID = value.value.id.value.classificationID.value.idString\n                    data.ahashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "f5f97008-c26a-42ea-961e-2b63ff1283e5",
                  "parentUUID": "266039a8-98bb-46f7-a1b1-e53277b24946",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Make Order: ",
                  "fullTitle": "Orders Cancel an asset order Make Order: ",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"classificationID\": data.chainID + '.' + data.clshashID,\n                    \"makerOwnableID\": data.aclasificationID + '|' + data.ahashID,\n                    \"takerOwnableID\": config.makerownableid,\n                    \"expiresIn\": config.expiry,\n                    \"makerOwnableSplit\": config.makerownablesplit,\n                    \"mutableProperties\": \"ORDER_MUTABLE3:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n                    \"immutableProperties\": \"ORDER_IMMUTABLE3:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n                    \"mutableMetaProperties\": \"ORDER_MUTABLE_META3:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerSplit:D|\" + config.makerownablesplit,\n                    \"immutableMetaProperties\": \"ORDER_IMMUTABLE_META3:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "a81b11d6-032b-48d6-a32c-c8695e5c5cee",
                  "parentUUID": "266039a8-98bb-46f7-a1b1-e53277b24946",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Cancel an asset order Query Tx: ",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "6034e6c1-a62f-41f0-af44-1f3252a2bd6c",
                  "parentUUID": "266039a8-98bb-46f7-a1b1-e53277b24946",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Orders: ",
                  "fullTitle": "Orders Cancel an asset order Query Orders: ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qOrder)\n            var list = res.body.result.value.orders.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META3\") {\n                    data.oclassificationID = value.value.id.value.classificationID.value.idString\n                    data.omakerownableid = value.value.id.value.makerOwnableID.value.idString\n                    data.otakerownableid = value.value.id.value.takerOwnableID.value.idString\n                    data.omakerid = value.value.id.value.makerID.value.idString\n                    data.ohashid = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {
                    "message": "TypeError: Cannot read property 'forEach' of null",
                    "estack": "TypeError: Cannot read property 'forEach' of null\n    at Context.it (test/testCases.js:4618:18)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                    "diff": null
                  },
                  "uuid": "05b3b0cd-4aa1-49b0-a4e0-5ab69f41e53d",
                  "parentUUID": "266039a8-98bb-46f7-a1b1-e53277b24946",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cancel Order: ",
                  "fullTitle": "Orders Cancel an asset order Cancel Order: ",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.cancelOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"orderID\": data.oclassificationID + '*' + data.omakerownableid + '*' + data.otakerownableid + '*' + data.omakerid + '*' + data.ohashid\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.cancelOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "1bd99af3-1661-470d-bfdb-4869b8c2eb85",
                  "parentUUID": "266039a8-98bb-46f7-a1b1-e53277b24946",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Cancel an asset order Query Tx: ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "2a7e85d7-a6b1-426f-8e1f-9f85d1405a7c",
                  "parentUUID": "266039a8-98bb-46f7-a1b1-e53277b24946",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "71c2f31e-44d1-4cf3-9856-e3df9f1a9687",
                "166945d1-7676-4f27-97ef-4a8a3008aa4b",
                "36735e36-50e4-462b-9cf3-4bbc7c88c96f",
                "10d59be7-a795-410e-b78f-5cc810817283",
                "f5f97008-c26a-42ea-961e-2b63ff1283e5",
                "a81b11d6-032b-48d6-a32c-c8695e5c5cee",
                "6034e6c1-a62f-41f0-af44-1f3252a2bd6c",
                "1bd99af3-1661-470d-bfdb-4869b8c2eb85",
                "2a7e85d7-a6b1-426f-8e1f-9f85d1405a7c"
              ],
              "failures": [
                "05b3b0cd-4aa1-49b0-a4e0-5ab69f41e53d"
              ],
              "pending": [],
              "skipped": [],
              "duration": 190,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0717c935-6bcf-475a-94a0-47ece33a077b",
              "title": "Create a coin make order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Create a coin make order \"before each\" hook",
                  "timedOut": false,
                  "duration": 3001,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "931fa7cd-9efe-4c08-9035-941ae7408743",
                  "parentUUID": "0717c935-6bcf-475a-94a0-47ece33a077b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Orders Create a coin make order Query Identity: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.clasificationID = value.value.id.value.classificationID.value.idString\n                    data.hashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "1277239a-afaf-4c24-bce0-5d0ad43045d5",
                  "parentUUID": "0717c935-6bcf-475a-94a0-47ece33a077b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Create a coin make order Define Order: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.defineOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"mutableTraits\": \"ORDER_MUTABLE4:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n                    \"immutableTraits\": \"ORDER_IMMUTABLE4:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n                    \"mutableMetaTraits\": \"ORDER_MUTABLE_META4:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerOwnableSplit:D|\" + config.makerownablesplit + \",expiry:H|\" + config.expiry + \",makerSplit:D|\" + config.makerownablesplit + \",takerID:S|ID\",\n                    \"immutableMetaTraits\": \"ORDER_IMMUTABLE_META4:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "ecf1d2ca-0418-4f28-9d62-8745db9c6c55",
                  "parentUUID": "0717c935-6bcf-475a-94a0-47ece33a077b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create a coin make order Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "2b0f588e-97a0-44f3-b555-de7d4d140acf",
                  "parentUUID": "0717c935-6bcf-475a-94a0-47ece33a077b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Create a coin make order Query Classification: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qClassification)\n            var list = res.body.result.value.classifications.value.list\n            list.forEach(function (value) {\n                if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META4\") {\n                    data.chainID = value.value.id.value.chainID.value.idString\n                    data.clshashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "1281d5d9-6c70-456b-b8f5-32da9b532b62",
                  "parentUUID": "0717c935-6bcf-475a-94a0-47ece33a077b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Wrap a coin: ",
                  "fullTitle": "Orders Create a coin make order Wrap a coin: ",
                  "timedOut": false,
                  "duration": 58,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let obj = {\n                \"type\": config.wrapCoinType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"coins\": config.coins\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.wrapCoinPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "6ef7230e-dd61-4723-9ec6-e18f9f4d0478",
                  "parentUUID": "0717c935-6bcf-475a-94a0-47ece33a077b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create a coin make order Query Tx: ",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "b093e187-5d32-4e66-8011-0de6ef04fac7",
                  "parentUUID": "0717c935-6bcf-475a-94a0-47ece33a077b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Coin Make Order: ",
                  "fullTitle": "Orders Create a coin make order Coin Make Order: ",
                  "timedOut": false,
                  "duration": 46,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"classificationID\": data.chainID + '.' + data.clshashID,\n                    \"makerOwnableID\": config.makerownableid,\n                    \"takerOwnableID\": config.takerownableid,\n                    \"expiresIn\": config.expiry,\n                    \"makerOwnableSplit\": config.makerownablesplit,\n                    \"mutableProperties\": \"ORDER_MUTABLE4:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n                    \"immutableProperties\": \"ORDER_IMMUTABLE4:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n                    \"mutableMetaProperties\": \"ORDER_MUTABLE_META4:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate,\n                    \"immutableMetaProperties\": \"ORDER_IMMUTABLE_META4:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "de6ba7f3-d1f0-4108-ad13-4ab3342476cf",
                  "parentUUID": "0717c935-6bcf-475a-94a0-47ece33a077b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create a coin make order Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "04392dc9-e5a9-490f-9a5c-69c7cfa6a299",
                  "parentUUID": "0717c935-6bcf-475a-94a0-47ece33a077b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1277239a-afaf-4c24-bce0-5d0ad43045d5",
                "ecf1d2ca-0418-4f28-9d62-8745db9c6c55",
                "2b0f588e-97a0-44f3-b555-de7d4d140acf",
                "1281d5d9-6c70-456b-b8f5-32da9b532b62",
                "6ef7230e-dd61-4723-9ec6-e18f9f4d0478",
                "b093e187-5d32-4e66-8011-0de6ef04fac7",
                "de6ba7f3-d1f0-4108-ad13-4ab3342476cf",
                "04392dc9-e5a9-490f-9a5c-69c7cfa6a299"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 207,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "35cb8af1-85b3-4f8b-a871-27e85f11d5e7",
              "title": "Take an coin take order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Take an coin take order \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "2bc3efa9-1a18-4fb4-bd9b-1e8317dcd489",
                  "parentUUID": "35cb8af1-85b3-4f8b-a871-27e85f11d5e7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Orders Take an coin take order Query Identity: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.clasificationID = value.value.id.value.classificationID.value.idString\n                    data.hashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "f3f7ebcc-ef8a-43fc-ac95-17835ada7161",
                  "parentUUID": "35cb8af1-85b3-4f8b-a871-27e85f11d5e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Orders: ",
                  "fullTitle": "Orders Take an coin take order Query Orders: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qOrder)\n            var list = res.body.result.value.orders.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META4\") {\n                    data.oclassificationID = value.value.id.value.classificationID.value.idString\n                    data.omakerownableid = value.value.id.value.makerOwnableID.value.idString\n                    data.takerownableid = value.value.id.value.takerOwnableID.value.idString\n                    data.omakerid = value.value.id.value.makerID.value.idString\n                    data.ohashid = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "45538b7c-654b-4660-9f64-05c0d0b42535",
                  "parentUUID": "35cb8af1-85b3-4f8b-a871-27e85f11d5e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Take Order: ",
                  "fullTitle": "Orders Take an coin take order Take Order: ",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.takeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"takerOwnableSplit\": config.makerownablesplit,\n                    \"orderID\": data.oclassificationID + '*' + data.omakerownableid + '*' + data.takerownableid + '*' + data.omakerid + '*' + data.ohashid\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.takeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "a3918275-26f5-4134-b444-43d6e614d825",
                  "parentUUID": "35cb8af1-85b3-4f8b-a871-27e85f11d5e7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Take an coin take order Query Tx: ",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "8bcb4221-2176-4ca2-8f8a-26b7d961fb7f",
                  "parentUUID": "35cb8af1-85b3-4f8b-a871-27e85f11d5e7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f3f7ebcc-ef8a-43fc-ac95-17835ada7161",
                "45538b7c-654b-4660-9f64-05c0d0b42535",
                "a3918275-26f5-4134-b444-43d6e614d825",
                "8bcb4221-2176-4ca2-8f8a-26b7d961fb7f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 77,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bb2918c5-2a31-4128-9136-1bad6a922783",
              "title": "Cancel a coin order",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Cancel a coin order \"before each\" hook",
                  "timedOut": false,
                  "duration": 3003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "2af32ffc-9079-44d8-a83d-0ee92139dbb8",
                  "parentUUID": "bb2918c5-2a31-4128-9136-1bad6a922783",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Orders Cancel a coin order Query Identity: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.clasificationID = value.value.id.value.classificationID.value.idString\n                    data.hashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "655ddb8e-c97f-4199-bcda-2a6444299a1d",
                  "parentUUID": "bb2918c5-2a31-4128-9136-1bad6a922783",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Cancel a coin order Define Order: ",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.defineOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"mutableTraits\": \"ORDER_MUTABLE5:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n                    \"immutableTraits\": \"ORDER_IMMUTABLE5:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n                    \"mutableMetaTraits\": \"ORDER_MUTABLE_META5:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerOwnableSplit:D|\" + config.makerownablesplit + \",expiry:H|\" + config.expiry + \",makerSplit:D|\" + config.makerownablesplit + \",takerID:S|ID\",\n                    \"immutableMetaTraits\": \"ORDER_IMMUTABLE_META5:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "06f3a081-15ac-4e25-9319-0ca4f6d85f29",
                  "parentUUID": "bb2918c5-2a31-4128-9136-1bad6a922783",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Cancel a coin order Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "1b33503f-8728-4b37-8d7a-3d8b584efdb4",
                  "parentUUID": "bb2918c5-2a31-4128-9136-1bad6a922783",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Cancel a coin order Query Classification: ",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qClassification)\n            var list = res.body.result.value.classifications.value.list\n            list.forEach(function (value) {\n                if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META5\") {\n                    data.chainID = value.value.id.value.chainID.value.idString\n                    data.clshashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "6f609db0-78eb-4a3f-aa28-fbedbb1b2441",
                  "parentUUID": "bb2918c5-2a31-4128-9136-1bad6a922783",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Orders Cancel a coin order Query Asset: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qAsset)\n            var list = res.body.result.value.assets.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"AssetD\") {\n                    data.aclasificationID = value.value.id.value.classificationID.value.idString\n                    data.ahashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "75309342-23ba-4f62-b2f7-8f0f7c274a47",
                  "parentUUID": "bb2918c5-2a31-4128-9136-1bad6a922783",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Make Coin Order: ",
                  "fullTitle": "Orders Cancel a coin order Make Coin Order: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"classificationID\": data.chainID + '.' + data.clshashID,\n                    \"makerOwnableID\": config.makerownableid,\n                    \"takerOwnableID\": config.makerownableid,\n                    \"expiresIn\": config.expiry,\n                    \"makerOwnableSplit\": config.makerownablesplit,\n                    \"mutableProperties\": \"ORDER_MUTABLE5:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n                    \"immutableProperties\": \"ORDER_IMMUTABLE5:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n                    \"mutableMetaProperties\": \"ORDER_MUTABLE_META5:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerSplit:D|\" + config.makerownablesplit,\n                    \"immutableMetaProperties\": \"ORDER_IMMUTABLE_META5:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "a720aa6f-f6e7-43d8-8cad-dcfd56a09478",
                  "parentUUID": "bb2918c5-2a31-4128-9136-1bad6a922783",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Cancel a coin order Query Tx: ",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "dd09af74-57d4-4ebf-9e39-da1d33fa913b",
                  "parentUUID": "bb2918c5-2a31-4128-9136-1bad6a922783",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Orders: ",
                  "fullTitle": "Orders Cancel a coin order Query Orders: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qOrder)\n            var list = res.body.result.value.orders.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META5\") {\n                    data.oclassificationID = value.value.id.value.classificationID.value.idString\n                    data.omakerownableid = value.value.id.value.makerOwnableID.value.idString\n                    data.takerownableid = value.value.id.value.takerOwnableID.value.idString\n                    data.omakerid = value.value.id.value.makerID.value.idString\n                    data.ohashid = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "8185fb5f-c000-4900-bc98-ffd6ee1b9c6d",
                  "parentUUID": "bb2918c5-2a31-4128-9136-1bad6a922783",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cancel Order: ",
                  "fullTitle": "Orders Cancel a coin order Cancel Order: ",
                  "timedOut": false,
                  "duration": 42,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.cancelOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"orderID\": data.oclassificationID + '*' + data.omakerownableid + '*' + data.takerownableid + '*' + data.omakerid + '*' + data.ohashid\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.cancelOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "6f18c51f-eecd-4b0e-b0e8-6d6fad0e48d8",
                  "parentUUID": "bb2918c5-2a31-4128-9136-1bad6a922783",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Cancel a coin order Query Tx: ",
                  "timedOut": false,
                  "duration": 15,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "e3206133-7772-41a4-8df8-103e138a7f04",
                  "parentUUID": "bb2918c5-2a31-4128-9136-1bad6a922783",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "655ddb8e-c97f-4199-bcda-2a6444299a1d",
                "06f3a081-15ac-4e25-9319-0ca4f6d85f29",
                "1b33503f-8728-4b37-8d7a-3d8b584efdb4",
                "6f609db0-78eb-4a3f-aa28-fbedbb1b2441",
                "75309342-23ba-4f62-b2f7-8f0f7c274a47",
                "a720aa6f-f6e7-43d8-8cad-dcfd56a09478",
                "dd09af74-57d4-4ebf-9e39-da1d33fa913b",
                "8185fb5f-c000-4900-bc98-ffd6ee1b9c6d",
                "6f18c51f-eecd-4b0e-b0e8-6d6fad0e48d8",
                "e3206133-7772-41a4-8df8-103e138a7f04"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 211,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e3e67bc2-3724-4940-83b1-6a282cfdbbc5",
              "title": "Create an order with correct takerID",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Create an order with correct takerID \"before each\" hook",
                  "timedOut": false,
                  "duration": 3004,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "5a929099-bc31-4161-acf2-f58875fffd1c",
                  "parentUUID": "e3e67bc2-3724-4940-83b1-6a282cfdbbc5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity 1: ",
                  "fullTitle": "Orders Create an order with correct takerID Query Identity 1: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.clasificationID1 = value.value.id.value.classificationID.value.idString\n                    data.hashID1 = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "52b4fa66-74c8-453d-a798-b0a0af79afcb",
                  "parentUUID": "e3e67bc2-3724-4940-83b1-6a282cfdbbc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 2: ",
                  "fullTitle": "Orders Create an order with correct takerID Query Identity 2: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits2\") {\n                    data.clasificationID2 = value.value.id.value.classificationID.value.idString\n                    data.hashID2 = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "2b9e2bf3-550d-444b-a9f5-ebd4938c9757",
                  "parentUUID": "e3e67bc2-3724-4940-83b1-6a282cfdbbc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Create an order with correct takerID Define Order: ",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.defineOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID1 + '|' + data.hashID1,\n                    \"mutableTraits\": \"ORDER_MUTABLE6:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n                    \"immutableTraits\": \"ORDER_IMMUTABLE6:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n                    \"mutableMetaTraits\": \"ORDER_MUTABLE_META6:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerOwnableSplit:D|\" + config.makerownablesplit + \",expiry:H|\" + config.expiry + \",makerSplit:D|\" + config.makerownablesplit + \",takerID:S|ID\",\n                    \"immutableMetaTraits\": \"ORDER_IMMUTABLE_META6:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "6d4c74ee-9169-4fcd-b70c-9d704f289341",
                  "parentUUID": "e3e67bc2-3724-4940-83b1-6a282cfdbbc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create an order with correct takerID Query Tx: ",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "54c8d32d-c2db-4d48-8d02-7326e39918d0",
                  "parentUUID": "e3e67bc2-3724-4940-83b1-6a282cfdbbc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Create an order with correct takerID Query Classification: ",
                  "timedOut": false,
                  "duration": 27,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qClassification)\n            var list = res.body.result.value.classifications.value.list\n            list.forEach(function (value) {\n                if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META6\") {\n                    data.chainID = value.value.id.value.chainID.value.idString\n                    data.clshashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "9222961e-ac28-49b4-a268-e34c712d1196",
                  "parentUUID": "e3e67bc2-3724-4940-83b1-6a282cfdbbc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Orders Create an order with correct takerID Query Asset: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qAsset)\n            var list = res.body.result.value.assets.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET4\") {\n                    data.aclasificationID = value.value.id.value.classificationID.value.idString\n                    data.ahashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "8d32b7f8-543a-4f45-bd14-86929338eefc",
                  "parentUUID": "e3e67bc2-3724-4940-83b1-6a282cfdbbc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Asset Make Order: ",
                  "fullTitle": "Orders Create an order with correct takerID Asset Make Order: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID1 + '|' + data.hashID1,\n                    \"classificationID\": data.chainID + '.' + data.clshashID,\n                    \"makerOwnableID\": data.aclasificationID + '|' + data.ahashID,\n                    \"takerOwnableID\": config.makerownableid,\n                    \"expiresIn\": config.expiry,\n                    \"makerOwnableSplit\": config.makerownablesplit,\n                    \"mutableProperties\": \"ORDER_MUTABLE6:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n                    \"immutableProperties\": \"ORDER_IMMUTABLE6:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n                    \"mutableMetaProperties\": \"ORDER_MUTABLE_META6:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerSplit:D|\" + config.makerownablesplit,\n                    \"immutableMetaProperties\": \"ORDER_IMMUTABLE_META6:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "a18996d3-66be-4abc-94a2-7b33de796541",
                  "parentUUID": "e3e67bc2-3724-4940-83b1-6a282cfdbbc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create an order with correct takerID Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "c24d9dc3-b754-4e61-a6a9-ff2d21bb6f7a",
                  "parentUUID": "e3e67bc2-3724-4940-83b1-6a282cfdbbc5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "52b4fa66-74c8-453d-a798-b0a0af79afcb",
                "2b9e2bf3-550d-444b-a9f5-ebd4938c9757",
                "6d4c74ee-9169-4fcd-b70c-9d704f289341",
                "54c8d32d-c2db-4d48-8d02-7326e39918d0",
                "9222961e-ac28-49b4-a268-e34c712d1196",
                "8d32b7f8-543a-4f45-bd14-86929338eefc",
                "a18996d3-66be-4abc-94a2-7b33de796541",
                "c24d9dc3-b754-4e61-a6a9-ff2d21bb6f7a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 177,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8b6bd652-3444-478f-bdb5-7eb078785ba1",
              "title": "Create an order with other takerID",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Create an order with other takerID \"before each\" hook",
                  "timedOut": false,
                  "duration": 3003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "7893bfb6-20dd-4703-aec4-cfa5b1a44308",
                  "parentUUID": "8b6bd652-3444-478f-bdb5-7eb078785ba1",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity 1: ",
                  "fullTitle": "Orders Create an order with other takerID Query Identity 1: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.clasificationID1 = value.value.id.value.classificationID.value.idString\n                    data.hashID1 = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "f19a7941-69df-4709-aebe-66083ba1b8ad",
                  "parentUUID": "8b6bd652-3444-478f-bdb5-7eb078785ba1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 2: ",
                  "fullTitle": "Orders Create an order with other takerID Query Identity 2: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits2\") {\n                    data.clasificationID2 = value.value.id.value.classificationID.value.idString\n                    data.hashID2 = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "e33c66fd-aff9-40e4-ba3b-2408d91bcde9",
                  "parentUUID": "8b6bd652-3444-478f-bdb5-7eb078785ba1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 3: ",
                  "fullTitle": "Orders Create an order with other takerID Query Identity 3: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits3\") {\n                    data.clasificationID3 = value.value.id.value.classificationID.value.idString\n                    data.hashID3 = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "9b486c2d-ca55-4d56-a7f2-bc9a6f8ed855",
                  "parentUUID": "8b6bd652-3444-478f-bdb5-7eb078785ba1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Create an order with other takerID Query Classification: ",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qClassification)\n            var list = res.body.result.value.classifications.value.list\n            list.forEach(function (value) {\n                if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META2\") {\n                    data.chainID = value.value.id.value.chainID.value.idString\n                    data.clshashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "5e9af242-7fb6-425d-bdac-2b0aff2921ea",
                  "parentUUID": "8b6bd652-3444-478f-bdb5-7eb078785ba1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Orders Create an order with other takerID Query Asset: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qAsset)\n            var list = res.body.result.value.assets.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET4\") {\n                    data.aclasificationID = value.value.id.value.classificationID.value.idString\n                    data.ahashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "07642156-8d8c-4cdf-97f3-d5c7d75dc195",
                  "parentUUID": "8b6bd652-3444-478f-bdb5-7eb078785ba1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Asset Make Order: ",
                  "fullTitle": "Orders Create an order with other takerID Asset Make Order: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"classificationID\": data.chainID + '.' + data.clshashID,\n                    \"makerOwnableID\": data.aclasificationID + '|' + data.ahashID,\n                    \"takerOwnableID\": config.makerownableid,\n                    \"expiresIn\": config.expiry,\n                    \"makerOwnableSplit\": config.makerownablesplit,\n                    \"mutableProperties\": \"ORDER_MUTABLE6:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n                    \"immutableProperties\": \"ORDER_IMMUTABLE6:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n                    \"mutableMetaProperties\": \"ORDER_MUTABLE_META6:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerSplit:D|\" + config.makerownablesplit + \",takerID:S|\" + data.clasificationID3 * data.hashID3,\n                    \"immutableMetaProperties\": \"ORDER_IMMUTABLE_META6:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "d5091d4e-2089-42fc-854f-746774eeedf7",
                  "parentUUID": "8b6bd652-3444-478f-bdb5-7eb078785ba1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create an order with other takerID Query Tx: ",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "d451746d-3067-4d97-9760-6b1b74451fc3",
                  "parentUUID": "8b6bd652-3444-478f-bdb5-7eb078785ba1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f19a7941-69df-4709-aebe-66083ba1b8ad",
                "e33c66fd-aff9-40e4-ba3b-2408d91bcde9",
                "9b486c2d-ca55-4d56-a7f2-bc9a6f8ed855",
                "5e9af242-7fb6-425d-bdac-2b0aff2921ea",
                "07642156-8d8c-4cdf-97f3-d5c7d75dc195",
                "d5091d4e-2089-42fc-854f-746774eeedf7",
                "d451746d-3067-4d97-9760-6b1b74451fc3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 134,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "23a8794b-f03f-42d0-8bb3-b1b0b1537553",
              "title": "Create order with takerID",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Create order with takerID \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "595f6d86-29b8-4696-a9e3-6a5305201332",
                  "parentUUID": "23a8794b-f03f-42d0-8bb3-b1b0b1537553",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity: ",
                  "fullTitle": "Orders Create order with takerID Query Identity: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.clasificationID = value.value.id.value.classificationID.value.idString\n                    data.hashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "a162a638-e8a1-4665-8b47-0fe214d9bb62",
                  "parentUUID": "23a8794b-f03f-42d0-8bb3-b1b0b1537553",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Create order with takerID Define Order: ",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.defineOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"mutableTraits\": \"ORDER_MUTABLE7:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n                    \"immutableTraits\": \"ORDER_IMMUTABLE7:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n                    \"mutableMetaTraits\": \"ORDER_MUTABLE_META7:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerOwnableSplit:D|\" + config.makerownablesplit + \",expiry:H|\" + config.expiry + \",makerSplit:D|\" + config.makerownablesplit + \",takerID:S|\",\n                    \"immutableMetaTraits\": \"ORDER_IMMUTABLE_META7:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "547c0cab-00bf-4381-8661-3503bf7375a4",
                  "parentUUID": "23a8794b-f03f-42d0-8bb3-b1b0b1537553",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create order with takerID Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "bf0b1184-a0f0-458b-b50c-bf1e8852c273",
                  "parentUUID": "23a8794b-f03f-42d0-8bb3-b1b0b1537553",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Create order with takerID Query Classification: ",
                  "timedOut": false,
                  "duration": 28,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qClassification)\n            var list = res.body.result.value.classifications.value.list\n            list.forEach(function (value) {\n                if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META7\") {\n                    data.chainID = value.value.id.value.chainID.value.idString\n                    data.clshashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "7bc2b65f-b876-4c32-8dbb-25c4c17a62e5",
                  "parentUUID": "23a8794b-f03f-42d0-8bb3-b1b0b1537553",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Orders Create order with takerID Query Asset: ",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qAsset)\n            var list = res.body.result.value.assets.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET4\") {\n                    data.aclasificationID = value.value.id.value.classificationID.value.idString\n                    data.ahashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "4b8fedf2-62ea-4640-9b87-26dbe6a39e51",
                  "parentUUID": "23a8794b-f03f-42d0-8bb3-b1b0b1537553",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Asset Make Order: ",
                  "fullTitle": "Orders Create order with takerID Asset Make Order: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"classificationID\": data.chainID + '.' + data.clshashID,\n                    \"makerOwnableID\": data.aclasificationID + '|' + data.ahashID,\n                    \"takerOwnableID\": config.makerownableid,\n                    \"expiresIn\": config.expiry,\n                    \"makerOwnableSplit\": config.makerownablesplit,\n                    \"mutableProperties\": \"ORDER_MUTABLE7:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n                    \"immutableProperties\": \"ORDER_IMMUTABLE7:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n                    \"mutableMetaProperties\": \"ORDER_MUTABLE_META7:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerSplit:D|\" + config.makerownablesplit + \",takerID:S|\" + data.clasificationID * data.hashID,\n                    \"immutableMetaProperties\": \"ORDER_IMMUTABLE_META7:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "95108a98-800b-4939-8f61-5a1d7fe294a7",
                  "parentUUID": "23a8794b-f03f-42d0-8bb3-b1b0b1537553",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Create order with takerID Query Tx: ",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "664a8f16-dfdd-47b6-8d12-057fa4e1a28c",
                  "parentUUID": "23a8794b-f03f-42d0-8bb3-b1b0b1537553",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a162a638-e8a1-4665-8b47-0fe214d9bb62",
                "547c0cab-00bf-4381-8661-3503bf7375a4",
                "bf0b1184-a0f0-458b-b50c-bf1e8852c273",
                "7bc2b65f-b876-4c32-8dbb-25c4c17a62e5",
                "4b8fedf2-62ea-4640-9b87-26dbe6a39e51",
                "95108a98-800b-4939-8f61-5a1d7fe294a7",
                "664a8f16-dfdd-47b6-8d12-057fa4e1a28c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 170,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "87a1b031-ea88-4c81-8bc3-76209c3f9b06",
              "title": "Sell assets with splits, where taker gives more splits than he is supposed to",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to \"before each\" hook",
                  "timedOut": false,
                  "duration": 3000,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "39231498-9cce-4a22-ac4c-8f039d26df72",
                  "parentUUID": "87a1b031-ea88-4c81-8bc3-76209c3f9b06",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity 1: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Identity 1: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.clasificationID1 = value.value.id.value.classificationID.value.idString\n                    data.hashID1 = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "9d6af32f-a4bf-4ff8-84f2-d12e901560d1",
                  "parentUUID": "87a1b031-ea88-4c81-8bc3-76209c3f9b06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 2: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Identity 2: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits2\") {\n                    data.clasificationID2 = value.value.id.value.classificationID.value.idString\n                    data.hashID2 = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "5d5abc08-4971-4424-929d-e7e41bcabbeb",
                  "parentUUID": "87a1b031-ea88-4c81-8bc3-76209c3f9b06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 3: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Identity 3: ",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits3\") {\n                    data.clasificationID3 = value.value.id.value.classificationID.value.idString\n                    data.hashID3 = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "36d15680-c928-4581-a630-32eb21776ace",
                  "parentUUID": "87a1b031-ea88-4c81-8bc3-76209c3f9b06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Define Asset: ",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"mutableTraits\": \"ASSETS10:S|num1\" + \",burn:H|1\",\n                    \"immutableTraits\": \"ASSETS11:S|\",\n                    \"mutableMetaTraits\": \"ASSETS12:S|num3\",\n                    \"immutableMetaTraits\": \"ASSETS13:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "c677c64b-8989-48b8-84cf-46dae626c4ba",
                  "parentUUID": "87a1b031-ea88-4c81-8bc3-76209c3f9b06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Tx: ",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "5c3ddd48-271a-4f4e-8acd-63c0d4db4c24",
                  "parentUUID": "87a1b031-ea88-4c81-8bc3-76209c3f9b06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Classification: ",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qClassification)\n            var list = res.body.result.value.classifications.value.list\n            list.forEach(function (value) {\n                if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSETS13\") {\n                    data.chainID = value.value.id.value.chainID.value.idString\n                    data.clshashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "032d9806-a7fc-4a9d-8beb-6af50a6dacd6",
                  "parentUUID": "87a1b031-ea88-4c81-8bc3-76209c3f9b06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Mint Asset: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": data.clasificationID1 + '|' + data.hashID1,\n                    \"fromID\": data.clasificationID1 + '|' + data.hashID1,\n                    \"classificationID\": data.chainID + '.' + data.clshashID,\n                    \"mutableProperties\": \"ASSETS10:S|num1\" + \",burn:H|1\",\n                    \"immutableProperties\": \"ASSETS11:S|abc\",\n                    \"mutableMetaProperties\": \"ASSETS12:S|num3\",\n                    \"immutableMetaProperties\": \"ASSETS13:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "0b2e2b11-5c70-4d49-9535-ad65ebb9fd31",
                  "parentUUID": "87a1b031-ea88-4c81-8bc3-76209c3f9b06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Tx: ",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "2c61d9e6-6ddf-4e26-a08e-faa8d8d94b09",
                  "parentUUID": "87a1b031-ea88-4c81-8bc3-76209c3f9b06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Asset: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qAsset)\n            var list = res.body.result.value.assets.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSETS13\") {\n                    data.aclasificationID = value.value.id.value.classificationID.value.idString\n                    data.ahashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "f0be684f-7d31-4527-bbba-4b68a4b011bc",
                  "parentUUID": "87a1b031-ea88-4c81-8bc3-76209c3f9b06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Define Order: ",
                  "timedOut": false,
                  "duration": 33,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.defineOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID1 + '|' + data.hashID1,\n                    \"mutableTraits\": \"ORDER_MUTABLE21:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n                    \"immutableTraits\": \"ORDER_IMMUTABLE22:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n                    \"mutableMetaTraits\": \"ORDER_MUTABLE_META23:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerOwnableSplit:D|\" + config.makerownablesplit + \",expiry:H|\" + config.expiry + \",makerSplit:D|\" + config.makerownablesplit + \",takerSplit:D|,takerID:S|\",\n                    \"immutableMetaTraits\": \"ORDER_IMMUTABLE_META24:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "5855db48-e076-4353-b0c6-bcf0bb40b2c6",
                  "parentUUID": "87a1b031-ea88-4c81-8bc3-76209c3f9b06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "8c7788e8-2698-4f2b-a127-10ff160453d7",
                  "parentUUID": "87a1b031-ea88-4c81-8bc3-76209c3f9b06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Classification: ",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qClassification)\n            var list = res.body.result.value.classifications.value.list\n            list.forEach(function (value) {\n                if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META24\") {\n                    data.chainID = value.value.id.value.chainID.value.idString\n                    data.clshashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "15138bf2-1044-4f03-a533-7de9ce8db2ca",
                  "parentUUID": "87a1b031-ea88-4c81-8bc3-76209c3f9b06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Asset Make Order: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Asset Make Order: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID1 + '|' + data.hashID1,\n                    \"classificationID\": data.chainID + '.' + data.clshashID,\n                    \"makerOwnableID\": data.aclasificationID + '|' + data.ahashID,\n                    \"takerOwnableID\": config.makerownableid,\n                    \"expiresIn\": config.expiry,\n                    \"makerOwnableSplit\": config.makerownablesplit,\n                    \"mutableProperties\": \"ORDER_MUTABLE21:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n                    \"immutableProperties\": \"ORDER_IMMUTABLE22:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n                    \"mutableMetaProperties\": \"ORDER_MUTABLE_META23:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerSplit:D|\" + config.makerownablesplit + \",takerID:S|,makerID:S|\" + data.clasificationID3 * data.hashID3,\n                    \"immutableMetaProperties\": \"ORDER_IMMUTABLE_META24:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "27826ae3-3721-4c6c-8ee2-9f021f2ad601",
                  "parentUUID": "87a1b031-ea88-4c81-8bc3-76209c3f9b06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Sell assets with splits, where taker gives more splits than he is supposed to Query Tx: ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "23587e31-f025-458e-b5cf-94274010cf61",
                  "parentUUID": "87a1b031-ea88-4c81-8bc3-76209c3f9b06",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9d6af32f-a4bf-4ff8-84f2-d12e901560d1",
                "5d5abc08-4971-4424-929d-e7e41bcabbeb",
                "36d15680-c928-4581-a630-32eb21776ace",
                "c677c64b-8989-48b8-84cf-46dae626c4ba",
                "5c3ddd48-271a-4f4e-8acd-63c0d4db4c24",
                "032d9806-a7fc-4a9d-8beb-6af50a6dacd6",
                "0b2e2b11-5c70-4d49-9535-ad65ebb9fd31",
                "2c61d9e6-6ddf-4e26-a08e-faa8d8d94b09",
                "f0be684f-7d31-4527-bbba-4b68a4b011bc",
                "5855db48-e076-4353-b0c6-bcf0bb40b2c6",
                "8c7788e8-2698-4f2b-a127-10ff160453d7",
                "15138bf2-1044-4f03-a533-7de9ce8db2ca",
                "27826ae3-3721-4c6c-8ee2-9f021f2ad601",
                "23587e31-f025-458e-b5cf-94274010cf61"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 290,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "df9d20d0-ccb4-4b3d-9d7c-5cdd3fa41692",
              "title": "Orders (splits) with exchange value other than smallest dec",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec \"before each\" hook",
                  "timedOut": false,
                  "duration": 3003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "fd3a8476-57db-4a4d-b09e-ea88ab856628",
                  "parentUUID": "df9d20d0-ccb4-4b3d-9d7c-5cdd3fa41692",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity 1: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Identity 1: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.clasificationID1 = value.value.id.value.classificationID.value.idString\n                    data.hashID1 = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "3ba6f099-0481-49bf-a887-7fc37b4d60e1",
                  "parentUUID": "df9d20d0-ccb4-4b3d-9d7c-5cdd3fa41692",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 2: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Identity 2: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits2\") {\n                    data.clasificationID2 = value.value.id.value.classificationID.value.idString\n                    data.hashID2 = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "e7ae0178-b98a-4738-8d47-5d58840a252e",
                  "parentUUID": "df9d20d0-ccb4-4b3d-9d7c-5cdd3fa41692",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 3: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Identity 3: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits3\") {\n                    data.clasificationID3 = value.value.id.value.classificationID.value.idString\n                    data.hashID3 = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "5a90f00d-f4ec-4ac4-b5c2-222188286232",
                  "parentUUID": "df9d20d0-ccb4-4b3d-9d7c-5cdd3fa41692",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Asset: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Define Asset: ",
                  "timedOut": false,
                  "duration": 52,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.defineAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID + '|' + data.hashID,\n                    \"mutableTraits\": \"ASSETS101:S|num1\" + \",burn:H|1\",\n                    \"immutableTraits\": \"ASSETS111:S|\",\n                    \"mutableMetaTraits\": \"ASSETS121:S|num3\",\n                    \"immutableMetaTraits\": \"ASSETS131:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "6e5b2e16-f15b-4333-885d-bbbbabbdbd7f",
                  "parentUUID": "df9d20d0-ccb4-4b3d-9d7c-5cdd3fa41692",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Tx: ",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "c7141108-9689-46de-8562-bce2b76e37fd",
                  "parentUUID": "df9d20d0-ccb4-4b3d-9d7c-5cdd3fa41692",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Classification: ",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qClassification)\n            var list = res.body.result.value.classifications.value.list\n            list.forEach(function (value) {\n                if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ASSETS131\") {\n                    data.chainID = value.value.id.value.chainID.value.idString\n                    data.clshashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "ade0f8fb-8666-4801-a79f-a2dd5faa834d",
                  "parentUUID": "df9d20d0-ccb4-4b3d-9d7c-5cdd3fa41692",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Mint Asset: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Mint Asset: ",
                  "timedOut": false,
                  "duration": 45,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.mintAssetType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"toID\": data.clasificationID1 + '|' + data.hashID1,\n                    \"fromID\": data.clasificationID1 + '|' + data.hashID1,\n                    \"classificationID\": data.chainID + '.' + data.clshashID,\n                    \"mutableProperties\": \"ASSETS101:S|num1\" + \",burn:H|1\",\n                    \"immutableProperties\": \"ASSETS111:S|abc\",\n                    \"mutableMetaProperties\": \"ASSETS121:S|num3\",\n                    \"immutableMetaProperties\": \"ASSETS131:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.mintAssetPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "a80cfdd5-6278-44e0-be6f-59fb913472a3",
                  "parentUUID": "df9d20d0-ccb4-4b3d-9d7c-5cdd3fa41692",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Tx: ",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "097d3695-bd76-4128-9761-792e30bdbfcc",
                  "parentUUID": "df9d20d0-ccb4-4b3d-9d7c-5cdd3fa41692",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Asset: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qAsset)\n            var list = res.body.result.value.assets.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSETS131\") {\n                    data.aclasificationID = value.value.id.value.classificationID.value.idString\n                    data.ahashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "59511677-02d3-45d4-be8f-9caea099ba60",
                  "parentUUID": "df9d20d0-ccb4-4b3d-9d7c-5cdd3fa41692",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Define Order: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Define Order: ",
                  "timedOut": false,
                  "duration": 44,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.defineOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID1 + '|' + data.hashID1,\n                    \"mutableTraits\": \"ORDER_MUTABLE211:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n                    \"immutableTraits\": \"ORDER_IMMUTABLE222:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n                    \"mutableMetaTraits\": \"ORDER_MUTABLE_META233:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerOwnableSplit:D|100\" + \",expiry:H|\" + config.expiry + \",makerSplit:D|\" + config.makerownablesplit + \",takerSplit:D|,takerID:S|\",\n                    \"immutableMetaTraits\": \"ORDER_IMMUTABLE_META244:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.defineOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "db0b90b8-899a-431a-860e-733ea321fb31",
                  "parentUUID": "df9d20d0-ccb4-4b3d-9d7c-5cdd3fa41692",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Tx: ",
                  "timedOut": false,
                  "duration": 39,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "a30f8313-d172-4a89-85ae-161095499756",
                  "parentUUID": "df9d20d0-ccb4-4b3d-9d7c-5cdd3fa41692",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Classification: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Classification: ",
                  "timedOut": false,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qClassification)\n            var list = res.body.result.value.classifications.value.list\n            list.forEach(function (value) {\n                if (value.value.immutableTraits.value.properties.value.propertyList[0].value.id.value.idString == \"ORDER_IMMUTABLE_META244\") {\n                    data.chainID = value.value.id.value.chainID.value.idString\n                    data.clshashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "01362da2-012d-48dd-9989-5a2912e27da0",
                  "parentUUID": "df9d20d0-ccb4-4b3d-9d7c-5cdd3fa41692",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Asset Make Order: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Asset Make Order: ",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.makeOrderType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID1 + '|' + data.hashID1,\n                    \"classificationID\": data.chainID + '.' + data.clshashID,\n                    \"makerOwnableID\": data.aclasificationID + '|' + data.ahashID,\n                    \"takerOwnableID\": config.makerownableid,\n                    \"expiresIn\": config.expiry,\n                    \"makerOwnableSplit\": config.makerownablesplit,\n                    \"mutableProperties\": \"ORDER_MUTABLE21:S|ORDER_CLASSIFICATION_MUTABLE_1\",\n                    \"immutableProperties\": \"ORDER_IMMUTABLE22:S|ORDER_CLASSIFICATION_IMMUTABLE_1\",\n                    \"mutableMetaProperties\": \"ORDER_MUTABLE_META23:S|ORDER_CLASSIFICATION_MUTABLE_META_1,exchangeRate:D|\" + config.exchangeRate + \",makerSplit:D|100\",\n                    \"immutableMetaProperties\": \"ORDER_IMMUTABLE_META24:S|num4\"\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.makeOrderPath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {},
                  "uuid": "9bfa5137-1d83-4936-a60f-5a17faa8c2f9",
                  "parentUUID": "df9d20d0-ccb4-4b3d-9d7c-5cdd3fa41692",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Orders Orders (splits) with exchange value other than smallest dec Query Tx: ",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        //do nothing\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "6a6adaaf-f152-4117-9a85-ea7279e2dc93",
                  "parentUUID": "df9d20d0-ccb4-4b3d-9d7c-5cdd3fa41692",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3ba6f099-0481-49bf-a887-7fc37b4d60e1",
                "e7ae0178-b98a-4738-8d47-5d58840a252e",
                "5a90f00d-f4ec-4ac4-b5c2-222188286232",
                "6e5b2e16-f15b-4333-885d-bbbbabbdbd7f",
                "c7141108-9689-46de-8562-bce2b76e37fd",
                "ade0f8fb-8666-4801-a79f-a2dd5faa834d",
                "a80cfdd5-6278-44e0-be6f-59fb913472a3",
                "097d3695-bd76-4128-9761-792e30bdbfcc",
                "59511677-02d3-45d4-be8f-9caea099ba60",
                "db0b90b8-899a-431a-860e-733ea321fb31",
                "a30f8313-d172-4a89-85ae-161095499756",
                "01362da2-012d-48dd-9989-5a2912e27da0",
                "9bfa5137-1d83-4936-a60f-5a17faa8c2f9",
                "6a6adaaf-f152-4117-9a85-ea7279e2dc93"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 348,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9589426f-3efb-4364-bbe0-4dd88e7dea0c",
          "title": "Maintainer",
          "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
          "file": "/test/testCases.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "27b63314-22f0-4259-a6c7-c82a7997f883",
              "title": "Deputize",
              "fullFile": "/home/aditimahesh/Documents/Work/Persistence/go/src/github.com/persistenceOne/assetMantle/mocha/test/testCases.js",
              "file": "/test/testCases.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook",
                  "fullTitle": "Maintainer Deputize \"before each\" hook",
                  "timedOut": false,
                  "duration": 3003,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "this.timeout(4000)\nsetTimeout(function () {\n    done()\n}, 3000)",
                  "err": {},
                  "uuid": "3a3e48e5-c114-4935-a66e-9b5293991d4d",
                  "parentUUID": "27b63314-22f0-4259-a6c7-c82a7997f883",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Query Identity 1: ",
                  "fullTitle": "Maintainer Deputize Query Identity 1: ",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits1\") {\n                    data.clasificationID1 = value.value.id.value.classificationID.value.idString\n                    data.hashID1 = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "ff8ff13e-a0b5-414b-8eef-fe93a7a6d11c",
                  "parentUUID": "27b63314-22f0-4259-a6c7-c82a7997f883",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Identity 2: ",
                  "fullTitle": "Maintainer Deputize Query Identity 2: ",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qIdentity)\n            var list = res.body.result.value.identities.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"immutableMetaTraits2\") {\n                    data.clasificationID2 = value.value.id.value.classificationID.value.idString\n                    data.hashID2 = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "86f9ac5d-6962-45aa-aed3-c9c006652454",
                  "parentUUID": "27b63314-22f0-4259-a6c7-c82a7997f883",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Asset: ",
                  "fullTitle": "Maintainer Deputize Query Asset: ",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n                .get(config.qAsset)\n            var list = res.body.result.value.assets.value.list\n            list.forEach(function (value) {\n                if (value.value.immutables.value.properties.value.propertyList[0].value.id.value.idString == \"ASSET_PD\") {\n                    data.aclasificationID = value.value.id.value.classificationID.value.idString\n                    data.ahashID = value.value.id.value.hashID.value.idString\n                }\n            });",
                  "err": {},
                  "uuid": "5f9f5316-058f-4da8-be0d-5f60a925761a",
                  "parentUUID": "27b63314-22f0-4259-a6c7-c82a7997f883",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Maintainer Deputize: ",
                  "fullTitle": "Maintainer Deputize Maintainer Deputize: ",
                  "timedOut": false,
                  "duration": 18,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var num = helper.generateRandomInteger(0, 10000)\n            let obj = {\n                \"type\": config.deputizeType,\n                \"value\": {\n                    \"baseReq\": {\n                        \"from\": config.testAccountAddress,\n                        \"chain_id\": config.chain_id\n                    },\n                    \"fromID\": data.clasificationID1 + '|' + data.hashID1,\n                    \"toID\": data.clasificationID2 + '|' + data.hashID2,\n                    \"classificationID\": data.aclasificationID + '|' + data.ahashID,\n                    \"maintainedTraits\": \"maintainerTraits:S|maintainerTraits\",\n                    \"addMaintainer\": true,\n                    \"removeMaintainer\": false,\n                    \"mutateMaintainer\": false\n                }\n            }\n            var err, res = await chai.request(server)\n                .post(config.deputizePath)\n                .send(obj)\n            res.should.have.status(200);\n            res.body.should.be.a('object');\n            expect(res.body.txhash).to.not.equal(null)\n            expect(res.body.txhash).to.not.equal('')\n            txHash = res.body.txhash",
                  "err": {
                    "message": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400",
                    "estack": "AssertionError: expected { Object (_events, _eventsCount, ...) } to have status code 200 but got 400\n    at Context.it (test/testCases.js:6563:29)\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
                    "diff": "- 400\n+ 200\n"
                  },
                  "uuid": "246a8c49-9d98-4a61-90f2-883a46fe3124",
                  "parentUUID": "27b63314-22f0-4259-a6c7-c82a7997f883",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Query Tx: ",
                  "fullTitle": "Maintainer Deputize Query Tx: ",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var err, res = await chai.request(server)\n    .get('/txs/' + txHash)\nvar data1 = JSON.stringify(res.body)\nasync.retry({ times: config.retry_count, interval: config.timeout }, function (callbackretry) {\n    if ((data1.indexOf('error') != -1)) {\n        callbackretry('failed')\n    } else {\n        //continue\n    }\n}, function (err, response) {\n    if (err) {\n        console.log(\"err: \" + err)\n        console.log(\"response: \" + response)\n        console.log(\"failed to send txHash query\")\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    } else {\n        expect(res.body.raw_log).to.not.contain('failed')\n        expect(res.body).to.not.contain('error')\n    }\n})",
                  "err": {},
                  "uuid": "7bf0336f-c686-4dbe-9808-6f7ba722b1d5",
                  "parentUUID": "27b63314-22f0-4259-a6c7-c82a7997f883",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff8ff13e-a0b5-414b-8eef-fe93a7a6d11c",
                "86f9ac5d-6962-45aa-aed3-c9c006652454",
                "5f9f5316-058f-4da8-be0d-5f60a925761a",
                "7bf0336f-c686-4dbe-9808-6f7ba722b1d5"
              ],
              "failures": [
                "246a8c49-9d98-4a61-90f2-883a46fe3124"
              ],
              "pending": [],
              "skipped": [],
              "duration": 65,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}